// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGLES.INTEL
{
	public static unsafe partial class GLINTELPerformanceQuery
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BeginPerfQueryINTELNative(uint queryHandle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[0])(queryHandle);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[0])(queryHandle);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void BeginPerfQueryINTEL(uint queryHandle)
		{
			BeginPerfQueryINTELNative(queryHandle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CreatePerfQueryINTELNative(uint queryId, uint* queryHandle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[1])(queryId, queryHandle);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[1])(queryId, (nint)queryHandle);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void CreatePerfQueryINTEL(uint queryId, uint* queryHandle)
		{
			CreatePerfQueryINTELNative(queryId, queryHandle);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void CreatePerfQueryINTEL(uint queryId, Span<uint> queryHandle)
		{
			fixed (uint* pqueryHandle0 = queryHandle)
			{
				CreatePerfQueryINTELNative(queryId, pqueryHandle0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void CreatePerfQueryINTEL(uint queryId, ref uint queryHandle)
		{
			fixed (uint* pqueryHandle0 = &queryHandle)
			{
				CreatePerfQueryINTELNative(queryId, pqueryHandle0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DeletePerfQueryINTELNative(uint queryHandle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[2])(queryHandle);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[2])(queryHandle);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void DeletePerfQueryINTEL(uint queryHandle)
		{
			DeletePerfQueryINTELNative(queryHandle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EndPerfQueryINTELNative(uint queryHandle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[3])(queryHandle);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[3])(queryHandle);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void EndPerfQueryINTEL(uint queryHandle)
		{
			EndPerfQueryINTELNative(queryHandle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetFirstPerfQueryIdINTELNative(uint* queryId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, void>)funcTable[4])(queryId);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[4])((nint)queryId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetFirstPerfQueryIdINTEL(uint* queryId)
		{
			GetFirstPerfQueryIdINTELNative(queryId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetFirstPerfQueryIdINTEL(Span<uint> queryId)
		{
			fixed (uint* pqueryId0 = queryId)
			{
				GetFirstPerfQueryIdINTELNative(pqueryId0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetFirstPerfQueryIdINTEL(ref uint queryId)
		{
			fixed (uint* pqueryId0 = &queryId)
			{
				GetFirstPerfQueryIdINTELNative(pqueryId0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetNextPerfQueryIdINTELNative(uint queryId, uint* nextQueryId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[5])(queryId, nextQueryId);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[5])(queryId, (nint)nextQueryId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetNextPerfQueryIdINTEL(uint queryId, uint* nextQueryId)
		{
			GetNextPerfQueryIdINTELNative(queryId, nextQueryId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetNextPerfQueryIdINTEL(uint queryId, Span<uint> nextQueryId)
		{
			fixed (uint* pnextQueryId0 = nextQueryId)
			{
				GetNextPerfQueryIdINTELNative(queryId, pnextQueryId0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetNextPerfQueryIdINTEL(uint queryId, ref uint nextQueryId)
		{
			fixed (uint* pnextQueryId0 = &nextQueryId)
			{
				GetNextPerfQueryIdINTELNative(queryId, pnextQueryId0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetPerfCounterInfoINTELNative(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, byte*, uint, byte*, uint*, uint*, uint*, uint*, ulong*, void>)funcTable[6])(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, uint, nint, nint, nint, nint, nint, nint, void>)funcTable[6])(queryId, counterId, counterNameLength, (nint)counterName, counterDescLength, (nint)counterDesc, (nint)counterOffset, (nint)counterDataSize, (nint)counterTypeEnum, (nint)counterDataTypeEnum, (nint)rawCounterMaxValue);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, string counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (counterName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(counterName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(counterName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pStr0, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, string counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (counterDesc != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(counterDesc);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(counterDesc, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pStr0, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, string counterName, uint counterDescLength, string counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (counterName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(counterName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(counterName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte* pStr1 = null;
			int pStrSize1 = 0;
			if (counterDesc != null)
			{
				pStrSize1 = Utils.GetByteCountUTF8(counterDesc);
				if (pStrSize1 >= Utils.MaxStackallocSize)
				{
					pStr1 = Utils.Alloc<byte>(pStrSize1 + 1);
				}
				else
				{
					byte* pStrStack1 = stackalloc byte[pStrSize1 + 1];
					pStr1 = pStrStack1;
				}
				int pStrOffset1 = Utils.EncodeStringUTF8(counterDesc, pStr1, pStrSize1);
				pStr1[pStrOffset1] = 0;
			}
			GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pStr0, counterDescLength, pStr1, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			if (pStrSize1 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr1);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = counterDataSize)
			{
				GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = &counterDataSize)
			{
				GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (uint* pcounterDataSize3 = counterDataSize)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (uint* pcounterDataSize3 = &counterDataSize)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterTypeEnum0 = counterTypeEnum)
			{
				GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum0, counterDataTypeEnum, rawCounterMaxValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterTypeEnum0 = &counterTypeEnum)
			{
				GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum0, counterDataTypeEnum, rawCounterMaxValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum1, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum1, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, pcounterTypeEnum1, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, pcounterTypeEnum1, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, pcounterTypeEnum2, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, pcounterTypeEnum2, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, pcounterTypeEnum1, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, pcounterTypeEnum1, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, pcounterTypeEnum2, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, pcounterTypeEnum2, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, pcounterTypeEnum2, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, pcounterTypeEnum2, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, pcounterTypeEnum3, counterDataTypeEnum, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, pcounterTypeEnum3, counterDataTypeEnum, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = counterDataSize)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, pcounterTypeEnum1, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = &counterDataSize)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, pcounterTypeEnum1, counterDataTypeEnum, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, pcounterTypeEnum2, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, pcounterTypeEnum2, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, pcounterTypeEnum2, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, pcounterTypeEnum2, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, pcounterTypeEnum3, counterDataTypeEnum, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, pcounterTypeEnum3, counterDataTypeEnum, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, pcounterTypeEnum2, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, pcounterTypeEnum2, counterDataTypeEnum, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, counterDataTypeEnum, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, counterDataTypeEnum, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, counterDataTypeEnum, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, counterDataTypeEnum, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (uint* pcounterDataSize3 = counterDataSize)
						{
							fixed (uint* pcounterTypeEnum4 = counterTypeEnum)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, pcounterTypeEnum4, counterDataTypeEnum, rawCounterMaxValue);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (uint* pcounterDataSize3 = &counterDataSize)
						{
							fixed (uint* pcounterTypeEnum4 = &counterTypeEnum)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, pcounterTypeEnum4, counterDataTypeEnum, rawCounterMaxValue);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterDataTypeEnum0 = counterDataTypeEnum)
			{
				GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum0, rawCounterMaxValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterDataTypeEnum0 = &counterDataTypeEnum)
			{
				GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum0, rawCounterMaxValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterDataTypeEnum1 = counterDataTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum1, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterDataTypeEnum1 = &counterDataTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum1, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterDataTypeEnum1 = counterDataTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum1, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterDataTypeEnum1 = &counterDataTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum1, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (uint* pcounterDataTypeEnum1 = counterDataTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, counterTypeEnum, pcounterDataTypeEnum1, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (uint* pcounterDataTypeEnum1 = &counterDataTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, counterTypeEnum, pcounterDataTypeEnum1, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, counterTypeEnum, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, counterTypeEnum, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, counterTypeEnum, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, counterTypeEnum, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, counterTypeEnum, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, counterTypeEnum, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = counterDataSize)
			{
				fixed (uint* pcounterDataTypeEnum1 = counterDataTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, counterTypeEnum, pcounterDataTypeEnum1, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = &counterDataSize)
			{
				fixed (uint* pcounterDataTypeEnum1 = &counterDataTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, counterTypeEnum, pcounterDataTypeEnum1, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, counterTypeEnum, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, counterTypeEnum, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, counterTypeEnum, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, counterTypeEnum, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, counterTypeEnum, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, counterTypeEnum, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, counterTypeEnum, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, counterTypeEnum, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, counterTypeEnum, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, counterTypeEnum, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, counterTypeEnum, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, counterTypeEnum, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (uint* pcounterDataSize3 = counterDataSize)
						{
							fixed (uint* pcounterDataTypeEnum4 = counterDataTypeEnum)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, counterTypeEnum, pcounterDataTypeEnum4, rawCounterMaxValue);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (uint* pcounterDataSize3 = &counterDataSize)
						{
							fixed (uint* pcounterDataTypeEnum4 = &counterDataTypeEnum)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, counterTypeEnum, pcounterDataTypeEnum4, rawCounterMaxValue);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterTypeEnum0 = counterTypeEnum)
			{
				fixed (uint* pcounterDataTypeEnum1 = counterDataTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum0, pcounterDataTypeEnum1, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterTypeEnum0 = &counterTypeEnum)
			{
				fixed (uint* pcounterDataTypeEnum1 = &counterDataTypeEnum)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum0, pcounterDataTypeEnum1, rawCounterMaxValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum1, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum1, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, pcounterTypeEnum1, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, pcounterTypeEnum1, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, pcounterTypeEnum2, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, pcounterTypeEnum2, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, pcounterTypeEnum1, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, pcounterTypeEnum1, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, pcounterTypeEnum2, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, pcounterTypeEnum2, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, pcounterTypeEnum2, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, pcounterTypeEnum2, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = counterDataTypeEnum)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, pcounterTypeEnum3, pcounterDataTypeEnum4, rawCounterMaxValue);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = &counterDataTypeEnum)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, pcounterTypeEnum3, pcounterDataTypeEnum4, rawCounterMaxValue);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = counterDataSize)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, pcounterTypeEnum1, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = &counterDataSize)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, pcounterTypeEnum1, pcounterDataTypeEnum2, rawCounterMaxValue);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, pcounterTypeEnum2, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, pcounterTypeEnum2, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, pcounterTypeEnum2, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, pcounterTypeEnum2, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = counterDataTypeEnum)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, pcounterTypeEnum3, pcounterDataTypeEnum4, rawCounterMaxValue);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = &counterDataTypeEnum)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, pcounterTypeEnum3, pcounterDataTypeEnum4, rawCounterMaxValue);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, pcounterTypeEnum2, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, pcounterTypeEnum2, pcounterDataTypeEnum3, rawCounterMaxValue);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = counterDataTypeEnum)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, pcounterDataTypeEnum4, rawCounterMaxValue);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = &counterDataTypeEnum)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, pcounterDataTypeEnum4, rawCounterMaxValue);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = counterDataTypeEnum)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, pcounterDataTypeEnum4, rawCounterMaxValue);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = &counterDataTypeEnum)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, pcounterDataTypeEnum4, rawCounterMaxValue);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (uint* pcounterDataSize3 = counterDataSize)
						{
							fixed (uint* pcounterTypeEnum4 = counterTypeEnum)
							{
								fixed (uint* pcounterDataTypeEnum5 = counterDataTypeEnum)
								{
									GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, pcounterTypeEnum4, pcounterDataTypeEnum5, rawCounterMaxValue);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ulong* rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (uint* pcounterDataSize3 = &counterDataSize)
						{
							fixed (uint* pcounterTypeEnum4 = &counterTypeEnum)
							{
								fixed (uint* pcounterDataTypeEnum5 = &counterDataTypeEnum)
								{
									GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, pcounterTypeEnum4, pcounterDataTypeEnum5, rawCounterMaxValue);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (ulong* prawCounterMaxValue0 = rawCounterMaxValue)
			{
				GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (ulong* prawCounterMaxValue0 = &rawCounterMaxValue)
			{
				GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (ulong* prawCounterMaxValue1 = rawCounterMaxValue)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (ulong* prawCounterMaxValue1 = &rawCounterMaxValue)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (ulong* prawCounterMaxValue1 = rawCounterMaxValue)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (ulong* prawCounterMaxValue1 = &rawCounterMaxValue)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (ulong* prawCounterMaxValue1 = rawCounterMaxValue)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (ulong* prawCounterMaxValue1 = &rawCounterMaxValue)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = counterDataSize)
			{
				fixed (ulong* prawCounterMaxValue1 = rawCounterMaxValue)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = &counterDataSize)
			{
				fixed (ulong* prawCounterMaxValue1 = &rawCounterMaxValue)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (uint* pcounterDataSize3 = counterDataSize)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (uint* pcounterDataSize3 = &counterDataSize)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, counterTypeEnum, counterDataTypeEnum, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterTypeEnum0 = counterTypeEnum)
			{
				fixed (ulong* prawCounterMaxValue1 = rawCounterMaxValue)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum0, counterDataTypeEnum, prawCounterMaxValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterTypeEnum0 = &counterTypeEnum)
			{
				fixed (ulong* prawCounterMaxValue1 = &rawCounterMaxValue)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum0, counterDataTypeEnum, prawCounterMaxValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum1, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum1, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, pcounterTypeEnum1, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, pcounterTypeEnum1, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, pcounterTypeEnum2, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, pcounterTypeEnum2, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, pcounterTypeEnum1, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, pcounterTypeEnum1, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, pcounterTypeEnum2, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, pcounterTypeEnum2, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, pcounterTypeEnum2, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, pcounterTypeEnum2, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, pcounterTypeEnum3, counterDataTypeEnum, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, pcounterTypeEnum3, counterDataTypeEnum, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = counterDataSize)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, pcounterTypeEnum1, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = &counterDataSize)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, pcounterTypeEnum1, counterDataTypeEnum, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, pcounterTypeEnum2, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, pcounterTypeEnum2, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, pcounterTypeEnum2, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, pcounterTypeEnum2, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, pcounterTypeEnum3, counterDataTypeEnum, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, pcounterTypeEnum3, counterDataTypeEnum, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, pcounterTypeEnum2, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, pcounterTypeEnum2, counterDataTypeEnum, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, counterDataTypeEnum, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, counterDataTypeEnum, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, counterDataTypeEnum, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, counterDataTypeEnum, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, uint* counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (uint* pcounterDataSize3 = counterDataSize)
						{
							fixed (uint* pcounterTypeEnum4 = counterTypeEnum)
							{
								fixed (ulong* prawCounterMaxValue5 = rawCounterMaxValue)
								{
									GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, pcounterTypeEnum4, counterDataTypeEnum, prawCounterMaxValue5);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, uint* counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (uint* pcounterDataSize3 = &counterDataSize)
						{
							fixed (uint* pcounterTypeEnum4 = &counterTypeEnum)
							{
								fixed (ulong* prawCounterMaxValue5 = &rawCounterMaxValue)
								{
									GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, pcounterTypeEnum4, counterDataTypeEnum, prawCounterMaxValue5);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterDataTypeEnum0 = counterDataTypeEnum)
			{
				fixed (ulong* prawCounterMaxValue1 = rawCounterMaxValue)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum0, prawCounterMaxValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterDataTypeEnum0 = &counterDataTypeEnum)
			{
				fixed (ulong* prawCounterMaxValue1 = &rawCounterMaxValue)
				{
					GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum0, prawCounterMaxValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterDataTypeEnum1 = counterDataTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum1, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterDataTypeEnum1 = &counterDataTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum1, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterDataTypeEnum1 = counterDataTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum1, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterDataTypeEnum1 = &counterDataTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum1, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, counterTypeEnum, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (uint* pcounterDataTypeEnum1 = counterDataTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, counterTypeEnum, pcounterDataTypeEnum1, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (uint* pcounterDataTypeEnum1 = &counterDataTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, counterTypeEnum, pcounterDataTypeEnum1, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, counterTypeEnum, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, counterTypeEnum, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, counterTypeEnum, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, counterTypeEnum, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, counterTypeEnum, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, counterTypeEnum, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = counterDataSize)
			{
				fixed (uint* pcounterDataTypeEnum1 = counterDataTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, counterTypeEnum, pcounterDataTypeEnum1, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = &counterDataSize)
			{
				fixed (uint* pcounterDataTypeEnum1 = &counterDataTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, counterTypeEnum, pcounterDataTypeEnum1, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, counterTypeEnum, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, counterTypeEnum, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, counterTypeEnum, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, counterTypeEnum, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, counterTypeEnum, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, counterTypeEnum, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, counterTypeEnum, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, counterTypeEnum, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, counterTypeEnum, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, counterTypeEnum, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, counterTypeEnum, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, counterTypeEnum, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, uint* counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (uint* pcounterDataSize3 = counterDataSize)
						{
							fixed (uint* pcounterDataTypeEnum4 = counterDataTypeEnum)
							{
								fixed (ulong* prawCounterMaxValue5 = rawCounterMaxValue)
								{
									GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, counterTypeEnum, pcounterDataTypeEnum4, prawCounterMaxValue5);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, uint* counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (uint* pcounterDataSize3 = &counterDataSize)
						{
							fixed (uint* pcounterDataTypeEnum4 = &counterDataTypeEnum)
							{
								fixed (ulong* prawCounterMaxValue5 = &rawCounterMaxValue)
								{
									GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, counterTypeEnum, pcounterDataTypeEnum4, prawCounterMaxValue5);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterTypeEnum0 = counterTypeEnum)
			{
				fixed (uint* pcounterDataTypeEnum1 = counterDataTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum0, pcounterDataTypeEnum1, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterTypeEnum0 = &counterTypeEnum)
			{
				fixed (uint* pcounterDataTypeEnum1 = &counterDataTypeEnum)
				{
					fixed (ulong* prawCounterMaxValue2 = &rawCounterMaxValue)
					{
						GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum0, pcounterDataTypeEnum1, prawCounterMaxValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum1, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, counterDataSize, pcounterTypeEnum1, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, pcounterTypeEnum1, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, counterDataSize, pcounterTypeEnum1, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, pcounterTypeEnum2, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, counterDataSize, pcounterTypeEnum2, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, pcounterTypeEnum1, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, counterDataSize, pcounterTypeEnum1, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, pcounterTypeEnum2, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, counterDataSize, pcounterTypeEnum2, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, pcounterTypeEnum2, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, counterDataSize, pcounterTypeEnum2, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, uint* counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = counterDataTypeEnum)
							{
								fixed (ulong* prawCounterMaxValue5 = rawCounterMaxValue)
								{
									GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, pcounterTypeEnum3, pcounterDataTypeEnum4, prawCounterMaxValue5);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, uint* counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = &counterDataTypeEnum)
							{
								fixed (ulong* prawCounterMaxValue5 = &rawCounterMaxValue)
								{
									GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, counterDataSize, pcounterTypeEnum3, pcounterDataTypeEnum4, prawCounterMaxValue5);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = counterDataSize)
			{
				fixed (uint* pcounterTypeEnum1 = counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, pcounterTypeEnum1, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterDataSize0 = &counterDataSize)
			{
				fixed (uint* pcounterTypeEnum1 = &counterTypeEnum)
				{
					fixed (uint* pcounterDataTypeEnum2 = &counterDataTypeEnum)
					{
						fixed (ulong* prawCounterMaxValue3 = &rawCounterMaxValue)
						{
							GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, pcounterDataSize0, pcounterTypeEnum1, pcounterDataTypeEnum2, prawCounterMaxValue3);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, pcounterTypeEnum2, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, counterOffset, pcounterDataSize1, pcounterTypeEnum2, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, pcounterTypeEnum2, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public static void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, counterOffset, pcounterDataSize1, pcounterTypeEnum2, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}
	}
}
