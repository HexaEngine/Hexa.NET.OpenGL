// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.OpenGL
{
	public unsafe partial class GL
	{

		[NativeName(NativeNameType.Func, "glRasterPos2fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2FvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[215])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[215])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos2fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos2Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			RasterPos2FvNative(v);
		}

		[NativeName(NativeNameType.Func, "glRasterPos2fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos2Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float v)
		{
			fixed (float* pv = &v)
			{
				RasterPos2FvNative((float*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glRasterPos2i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2INative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[216])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[216])(x, y);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos2i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos2I([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y)
		{
			RasterPos2INative(x, y);
		}

		[NativeName(NativeNameType.Func, "glRasterPos2iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2IvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[217])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[217])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos2iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos2Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			RasterPos2IvNative(v);
		}

		[NativeName(NativeNameType.Func, "glRasterPos2iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos2Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] ref int v)
		{
			fixed (int* pv = &v)
			{
				RasterPos2IvNative((int*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glRasterPos2s")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2SNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLshort")] short x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLshort")] short y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[218])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[218])(x, y);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos2s")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos2S([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLshort")] short x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLshort")] short y)
		{
			RasterPos2SNative(x, y);
		}

		[NativeName(NativeNameType.Func, "glRasterPos2sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2SvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[219])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[219])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos2sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos2Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			RasterPos2SvNative(v);
		}

		[NativeName(NativeNameType.Func, "glRasterPos2sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos2Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] ref short v)
		{
			fixed (short* pv = &v)
			{
				RasterPos2SvNative((short*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glRasterPos3d")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3DNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLdouble")] double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[220])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[220])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos3d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos3D([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLdouble")] double z)
		{
			RasterPos3DNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "glRasterPos3dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3DvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[221])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[221])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos3dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos3Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			RasterPos3DvNative(v);
		}

		[NativeName(NativeNameType.Func, "glRasterPos3dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos3Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] ref double v)
		{
			fixed (double* pv = &v)
			{
				RasterPos3DvNative((double*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glRasterPos3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLfloat")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[222])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[222])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos3F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLfloat")] float z)
		{
			RasterPos3FNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "glRasterPos3fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3FvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[223])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[223])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos3fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos3Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			RasterPos3FvNative(v);
		}

		[NativeName(NativeNameType.Func, "glRasterPos3fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos3Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float v)
		{
			fixed (float* pv = &v)
			{
				RasterPos3FvNative((float*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glRasterPos3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3INative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLint")] int z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[224])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[224])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos3I([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLint")] int z)
		{
			RasterPos3INative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "glRasterPos3iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3IvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[225])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[225])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos3iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos3Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			RasterPos3IvNative(v);
		}

		[NativeName(NativeNameType.Func, "glRasterPos3iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos3Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] ref int v)
		{
			fixed (int* pv = &v)
			{
				RasterPos3IvNative((int*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glRasterPos3s")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3SNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLshort")] short x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLshort")] short y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLshort")] short z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[226])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[226])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos3s")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos3S([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLshort")] short x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLshort")] short y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLshort")] short z)
		{
			RasterPos3SNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "glRasterPos3sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3SvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[227])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[227])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos3sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos3Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			RasterPos3SvNative(v);
		}

		[NativeName(NativeNameType.Func, "glRasterPos3sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos3Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] ref short v)
		{
			fixed (short* pv = &v)
			{
				RasterPos3SvNative((short*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glRasterPos4d")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4DNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLdouble")] double z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLdouble")] double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[228])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[228])(x, y, z, w);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos4d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos4D([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLdouble")] double z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLdouble")] double w)
		{
			RasterPos4DNative(x, y, z, w);
		}

		[NativeName(NativeNameType.Func, "glRasterPos4dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4DvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[229])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[229])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos4dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos4Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			RasterPos4DvNative(v);
		}

		[NativeName(NativeNameType.Func, "glRasterPos4dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos4Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] ref double v)
		{
			fixed (double* pv = &v)
			{
				RasterPos4DvNative((double*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glRasterPos4f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLfloat")] float z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLfloat")] float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[230])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[230])(x, y, z, w);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos4f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos4F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLfloat")] float z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLfloat")] float w)
		{
			RasterPos4FNative(x, y, z, w);
		}

		[NativeName(NativeNameType.Func, "glRasterPos4fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4FvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[231])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[231])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos4fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos4Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			RasterPos4FvNative(v);
		}

		[NativeName(NativeNameType.Func, "glRasterPos4fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos4Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float v)
		{
			fixed (float* pv = &v)
			{
				RasterPos4FvNative((float*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glRasterPos4i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4INative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLint")] int z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLint")] int w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[232])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[232])(x, y, z, w);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos4i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos4I([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLint")] int z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLint")] int w)
		{
			RasterPos4INative(x, y, z, w);
		}

		[NativeName(NativeNameType.Func, "glRasterPos4iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4IvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[233])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[233])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos4iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos4Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			RasterPos4IvNative(v);
		}

		[NativeName(NativeNameType.Func, "glRasterPos4iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos4Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] ref int v)
		{
			fixed (int* pv = &v)
			{
				RasterPos4IvNative((int*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glRasterPos4s")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4SNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLshort")] short x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLshort")] short y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLshort")] short z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLshort")] short w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[234])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[234])(x, y, z, w);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos4s")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos4S([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLshort")] short x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLshort")] short y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLshort")] short z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLshort")] short w)
		{
			RasterPos4SNative(x, y, z, w);
		}

		[NativeName(NativeNameType.Func, "glRasterPos4sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4SvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[235])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[235])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRasterPos4sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos4Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			RasterPos4SvNative(v);
		}

		[NativeName(NativeNameType.Func, "glRasterPos4sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void RasterPos4Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] ref short v)
		{
			fixed (short* pv = &v)
			{
				RasterPos4SvNative((short*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glReadBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ReadBufferNative([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "GLenum")] uint mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[236])(mode);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[236])(mode);
			#endif
		}

		[NativeName(NativeNameType.Func, "glReadBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ReadBuffer([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "GLenum")] uint mode)
		{
			ReadBufferNative(mode);
		}

		[NativeName(NativeNameType.Func, "glReadPixels")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ReadPixelsNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLsizei")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "GLsizei")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "GLenum")] uint format, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "GLenum")] uint type, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "GLvoid*")] void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, uint, uint, void*, void>)funcTable[237])(x, y, width, height, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, uint, uint, nint, void>)funcTable[237])(x, y, width, height, format, type, (nint)pixels);
			#endif
		}

		[NativeName(NativeNameType.Func, "glReadPixels")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ReadPixels([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLsizei")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "GLsizei")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "GLenum")] uint format, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "GLenum")] uint type, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "GLvoid*")] void* pixels)
		{
			ReadPixelsNative(x, y, width, height, format, type, pixels);
		}

		[NativeName(NativeNameType.Func, "glRectd")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectdNative([NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "GLdouble")] double x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "GLdouble")] double y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "GLdouble")] double x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "GLdouble")] double y2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[238])(x1, y1, x2, y2);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[238])(x1, y1, x2, y2);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRectd")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectd([NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "GLdouble")] double x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "GLdouble")] double y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "GLdouble")] double x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "GLdouble")] double y2)
		{
			RectdNative(x1, y1, x2, y2);
		}

		[NativeName(NativeNameType.Func, "glRectdv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectdvNative([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, double*, void>)funcTable[239])(v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[239])((nint)v1, (nint)v2);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRectdv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectdv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v2)
		{
			RectdvNative(v1, v2);
		}

		[NativeName(NativeNameType.Func, "glRectdv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectdv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLdouble*")] ref double v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v2)
		{
			fixed (double* pv1 = &v1)
			{
				RectdvNative((double*)pv1, v2);
			}
		}

		[NativeName(NativeNameType.Func, "glRectdv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectdv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLdouble*")] ref double v2)
		{
			fixed (double* pv2 = &v2)
			{
				RectdvNative(v1, (double*)pv2);
			}
		}

		[NativeName(NativeNameType.Func, "glRectdv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectdv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLdouble*")] ref double v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLdouble*")] ref double v2)
		{
			fixed (double* pv1 = &v1)
			{
				fixed (double* pv2 = &v2)
				{
					RectdvNative((double*)pv1, (double*)pv2);
				}
			}
		}

		[NativeName(NativeNameType.Func, "glRectf")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectfNative([NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "GLfloat")] float x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "GLfloat")] float y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "GLfloat")] float x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "GLfloat")] float y2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[240])(x1, y1, x2, y2);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[240])(x1, y1, x2, y2);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRectf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectf([NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "GLfloat")] float x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "GLfloat")] float y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "GLfloat")] float x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "GLfloat")] float y2)
		{
			RectfNative(x1, y1, x2, y2);
		}

		[NativeName(NativeNameType.Func, "glRectfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectfvNative([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, float*, void>)funcTable[241])(v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[241])((nint)v1, (nint)v2);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRectfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectfv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v2)
		{
			RectfvNative(v1, v2);
		}

		[NativeName(NativeNameType.Func, "glRectfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectfv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v2)
		{
			fixed (float* pv1 = &v1)
			{
				RectfvNative((float*)pv1, v2);
			}
		}

		[NativeName(NativeNameType.Func, "glRectfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectfv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float v2)
		{
			fixed (float* pv2 = &v2)
			{
				RectfvNative(v1, (float*)pv2);
			}
		}

		[NativeName(NativeNameType.Func, "glRectfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectfv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float v2)
		{
			fixed (float* pv1 = &v1)
			{
				fixed (float* pv2 = &v2)
				{
					RectfvNative((float*)pv1, (float*)pv2);
				}
			}
		}

		[NativeName(NativeNameType.Func, "glRecti")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectiNative([NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "GLint")] int x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "GLint")] int y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "GLint")] int x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "GLint")] int y2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[242])(x1, y1, x2, y2);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[242])(x1, y1, x2, y2);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRecti")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Recti([NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "GLint")] int x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "GLint")] int y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "GLint")] int x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "GLint")] int y2)
		{
			RectiNative(x1, y1, x2, y2);
		}

		[NativeName(NativeNameType.Func, "glRectiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectivNative([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLint*")] int* v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLint*")] int* v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, int*, void>)funcTable[243])(v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[243])((nint)v1, (nint)v2);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRectiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectiv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLint*")] int* v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLint*")] int* v2)
		{
			RectivNative(v1, v2);
		}

		[NativeName(NativeNameType.Func, "glRectiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectiv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLint*")] ref int v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLint*")] int* v2)
		{
			fixed (int* pv1 = &v1)
			{
				RectivNative((int*)pv1, v2);
			}
		}

		[NativeName(NativeNameType.Func, "glRectiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectiv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLint*")] int* v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLint*")] ref int v2)
		{
			fixed (int* pv2 = &v2)
			{
				RectivNative(v1, (int*)pv2);
			}
		}

		[NativeName(NativeNameType.Func, "glRectiv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectiv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLint*")] ref int v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLint*")] ref int v2)
		{
			fixed (int* pv1 = &v1)
			{
				fixed (int* pv2 = &v2)
				{
					RectivNative((int*)pv1, (int*)pv2);
				}
			}
		}

		[NativeName(NativeNameType.Func, "glRects")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectsNative([NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "GLshort")] short x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "GLshort")] short y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "GLshort")] short x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "GLshort")] short y2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[244])(x1, y1, x2, y2);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[244])(x1, y1, x2, y2);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRects")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rects([NativeName(NativeNameType.Param, "x1")] [NativeName(NativeNameType.Type, "GLshort")] short x1, [NativeName(NativeNameType.Param, "y1")] [NativeName(NativeNameType.Type, "GLshort")] short y1, [NativeName(NativeNameType.Param, "x2")] [NativeName(NativeNameType.Type, "GLshort")] short x2, [NativeName(NativeNameType.Param, "y2")] [NativeName(NativeNameType.Type, "GLshort")] short y2)
		{
			RectsNative(x1, y1, x2, y2);
		}

		[NativeName(NativeNameType.Func, "glRectsv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectsvNative([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, short*, void>)funcTable[245])(v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[245])((nint)v1, (nint)v2);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRectsv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectsv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v2)
		{
			RectsvNative(v1, v2);
		}

		[NativeName(NativeNameType.Func, "glRectsv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectsv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLshort*")] ref short v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v2)
		{
			fixed (short* pv1 = &v1)
			{
				RectsvNative((short*)pv1, v2);
			}
		}

		[NativeName(NativeNameType.Func, "glRectsv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectsv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLshort*")] ref short v2)
		{
			fixed (short* pv2 = &v2)
			{
				RectsvNative(v1, (short*)pv2);
			}
		}

		[NativeName(NativeNameType.Func, "glRectsv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rectsv([NativeName(NativeNameType.Param, "v1")] [NativeName(NativeNameType.Type, "const GLshort*")] ref short v1, [NativeName(NativeNameType.Param, "v2")] [NativeName(NativeNameType.Type, "const GLshort*")] ref short v2)
		{
			fixed (short* pv1 = &v1)
			{
				fixed (short* pv2 = &v2)
				{
					RectsvNative((short*)pv1, (short*)pv2);
				}
			}
		}

		[NativeName(NativeNameType.Func, "glRenderMode")]
		[return: NativeName(NativeNameType.Type, "GLint")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int RenderModeNative([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "GLenum")] uint mode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, int>)funcTable[246])(mode);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, int>)funcTable[246])(mode);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRenderMode")]
		[return: NativeName(NativeNameType.Type, "GLint")]
		public static int RenderMode([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "GLenum")] uint mode)
		{
			int ret = RenderModeNative(mode);
			return ret;
		}

		[NativeName(NativeNameType.Func, "glRotated")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RotatedNative([NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "GLdouble")] double angle, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLdouble")] double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[247])(angle, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[247])(angle, x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRotated")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rotated([NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "GLdouble")] double angle, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLdouble")] double z)
		{
			RotatedNative(angle, x, y, z);
		}

		[NativeName(NativeNameType.Func, "glRotatef")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RotatefNative([NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "GLfloat")] float angle, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLfloat")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[248])(angle, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[248])(angle, x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "glRotatef")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Rotatef([NativeName(NativeNameType.Param, "angle")] [NativeName(NativeNameType.Type, "GLfloat")] float angle, [NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLfloat")] float z)
		{
			RotatefNative(angle, x, y, z);
		}

		[NativeName(NativeNameType.Func, "glScaled")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScaledNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLdouble")] double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[249])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[249])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "glScaled")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Scaled([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLdouble")] double z)
		{
			ScaledNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "glScalef")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScalefNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLfloat")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[250])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[250])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "glScalef")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Scalef([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLfloat")] float z)
		{
			ScalefNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "glScissor")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScissorNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLsizei")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "GLsizei")] int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[251])(x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[251])(x, y, width, height);
			#endif
		}

		[NativeName(NativeNameType.Func, "glScissor")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Scissor([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLsizei")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "GLsizei")] int height)
		{
			ScissorNative(x, y, width, height);
		}

		[NativeName(NativeNameType.Func, "glSelectBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SelectBufferNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "GLsizei")] int size, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "GLuint*")] uint* buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[252])(size, buffer);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[252])(size, (nint)buffer);
			#endif
		}

		[NativeName(NativeNameType.Func, "glSelectBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SelectBuffer([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "GLsizei")] int size, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "GLuint*")] uint* buffer)
		{
			SelectBufferNative(size, buffer);
		}

		[NativeName(NativeNameType.Func, "glSelectBuffer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void SelectBuffer([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "GLsizei")] int size, [NativeName(NativeNameType.Param, "buffer")] [NativeName(NativeNameType.Type, "GLuint*")] ref uint buffer)
		{
			fixed (uint* pbuffer = &buffer)
			{
				SelectBufferNative(size, (uint*)pbuffer);
			}
		}

		[NativeName(NativeNameType.Func, "glShadeModel")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ShadeModelNative([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "GLenum")] uint mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[253])(mode);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[253])(mode);
			#endif
		}

		[NativeName(NativeNameType.Func, "glShadeModel")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void ShadeModel([NativeName(NativeNameType.Param, "mode")] [NativeName(NativeNameType.Type, "GLenum")] uint mode)
		{
			ShadeModelNative(mode);
		}

		[NativeName(NativeNameType.Func, "glStencilFunc")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void StencilFuncNative([NativeName(NativeNameType.Param, "func")] [NativeName(NativeNameType.Type, "GLenum")] uint func, [NativeName(NativeNameType.Param, "ref")] [NativeName(NativeNameType.Type, "GLint")] int reference, [NativeName(NativeNameType.Param, "mask")] [NativeName(NativeNameType.Type, "GLuint")] uint mask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, void>)funcTable[254])(func, reference, mask);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, void>)funcTable[254])(func, reference, mask);
			#endif
		}

		[NativeName(NativeNameType.Func, "glStencilFunc")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StencilFunc([NativeName(NativeNameType.Param, "func")] [NativeName(NativeNameType.Type, "GLenum")] uint func, [NativeName(NativeNameType.Param, "ref")] [NativeName(NativeNameType.Type, "GLint")] int reference, [NativeName(NativeNameType.Param, "mask")] [NativeName(NativeNameType.Type, "GLuint")] uint mask)
		{
			StencilFuncNative(func, reference, mask);
		}

		[NativeName(NativeNameType.Func, "glStencilMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void StencilMaskNative([NativeName(NativeNameType.Param, "mask")] [NativeName(NativeNameType.Type, "GLuint")] uint mask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[255])(mask);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[255])(mask);
			#endif
		}

		[NativeName(NativeNameType.Func, "glStencilMask")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StencilMask([NativeName(NativeNameType.Param, "mask")] [NativeName(NativeNameType.Type, "GLuint")] uint mask)
		{
			StencilMaskNative(mask);
		}

		[NativeName(NativeNameType.Func, "glStencilOp")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void StencilOpNative([NativeName(NativeNameType.Param, "fail")] [NativeName(NativeNameType.Type, "GLenum")] uint fail, [NativeName(NativeNameType.Param, "zfail")] [NativeName(NativeNameType.Type, "GLenum")] uint zfail, [NativeName(NativeNameType.Param, "zpass")] [NativeName(NativeNameType.Type, "GLenum")] uint zpass)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[256])(fail, zfail, zpass);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[256])(fail, zfail, zpass);
			#endif
		}

		[NativeName(NativeNameType.Func, "glStencilOp")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void StencilOp([NativeName(NativeNameType.Param, "fail")] [NativeName(NativeNameType.Type, "GLenum")] uint fail, [NativeName(NativeNameType.Param, "zfail")] [NativeName(NativeNameType.Type, "GLenum")] uint zfail, [NativeName(NativeNameType.Param, "zpass")] [NativeName(NativeNameType.Type, "GLenum")] uint zpass)
		{
			StencilOpNative(fail, zfail, zpass);
		}

		[NativeName(NativeNameType.Func, "glTexCoord1d")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord1DNative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLdouble")] double s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, void>)funcTable[257])(s);
			#else
			((delegate* unmanaged[Cdecl]<double, void>)funcTable[257])(s);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord1d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord1D([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLdouble")] double s)
		{
			TexCoord1DNative(s);
		}

		[NativeName(NativeNameType.Func, "glTexCoord1dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord1DvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[258])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[258])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord1dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord1Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			TexCoord1DvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord1dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord1Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] ref double v)
		{
			fixed (double* pv = &v)
			{
				TexCoord1DvNative((double*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord1f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord1FNative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLfloat")] float s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[259])(s);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[259])(s);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord1f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord1F([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLfloat")] float s)
		{
			TexCoord1FNative(s);
		}

		[NativeName(NativeNameType.Func, "glTexCoord1fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord1FvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[260])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[260])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord1fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord1Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			TexCoord1FvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord1fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord1Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float v)
		{
			fixed (float* pv = &v)
			{
				TexCoord1FvNative((float*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord1i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord1INative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLint")] int s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[261])(s);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[261])(s);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord1i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord1I([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLint")] int s)
		{
			TexCoord1INative(s);
		}

		[NativeName(NativeNameType.Func, "glTexCoord1iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord1IvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[262])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[262])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord1iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord1Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			TexCoord1IvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord1iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord1Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] ref int v)
		{
			fixed (int* pv = &v)
			{
				TexCoord1IvNative((int*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord1s")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord1SNative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLshort")] short s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, void>)funcTable[263])(s);
			#else
			((delegate* unmanaged[Cdecl]<short, void>)funcTable[263])(s);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord1s")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord1S([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLshort")] short s)
		{
			TexCoord1SNative(s);
		}

		[NativeName(NativeNameType.Func, "glTexCoord1sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord1SvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[264])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[264])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord1sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord1Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			TexCoord1SvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord1sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord1Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] ref short v)
		{
			fixed (short* pv = &v)
			{
				TexCoord1SvNative((short*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord2d")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord2DNative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLdouble")] double s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLdouble")] double t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[265])(s, t);
			#else
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[265])(s, t);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord2d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord2D([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLdouble")] double s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLdouble")] double t)
		{
			TexCoord2DNative(s, t);
		}

		[NativeName(NativeNameType.Func, "glTexCoord2dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord2DvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[266])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[266])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord2dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord2Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			TexCoord2DvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord2dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord2Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] ref double v)
		{
			fixed (double* pv = &v)
			{
				TexCoord2DvNative((double*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord2f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord2FNative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLfloat")] float s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLfloat")] float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[267])(s, t);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[267])(s, t);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord2f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord2F([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLfloat")] float s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLfloat")] float t)
		{
			TexCoord2FNative(s, t);
		}

		[NativeName(NativeNameType.Func, "glTexCoord2fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord2FvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[268])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[268])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord2fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord2Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			TexCoord2FvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord2fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord2Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float v)
		{
			fixed (float* pv = &v)
			{
				TexCoord2FvNative((float*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord2i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord2INative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLint")] int s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLint")] int t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[269])(s, t);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[269])(s, t);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord2i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord2I([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLint")] int s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLint")] int t)
		{
			TexCoord2INative(s, t);
		}

		[NativeName(NativeNameType.Func, "glTexCoord2iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord2IvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[270])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[270])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord2iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord2Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			TexCoord2IvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord2iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord2Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] ref int v)
		{
			fixed (int* pv = &v)
			{
				TexCoord2IvNative((int*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord2s")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord2SNative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLshort")] short s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLshort")] short t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[271])(s, t);
			#else
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[271])(s, t);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord2s")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord2S([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLshort")] short s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLshort")] short t)
		{
			TexCoord2SNative(s, t);
		}

		[NativeName(NativeNameType.Func, "glTexCoord2sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord2SvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[272])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[272])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord2sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord2Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			TexCoord2SvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord2sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord2Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] ref short v)
		{
			fixed (short* pv = &v)
			{
				TexCoord2SvNative((short*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord3d")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord3DNative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLdouble")] double s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLdouble")] double t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLdouble")] double r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[273])(s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[273])(s, t, r);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord3d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord3D([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLdouble")] double s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLdouble")] double t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLdouble")] double r)
		{
			TexCoord3DNative(s, t, r);
		}

		[NativeName(NativeNameType.Func, "glTexCoord3dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord3DvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[274])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[274])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord3dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord3Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			TexCoord3DvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord3dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord3Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] ref double v)
		{
			fixed (double* pv = &v)
			{
				TexCoord3DvNative((double*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord3FNative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLfloat")] float s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLfloat")] float t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLfloat")] float r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[275])(s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[275])(s, t, r);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord3F([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLfloat")] float s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLfloat")] float t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLfloat")] float r)
		{
			TexCoord3FNative(s, t, r);
		}

		[NativeName(NativeNameType.Func, "glTexCoord3fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord3FvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[276])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[276])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord3fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord3Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			TexCoord3FvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord3fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord3Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float v)
		{
			fixed (float* pv = &v)
			{
				TexCoord3FvNative((float*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord3INative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLint")] int s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLint")] int t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLint")] int r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[277])(s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[277])(s, t, r);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord3I([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLint")] int s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLint")] int t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLint")] int r)
		{
			TexCoord3INative(s, t, r);
		}

		[NativeName(NativeNameType.Func, "glTexCoord3iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord3IvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[278])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[278])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord3iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord3Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			TexCoord3IvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord3iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord3Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] ref int v)
		{
			fixed (int* pv = &v)
			{
				TexCoord3IvNative((int*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord3s")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord3SNative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLshort")] short s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLshort")] short t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLshort")] short r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[279])(s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[279])(s, t, r);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord3s")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord3S([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLshort")] short s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLshort")] short t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLshort")] short r)
		{
			TexCoord3SNative(s, t, r);
		}

		[NativeName(NativeNameType.Func, "glTexCoord3sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord3SvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[280])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[280])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord3sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord3Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			TexCoord3SvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord3sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord3Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] ref short v)
		{
			fixed (short* pv = &v)
			{
				TexCoord3SvNative((short*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord4d")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord4DNative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLdouble")] double s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLdouble")] double t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLdouble")] double r, [NativeName(NativeNameType.Param, "q")] [NativeName(NativeNameType.Type, "GLdouble")] double q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[281])(s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[281])(s, t, r, q);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord4d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord4D([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLdouble")] double s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLdouble")] double t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLdouble")] double r, [NativeName(NativeNameType.Param, "q")] [NativeName(NativeNameType.Type, "GLdouble")] double q)
		{
			TexCoord4DNative(s, t, r, q);
		}

		[NativeName(NativeNameType.Func, "glTexCoord4dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord4DvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[282])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[282])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord4dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord4Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			TexCoord4DvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord4dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord4Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] ref double v)
		{
			fixed (double* pv = &v)
			{
				TexCoord4DvNative((double*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord4f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord4FNative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLfloat")] float s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLfloat")] float t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLfloat")] float r, [NativeName(NativeNameType.Param, "q")] [NativeName(NativeNameType.Type, "GLfloat")] float q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[283])(s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[283])(s, t, r, q);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord4f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord4F([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLfloat")] float s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLfloat")] float t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLfloat")] float r, [NativeName(NativeNameType.Param, "q")] [NativeName(NativeNameType.Type, "GLfloat")] float q)
		{
			TexCoord4FNative(s, t, r, q);
		}

		[NativeName(NativeNameType.Func, "glTexCoord4fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord4FvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[284])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[284])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord4fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord4Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			TexCoord4FvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord4fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord4Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float v)
		{
			fixed (float* pv = &v)
			{
				TexCoord4FvNative((float*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord4i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord4INative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLint")] int s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLint")] int t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLint")] int r, [NativeName(NativeNameType.Param, "q")] [NativeName(NativeNameType.Type, "GLint")] int q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[285])(s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[285])(s, t, r, q);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord4i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord4I([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLint")] int s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLint")] int t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLint")] int r, [NativeName(NativeNameType.Param, "q")] [NativeName(NativeNameType.Type, "GLint")] int q)
		{
			TexCoord4INative(s, t, r, q);
		}

		[NativeName(NativeNameType.Func, "glTexCoord4iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord4IvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[286])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[286])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord4iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord4Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			TexCoord4IvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord4iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord4Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] ref int v)
		{
			fixed (int* pv = &v)
			{
				TexCoord4IvNative((int*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoord4s")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord4SNative([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLshort")] short s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLshort")] short t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLshort")] short r, [NativeName(NativeNameType.Param, "q")] [NativeName(NativeNameType.Type, "GLshort")] short q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[287])(s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[287])(s, t, r, q);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord4s")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord4S([NativeName(NativeNameType.Param, "s")] [NativeName(NativeNameType.Type, "GLshort")] short s, [NativeName(NativeNameType.Param, "t")] [NativeName(NativeNameType.Type, "GLshort")] short t, [NativeName(NativeNameType.Param, "r")] [NativeName(NativeNameType.Type, "GLshort")] short r, [NativeName(NativeNameType.Param, "q")] [NativeName(NativeNameType.Type, "GLshort")] short q)
		{
			TexCoord4SNative(s, t, r, q);
		}

		[NativeName(NativeNameType.Func, "glTexCoord4sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord4SvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[288])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[288])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoord4sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord4Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			TexCoord4SvNative(v);
		}

		[NativeName(NativeNameType.Func, "glTexCoord4sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoord4Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] ref short v)
		{
			fixed (short* pv = &v)
			{
				TexCoord4SvNative((short*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glTexCoordPointer")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoordPointerNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "GLint")] int size, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "GLenum")] uint type, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "GLsizei")] int stride, [NativeName(NativeNameType.Param, "pointer")] [NativeName(NativeNameType.Type, "const GLvoid*")] void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)funcTable[289])(size, type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, uint, int, nint, void>)funcTable[289])(size, type, stride, (nint)pointer);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexCoordPointer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexCoordPointer([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "GLint")] int size, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "GLenum")] uint type, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "GLsizei")] int stride, [NativeName(NativeNameType.Param, "pointer")] [NativeName(NativeNameType.Type, "const GLvoid*")] void* pointer)
		{
			TexCoordPointerNative(size, type, stride, pointer);
		}

		[NativeName(NativeNameType.Func, "glTexEnvf")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexEnvfNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "GLfloat")] float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[290])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[290])(target, pname, param);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexEnvf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexEnvf([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "GLfloat")] float param)
		{
			TexEnvfNative(target, pname, param);
		}

		[NativeName(NativeNameType.Func, "glTexEnvfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexEnvfvNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[291])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[291])(target, pname, (nint)@params);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexEnvfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexEnvfv([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* @params)
		{
			TexEnvfvNative(target, pname, @params);
		}

		[NativeName(NativeNameType.Func, "glTexEnvfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexEnvfv([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				TexEnvfvNative(target, pname, (float*)pparams);
			}
		}

		[NativeName(NativeNameType.Func, "glTexEnvi")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexEnviNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "GLint")] int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[292])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[292])(target, pname, param);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexEnvi")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexEnvi([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "GLint")] int param)
		{
			TexEnviNative(target, pname, param);
		}

		[NativeName(NativeNameType.Func, "glTexEnviv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexEnvivNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLint*")] int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[293])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[293])(target, pname, (nint)@params);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexEnviv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexEnviv([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLint*")] int* @params)
		{
			TexEnvivNative(target, pname, @params);
		}

		[NativeName(NativeNameType.Func, "glTexEnviv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexEnviv([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLint*")] ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				TexEnvivNative(target, pname, (int*)pparams);
			}
		}

		[NativeName(NativeNameType.Func, "glTexGend")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexGendNative([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "GLdouble")] double param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, double, void>)funcTable[294])(coord, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, double, void>)funcTable[294])(coord, pname, param);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexGend")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexGend([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "GLdouble")] double param)
		{
			TexGendNative(coord, pname, param);
		}

		[NativeName(NativeNameType.Func, "glTexGendv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexGendvNative([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, double*, void>)funcTable[295])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[295])(coord, pname, (nint)@params);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexGendv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexGendv([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* @params)
		{
			TexGendvNative(coord, pname, @params);
		}

		[NativeName(NativeNameType.Func, "glTexGendv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexGendv([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLdouble*")] ref double @params)
		{
			fixed (double* pparams = &@params)
			{
				TexGendvNative(coord, pname, (double*)pparams);
			}
		}

		[NativeName(NativeNameType.Func, "glTexGenf")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexGenfNative([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "GLfloat")] float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[296])(coord, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[296])(coord, pname, param);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexGenf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexGenf([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "GLfloat")] float param)
		{
			TexGenfNative(coord, pname, param);
		}

		[NativeName(NativeNameType.Func, "glTexGenfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexGenfvNative([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[297])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[297])(coord, pname, (nint)@params);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexGenfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexGenfv([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* @params)
		{
			TexGenfvNative(coord, pname, @params);
		}

		[NativeName(NativeNameType.Func, "glTexGenfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexGenfv([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				TexGenfvNative(coord, pname, (float*)pparams);
			}
		}

		[NativeName(NativeNameType.Func, "glTexGeni")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexGeniNative([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "GLint")] int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[298])(coord, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[298])(coord, pname, param);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexGeni")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexGeni([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "GLint")] int param)
		{
			TexGeniNative(coord, pname, param);
		}

		[NativeName(NativeNameType.Func, "glTexGeniv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexGenivNative([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLint*")] int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[299])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[299])(coord, pname, (nint)@params);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexGeniv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexGeniv([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLint*")] int* @params)
		{
			TexGenivNative(coord, pname, @params);
		}

		[NativeName(NativeNameType.Func, "glTexGeniv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexGeniv([NativeName(NativeNameType.Param, "coord")] [NativeName(NativeNameType.Type, "GLenum")] uint coord, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLint*")] ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				TexGenivNative(coord, pname, (int*)pparams);
			}
		}

		[NativeName(NativeNameType.Func, "glTexImage1D")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexImage1DNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "level")] [NativeName(NativeNameType.Type, "GLint")] int level, [NativeName(NativeNameType.Param, "internalformat")] [NativeName(NativeNameType.Type, "GLint")] int internalformat, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLsizei")] int width, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "GLint")] int border, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "GLenum")] uint format, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "GLenum")] uint type, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const GLvoid*")] void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, uint, uint, void*, void>)funcTable[300])(target, level, internalformat, width, border, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, uint, uint, nint, void>)funcTable[300])(target, level, internalformat, width, border, format, type, (nint)pixels);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexImage1D")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexImage1D([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "level")] [NativeName(NativeNameType.Type, "GLint")] int level, [NativeName(NativeNameType.Param, "internalformat")] [NativeName(NativeNameType.Type, "GLint")] int internalformat, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLsizei")] int width, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "GLint")] int border, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "GLenum")] uint format, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "GLenum")] uint type, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const GLvoid*")] void* pixels)
		{
			TexImage1DNative(target, level, internalformat, width, border, format, type, pixels);
		}

		[NativeName(NativeNameType.Func, "glTexImage2D")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexImage2DNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "level")] [NativeName(NativeNameType.Type, "GLint")] int level, [NativeName(NativeNameType.Param, "internalformat")] [NativeName(NativeNameType.Type, "GLint")] int internalformat, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLsizei")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "GLsizei")] int height, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "GLint")] int border, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "GLenum")] uint format, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "GLenum")] uint type, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const GLvoid*")] void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, uint, void*, void>)funcTable[301])(target, level, internalformat, width, height, border, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, uint, nint, void>)funcTable[301])(target, level, internalformat, width, height, border, format, type, (nint)pixels);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexImage2D")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexImage2D([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "level")] [NativeName(NativeNameType.Type, "GLint")] int level, [NativeName(NativeNameType.Param, "internalformat")] [NativeName(NativeNameType.Type, "GLint")] int internalformat, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLsizei")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "GLsizei")] int height, [NativeName(NativeNameType.Param, "border")] [NativeName(NativeNameType.Type, "GLint")] int border, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "GLenum")] uint format, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "GLenum")] uint type, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const GLvoid*")] void* pixels)
		{
			TexImage2DNative(target, level, internalformat, width, height, border, format, type, pixels);
		}

		[NativeName(NativeNameType.Func, "glTexParameterf")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexParameterfNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "GLfloat")] float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[302])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, float, void>)funcTable[302])(target, pname, param);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexParameterf")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexParameterf([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "GLfloat")] float param)
		{
			TexParameterfNative(target, pname, param);
		}

		[NativeName(NativeNameType.Func, "glTexParameterfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexParameterfvNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float*, void>)funcTable[303])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[303])(target, pname, (nint)@params);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexParameterfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexParameterfv([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* @params)
		{
			TexParameterfvNative(target, pname, @params);
		}

		[NativeName(NativeNameType.Func, "glTexParameterfv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexParameterfv([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float @params)
		{
			fixed (float* pparams = &@params)
			{
				TexParameterfvNative(target, pname, (float*)pparams);
			}
		}

		[NativeName(NativeNameType.Func, "glTexParameteri")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexParameteriNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "GLint")] int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[304])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, void>)funcTable[304])(target, pname, param);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexParameteri")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexParameteri([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "param")] [NativeName(NativeNameType.Type, "GLint")] int param)
		{
			TexParameteriNative(target, pname, param);
		}

		[NativeName(NativeNameType.Func, "glTexParameteriv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexParameterivNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLint*")] int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int*, void>)funcTable[305])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[305])(target, pname, (nint)@params);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexParameteriv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexParameteriv([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLint*")] int* @params)
		{
			TexParameterivNative(target, pname, @params);
		}

		[NativeName(NativeNameType.Func, "glTexParameteriv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexParameteriv([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "pname")] [NativeName(NativeNameType.Type, "GLenum")] uint pname, [NativeName(NativeNameType.Param, "params")] [NativeName(NativeNameType.Type, "const GLint*")] ref int @params)
		{
			fixed (int* pparams = &@params)
			{
				TexParameterivNative(target, pname, (int*)pparams);
			}
		}

		[NativeName(NativeNameType.Func, "glTexSubImage1D")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexSubImage1DNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "level")] [NativeName(NativeNameType.Type, "GLint")] int level, [NativeName(NativeNameType.Param, "xoffset")] [NativeName(NativeNameType.Type, "GLint")] int xoffset, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLsizei")] int width, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "GLenum")] uint format, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "GLenum")] uint type, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const GLvoid*")] void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, uint, void*, void>)funcTable[306])(target, level, xoffset, width, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, uint, uint, nint, void>)funcTable[306])(target, level, xoffset, width, format, type, (nint)pixels);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexSubImage1D")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexSubImage1D([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "level")] [NativeName(NativeNameType.Type, "GLint")] int level, [NativeName(NativeNameType.Param, "xoffset")] [NativeName(NativeNameType.Type, "GLint")] int xoffset, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLsizei")] int width, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "GLenum")] uint format, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "GLenum")] uint type, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const GLvoid*")] void* pixels)
		{
			TexSubImage1DNative(target, level, xoffset, width, format, type, pixels);
		}

		[NativeName(NativeNameType.Func, "glTexSubImage2D")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexSubImage2DNative([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "level")] [NativeName(NativeNameType.Type, "GLint")] int level, [NativeName(NativeNameType.Param, "xoffset")] [NativeName(NativeNameType.Type, "GLint")] int xoffset, [NativeName(NativeNameType.Param, "yoffset")] [NativeName(NativeNameType.Type, "GLint")] int yoffset, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLsizei")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "GLsizei")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "GLenum")] uint format, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "GLenum")] uint type, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const GLvoid*")] void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, uint, void*, void>)funcTable[307])(target, level, xoffset, yoffset, width, height, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, uint, uint, nint, void>)funcTable[307])(target, level, xoffset, yoffset, width, height, format, type, (nint)pixels);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTexSubImage2D")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void TexSubImage2D([NativeName(NativeNameType.Param, "target")] [NativeName(NativeNameType.Type, "GLenum")] uint target, [NativeName(NativeNameType.Param, "level")] [NativeName(NativeNameType.Type, "GLint")] int level, [NativeName(NativeNameType.Param, "xoffset")] [NativeName(NativeNameType.Type, "GLint")] int xoffset, [NativeName(NativeNameType.Param, "yoffset")] [NativeName(NativeNameType.Type, "GLint")] int yoffset, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLsizei")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "GLsizei")] int height, [NativeName(NativeNameType.Param, "format")] [NativeName(NativeNameType.Type, "GLenum")] uint format, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "GLenum")] uint type, [NativeName(NativeNameType.Param, "pixels")] [NativeName(NativeNameType.Type, "const GLvoid*")] void* pixels)
		{
			TexSubImage2DNative(target, level, xoffset, yoffset, width, height, format, type, pixels);
		}

		[NativeName(NativeNameType.Func, "glTranslated")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TranslatedNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLdouble")] double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[308])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[308])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTranslated")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Translated([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLdouble")] double z)
		{
			TranslatedNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "glTranslatef")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TranslatefNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLfloat")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[309])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[309])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "glTranslatef")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Translatef([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLfloat")] float z)
		{
			TranslatefNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "glVertex2d")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex2DNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[310])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[310])(x, y);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex2d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex2D([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y)
		{
			Vertex2DNative(x, y);
		}

		[NativeName(NativeNameType.Func, "glVertex2dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex2DvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[311])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[311])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex2dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex2Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			Vertex2DvNative(v);
		}

		[NativeName(NativeNameType.Func, "glVertex2dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex2Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] ref double v)
		{
			fixed (double* pv = &v)
			{
				Vertex2DvNative((double*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glVertex2f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex2FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[312])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[312])(x, y);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex2f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex2F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y)
		{
			Vertex2FNative(x, y);
		}

		[NativeName(NativeNameType.Func, "glVertex2fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex2FvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[313])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[313])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex2fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex2Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			Vertex2FvNative(v);
		}

		[NativeName(NativeNameType.Func, "glVertex2fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex2Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float v)
		{
			fixed (float* pv = &v)
			{
				Vertex2FvNative((float*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glVertex2i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex2INative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[314])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[314])(x, y);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex2i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex2I([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y)
		{
			Vertex2INative(x, y);
		}

		[NativeName(NativeNameType.Func, "glVertex2iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex2IvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[315])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[315])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex2iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex2Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			Vertex2IvNative(v);
		}

		[NativeName(NativeNameType.Func, "glVertex2iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex2Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] ref int v)
		{
			fixed (int* pv = &v)
			{
				Vertex2IvNative((int*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glVertex2s")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex2SNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLshort")] short x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLshort")] short y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[316])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[316])(x, y);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex2s")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex2S([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLshort")] short x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLshort")] short y)
		{
			Vertex2SNative(x, y);
		}

		[NativeName(NativeNameType.Func, "glVertex2sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex2SvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[317])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[317])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex2sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex2Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			Vertex2SvNative(v);
		}

		[NativeName(NativeNameType.Func, "glVertex2sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex2Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] ref short v)
		{
			fixed (short* pv = &v)
			{
				Vertex2SvNative((short*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glVertex3d")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex3DNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLdouble")] double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[318])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[318])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex3d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex3D([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLdouble")] double z)
		{
			Vertex3DNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "glVertex3dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex3DvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[319])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[319])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex3dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex3Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			Vertex3DvNative(v);
		}

		[NativeName(NativeNameType.Func, "glVertex3dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex3Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] ref double v)
		{
			fixed (double* pv = &v)
			{
				Vertex3DvNative((double*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glVertex3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex3FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLfloat")] float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[320])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[320])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex3f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex3F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLfloat")] float z)
		{
			Vertex3FNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "glVertex3fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex3FvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[321])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[321])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex3fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex3Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			Vertex3FvNative(v);
		}

		[NativeName(NativeNameType.Func, "glVertex3fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex3Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float v)
		{
			fixed (float* pv = &v)
			{
				Vertex3FvNative((float*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glVertex3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex3INative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLint")] int z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[322])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[322])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex3i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex3I([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLint")] int z)
		{
			Vertex3INative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "glVertex3iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex3IvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[323])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[323])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex3iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex3Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			Vertex3IvNative(v);
		}

		[NativeName(NativeNameType.Func, "glVertex3iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex3Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] ref int v)
		{
			fixed (int* pv = &v)
			{
				Vertex3IvNative((int*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glVertex3s")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex3SNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLshort")] short x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLshort")] short y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLshort")] short z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[324])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[324])(x, y, z);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex3s")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex3S([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLshort")] short x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLshort")] short y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLshort")] short z)
		{
			Vertex3SNative(x, y, z);
		}

		[NativeName(NativeNameType.Func, "glVertex3sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex3SvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[325])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[325])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex3sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex3Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			Vertex3SvNative(v);
		}

		[NativeName(NativeNameType.Func, "glVertex3sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex3Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] ref short v)
		{
			fixed (short* pv = &v)
			{
				Vertex3SvNative((short*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glVertex4d")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex4DNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLdouble")] double z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLdouble")] double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[326])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[326])(x, y, z, w);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex4d")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex4D([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLdouble")] double z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLdouble")] double w)
		{
			Vertex4DNative(x, y, z, w);
		}

		[NativeName(NativeNameType.Func, "glVertex4dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex4DvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[327])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[327])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex4dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex4Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] double* v)
		{
			Vertex4DvNative(v);
		}

		[NativeName(NativeNameType.Func, "glVertex4dv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex4Dv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLdouble*")] ref double v)
		{
			fixed (double* pv = &v)
			{
				Vertex4DvNative((double*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glVertex4f")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex4FNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLfloat")] float z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLfloat")] float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[328])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[328])(x, y, z, w);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex4f")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex4F([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLfloat")] float x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLfloat")] float y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLfloat")] float z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLfloat")] float w)
		{
			Vertex4FNative(x, y, z, w);
		}

		[NativeName(NativeNameType.Func, "glVertex4fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex4FvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[329])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[329])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex4fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex4Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] float* v)
		{
			Vertex4FvNative(v);
		}

		[NativeName(NativeNameType.Func, "glVertex4fv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex4Fv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLfloat*")] ref float v)
		{
			fixed (float* pv = &v)
			{
				Vertex4FvNative((float*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glVertex4i")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex4INative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLint")] int z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLint")] int w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[330])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[330])(x, y, z, w);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex4i")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex4I([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLint")] int z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLint")] int w)
		{
			Vertex4INative(x, y, z, w);
		}

		[NativeName(NativeNameType.Func, "glVertex4iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex4IvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[331])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[331])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex4iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex4Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] int* v)
		{
			Vertex4IvNative(v);
		}

		[NativeName(NativeNameType.Func, "glVertex4iv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex4Iv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLint*")] ref int v)
		{
			fixed (int* pv = &v)
			{
				Vertex4IvNative((int*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glVertex4s")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex4SNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLshort")] short x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLshort")] short y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLshort")] short z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLshort")] short w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[332])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[332])(x, y, z, w);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex4s")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex4S([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLshort")] short x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLshort")] short y, [NativeName(NativeNameType.Param, "z")] [NativeName(NativeNameType.Type, "GLshort")] short z, [NativeName(NativeNameType.Param, "w")] [NativeName(NativeNameType.Type, "GLshort")] short w)
		{
			Vertex4SNative(x, y, z, w);
		}

		[NativeName(NativeNameType.Func, "glVertex4sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex4SvNative([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[333])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[333])((nint)v);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertex4sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex4Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] short* v)
		{
			Vertex4SvNative(v);
		}

		[NativeName(NativeNameType.Func, "glVertex4sv")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Vertex4Sv([NativeName(NativeNameType.Param, "v")] [NativeName(NativeNameType.Type, "const GLshort*")] ref short v)
		{
			fixed (short* pv = &v)
			{
				Vertex4SvNative((short*)pv);
			}
		}

		[NativeName(NativeNameType.Func, "glVertexPointer")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexPointerNative([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "GLint")] int size, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "GLenum")] uint type, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "GLsizei")] int stride, [NativeName(NativeNameType.Param, "pointer")] [NativeName(NativeNameType.Type, "const GLvoid*")] void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint, int, void*, void>)funcTable[334])(size, type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, uint, int, nint, void>)funcTable[334])(size, type, stride, (nint)pointer);
			#endif
		}

		[NativeName(NativeNameType.Func, "glVertexPointer")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void VertexPointer([NativeName(NativeNameType.Param, "size")] [NativeName(NativeNameType.Type, "GLint")] int size, [NativeName(NativeNameType.Param, "type")] [NativeName(NativeNameType.Type, "GLenum")] uint type, [NativeName(NativeNameType.Param, "stride")] [NativeName(NativeNameType.Type, "GLsizei")] int stride, [NativeName(NativeNameType.Param, "pointer")] [NativeName(NativeNameType.Type, "const GLvoid*")] void* pointer)
		{
			VertexPointerNative(size, type, stride, pointer);
		}

		[NativeName(NativeNameType.Func, "glViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ViewportNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLsizei")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "GLsizei")] int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[335])(x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[335])(x, y, width, height);
			#endif
		}

		[NativeName(NativeNameType.Func, "glViewport")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void Viewport([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLint")] int x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLint")] int y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLsizei")] int width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "GLsizei")] int height)
		{
			ViewportNative(x, y, width, height);
		}

		[NativeName(NativeNameType.Func, "gluErrorString")]
		[return: NativeName(NativeNameType.Type, "const GLubyte*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* uErrorStringNative([NativeName(NativeNameType.Param, "errCode")] [NativeName(NativeNameType.Type, "GLenum")] uint errCode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte*>)funcTable[336])(errCode);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<uint, nint>)funcTable[336])(errCode);
			#endif
		}

		[NativeName(NativeNameType.Func, "gluErrorString")]
		[return: NativeName(NativeNameType.Type, "const GLubyte*")]
		public static byte* uErrorString([NativeName(NativeNameType.Param, "errCode")] [NativeName(NativeNameType.Type, "GLenum")] uint errCode)
		{
			byte* ret = uErrorStringNative(errCode);
			return ret;
		}

		[NativeName(NativeNameType.Func, "gluErrorUnicodeStringEXT")]
		[return: NativeName(NativeNameType.Type, "const wchar*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static char* uErrorUnicodeStringEXTNative([NativeName(NativeNameType.Param, "errCode")] [NativeName(NativeNameType.Type, "GLenum")] uint errCode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, char*>)funcTable[337])(errCode);
			#else
			return (char*)((delegate* unmanaged[Cdecl]<uint, nint>)funcTable[337])(errCode);
			#endif
		}

		[NativeName(NativeNameType.Func, "gluErrorUnicodeStringEXT")]
		[return: NativeName(NativeNameType.Type, "const wchar*")]
		public static char* uErrorUnicodeStringEXT([NativeName(NativeNameType.Param, "errCode")] [NativeName(NativeNameType.Type, "GLenum")] uint errCode)
		{
			char* ret = uErrorUnicodeStringEXTNative(errCode);
			return ret;
		}

		[NativeName(NativeNameType.Func, "gluErrorUnicodeStringEXT")]
		[return: NativeName(NativeNameType.Type, "const wchar*")]
		public static string uErrorUnicodeStringEXTS([NativeName(NativeNameType.Param, "errCode")] [NativeName(NativeNameType.Type, "GLenum")] uint errCode)
		{
			string ret = Utils.DecodeStringUTF16(uErrorUnicodeStringEXTNative(errCode));
			return ret;
		}

		[NativeName(NativeNameType.Func, "gluGetString")]
		[return: NativeName(NativeNameType.Type, "const GLubyte*")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte* uGetStringNative([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "GLenum")] uint name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte*>)funcTable[338])(name);
			#else
			return (byte*)((delegate* unmanaged[Cdecl]<uint, nint>)funcTable[338])(name);
			#endif
		}

		[NativeName(NativeNameType.Func, "gluGetString")]
		[return: NativeName(NativeNameType.Type, "const GLubyte*")]
		public static byte* uGetString([NativeName(NativeNameType.Param, "name")] [NativeName(NativeNameType.Type, "GLenum")] uint name)
		{
			byte* ret = uGetStringNative(name);
			return ret;
		}

		[NativeName(NativeNameType.Func, "gluOrtho2D")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void uOrtho2DNative([NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "GLdouble")] double left, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "GLdouble")] double right, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "GLdouble")] double bottom, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "GLdouble")] double top)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[339])(left, right, bottom, top);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[339])(left, right, bottom, top);
			#endif
		}

		[NativeName(NativeNameType.Func, "gluOrtho2D")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void uOrtho2D([NativeName(NativeNameType.Param, "left")] [NativeName(NativeNameType.Type, "GLdouble")] double left, [NativeName(NativeNameType.Param, "right")] [NativeName(NativeNameType.Type, "GLdouble")] double right, [NativeName(NativeNameType.Param, "bottom")] [NativeName(NativeNameType.Type, "GLdouble")] double bottom, [NativeName(NativeNameType.Param, "top")] [NativeName(NativeNameType.Type, "GLdouble")] double top)
		{
			uOrtho2DNative(left, right, bottom, top);
		}

		[NativeName(NativeNameType.Func, "gluPerspective")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void uPerspectiveNative([NativeName(NativeNameType.Param, "fovy")] [NativeName(NativeNameType.Type, "GLdouble")] double fovy, [NativeName(NativeNameType.Param, "aspect")] [NativeName(NativeNameType.Type, "GLdouble")] double aspect, [NativeName(NativeNameType.Param, "zNear")] [NativeName(NativeNameType.Type, "GLdouble")] double zNear, [NativeName(NativeNameType.Param, "zFar")] [NativeName(NativeNameType.Type, "GLdouble")] double zFar)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[340])(fovy, aspect, zNear, zFar);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[340])(fovy, aspect, zNear, zFar);
			#endif
		}

		[NativeName(NativeNameType.Func, "gluPerspective")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void uPerspective([NativeName(NativeNameType.Param, "fovy")] [NativeName(NativeNameType.Type, "GLdouble")] double fovy, [NativeName(NativeNameType.Param, "aspect")] [NativeName(NativeNameType.Type, "GLdouble")] double aspect, [NativeName(NativeNameType.Param, "zNear")] [NativeName(NativeNameType.Type, "GLdouble")] double zNear, [NativeName(NativeNameType.Param, "zFar")] [NativeName(NativeNameType.Type, "GLdouble")] double zFar)
		{
			uPerspectiveNative(fovy, aspect, zNear, zFar);
		}

		[NativeName(NativeNameType.Func, "gluPickMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void uPickMatrixNative([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLdouble")] double width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "GLdouble")] double height, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "GLint[4]")] int* viewport)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, int*, void>)funcTable[341])(x, y, width, height, viewport);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, nint, void>)funcTable[341])(x, y, width, height, (nint)viewport);
			#endif
		}

		[NativeName(NativeNameType.Func, "gluPickMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void uPickMatrix([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLdouble")] double width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "GLdouble")] double height, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "GLint[4]")] int* viewport)
		{
			uPickMatrixNative(x, y, width, height, viewport);
		}

		[NativeName(NativeNameType.Func, "gluPickMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void uPickMatrix([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLdouble")] double width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "GLdouble")] double height, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "GLint[4]")] ref int viewport)
		{
			fixed (int* pviewport = &viewport)
			{
				uPickMatrixNative(x, y, width, height, (int*)pviewport);
			}
		}

		[NativeName(NativeNameType.Func, "gluPickMatrix")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void uPickMatrix([NativeName(NativeNameType.Param, "x")] [NativeName(NativeNameType.Type, "GLdouble")] double x, [NativeName(NativeNameType.Param, "y")] [NativeName(NativeNameType.Type, "GLdouble")] double y, [NativeName(NativeNameType.Param, "width")] [NativeName(NativeNameType.Type, "GLdouble")] double width, [NativeName(NativeNameType.Param, "height")] [NativeName(NativeNameType.Type, "GLdouble")] double height, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "GLint[4]")] ReadOnlySpan<int> viewport)
		{
			fixed (int* pviewport = viewport)
			{
				uPickMatrixNative(x, y, width, height, (int*)pviewport);
			}
		}

		[NativeName(NativeNameType.Func, "gluLookAt")]
		[return: NativeName(NativeNameType.Type, "void")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void uLookAtNative([NativeName(NativeNameType.Param, "eyex")] [NativeName(NativeNameType.Type, "GLdouble")] double eyex, [NativeName(NativeNameType.Param, "eyey")] [NativeName(NativeNameType.Type, "GLdouble")] double eyey, [NativeName(NativeNameType.Param, "eyez")] [NativeName(NativeNameType.Type, "GLdouble")] double eyez, [NativeName(NativeNameType.Param, "centerx")] [NativeName(NativeNameType.Type, "GLdouble")] double centerx, [NativeName(NativeNameType.Param, "centery")] [NativeName(NativeNameType.Type, "GLdouble")] double centery, [NativeName(NativeNameType.Param, "centerz")] [NativeName(NativeNameType.Type, "GLdouble")] double centerz, [NativeName(NativeNameType.Param, "upx")] [NativeName(NativeNameType.Type, "GLdouble")] double upx, [NativeName(NativeNameType.Param, "upy")] [NativeName(NativeNameType.Type, "GLdouble")] double upy, [NativeName(NativeNameType.Param, "upz")] [NativeName(NativeNameType.Type, "GLdouble")] double upz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, double, double, double, void>)funcTable[342])(eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, double, double, double, void>)funcTable[342])(eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz);
			#endif
		}

		[NativeName(NativeNameType.Func, "gluLookAt")]
		[return: NativeName(NativeNameType.Type, "void")]
		public static void uLookAt([NativeName(NativeNameType.Param, "eyex")] [NativeName(NativeNameType.Type, "GLdouble")] double eyex, [NativeName(NativeNameType.Param, "eyey")] [NativeName(NativeNameType.Type, "GLdouble")] double eyey, [NativeName(NativeNameType.Param, "eyez")] [NativeName(NativeNameType.Type, "GLdouble")] double eyez, [NativeName(NativeNameType.Param, "centerx")] [NativeName(NativeNameType.Type, "GLdouble")] double centerx, [NativeName(NativeNameType.Param, "centery")] [NativeName(NativeNameType.Type, "GLdouble")] double centery, [NativeName(NativeNameType.Param, "centerz")] [NativeName(NativeNameType.Type, "GLdouble")] double centerz, [NativeName(NativeNameType.Param, "upx")] [NativeName(NativeNameType.Type, "GLdouble")] double upx, [NativeName(NativeNameType.Param, "upy")] [NativeName(NativeNameType.Type, "GLdouble")] double upy, [NativeName(NativeNameType.Param, "upz")] [NativeName(NativeNameType.Type, "GLdouble")] double upz)
		{
			uLookAtNative(eyex, eyey, eyez, centerx, centery, centerz, upx, upy, upz);
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int uProjectNative([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<double, double, double, double*, double*, int*, double*, double*, double*, int>)funcTable[343])(objx, objy, objz, modelMatrix, projMatrix, viewport, winx, winy, winz);
			#else
			return (int)((delegate* unmanaged[Cdecl]<double, double, double, nint, nint, nint, nint, nint, nint, int>)funcTable[343])(objx, objy, objz, (nint)modelMatrix, (nint)projMatrix, (nint)viewport, (nint)winx, (nint)winy, (nint)winz);
			#endif
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, viewport, winx, winy, winz);
			return ret;
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, winx, winy, winz);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, winx, winy, winz);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, winx, winy, winz);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, winx, winy, winz);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, winx, winy, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, winx, winy, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (int* pviewport = &viewport)
			{
				int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, winx, winy, winz);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (int* pviewport = viewport)
			{
				int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, winx, winy, winz);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (int* pviewport = &viewport)
				{
					int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, (int*)pviewport, winx, winy, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (int* pviewport = viewport)
				{
					int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, (int*)pviewport, winx, winy, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				fixed (int* pviewport = &viewport)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, winy, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				fixed (int* pviewport = viewport)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, winy, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					fixed (int* pviewport = &viewport)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, winy, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					fixed (int* pviewport = viewport)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, winy, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pwinx = &winx)
			{
				int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, viewport, (double*)pwinx, winy, winz);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, (double*)pwinx, winy, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, (double*)pwinx, winy, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, winy, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, winy, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					fixed (double* pwinx = &winx)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, winy, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					fixed (double* pwinx = &winx)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, winy, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (int* pviewport = &viewport)
			{
				fixed (double* pwinx = &winx)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, (double*)pwinx, winy, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (int* pviewport = viewport)
			{
				fixed (double* pwinx = &winx)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, (double*)pwinx, winy, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (int* pviewport = &viewport)
				{
					fixed (double* pwinx = &winx)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, (int*)pviewport, (double*)pwinx, winy, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (int* pviewport = viewport)
				{
					fixed (double* pwinx = &winx)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, (int*)pviewport, (double*)pwinx, winy, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				fixed (int* pviewport = &viewport)
				{
					fixed (double* pwinx = &winx)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, (int*)pviewport, (double*)pwinx, winy, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				fixed (int* pviewport = viewport)
				{
					fixed (double* pwinx = &winx)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, (int*)pviewport, (double*)pwinx, winy, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					fixed (int* pviewport = &viewport)
					{
						fixed (double* pwinx = &winx)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, (int*)pviewport, (double*)pwinx, winy, winz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					fixed (int* pviewport = viewport)
					{
						fixed (double* pwinx = &winx)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, (int*)pviewport, (double*)pwinx, winy, winz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pwiny = &winy)
			{
				int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, viewport, winx, (double*)pwiny, winz);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pwiny = &winy)
				{
					int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, winx, (double*)pwiny, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pwiny = &winy)
				{
					int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, winx, (double*)pwiny, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				fixed (double* pwiny = &winy)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, winx, (double*)pwiny, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				fixed (double* pwiny = &winy)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, winx, (double*)pwiny, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					fixed (double* pwiny = &winy)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, winx, (double*)pwiny, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					fixed (double* pwiny = &winy)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, winx, (double*)pwiny, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (int* pviewport = &viewport)
			{
				fixed (double* pwiny = &winy)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, winx, (double*)pwiny, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (int* pviewport = viewport)
			{
				fixed (double* pwiny = &winy)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, winx, (double*)pwiny, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (int* pviewport = &viewport)
				{
					fixed (double* pwiny = &winy)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, (int*)pviewport, winx, (double*)pwiny, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (int* pviewport = viewport)
				{
					fixed (double* pwiny = &winy)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, (int*)pviewport, winx, (double*)pwiny, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				fixed (int* pviewport = &viewport)
				{
					fixed (double* pwiny = &winy)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, (double*)pwiny, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				fixed (int* pviewport = viewport)
				{
					fixed (double* pwiny = &winy)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, (double*)pwiny, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					fixed (int* pviewport = &viewport)
					{
						fixed (double* pwiny = &winy)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, (double*)pwiny, winz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					fixed (int* pviewport = viewport)
					{
						fixed (double* pwiny = &winy)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, (double*)pwiny, winz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pwinx = &winx)
			{
				fixed (double* pwiny = &winy)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, viewport, (double*)pwinx, (double*)pwiny, winz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwiny = &winy)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, (double*)pwinx, (double*)pwiny, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwiny = &winy)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, (double*)pwinx, (double*)pwiny, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwiny = &winy)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, (double*)pwiny, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwiny = &winy)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, (double*)pwiny, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					fixed (double* pwinx = &winx)
					{
						fixed (double* pwiny = &winy)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, (double*)pwiny, winz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					fixed (double* pwinx = &winx)
					{
						fixed (double* pwiny = &winy)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, (double*)pwiny, winz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (int* pviewport = &viewport)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwiny = &winy)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, (double*)pwinx, (double*)pwiny, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (int* pviewport = viewport)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwiny = &winy)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, (double*)pwinx, (double*)pwiny, winz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (int* pviewport = &viewport)
				{
					fixed (double* pwinx = &winx)
					{
						fixed (double* pwiny = &winy)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, (int*)pviewport, (double*)pwinx, (double*)pwiny, winz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (int* pviewport = viewport)
				{
					fixed (double* pwinx = &winx)
					{
						fixed (double* pwiny = &winy)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, (int*)pviewport, (double*)pwinx, (double*)pwiny, winz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				fixed (int* pviewport = &viewport)
				{
					fixed (double* pwinx = &winx)
					{
						fixed (double* pwiny = &winy)
						{
							int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, (int*)pviewport, (double*)pwinx, (double*)pwiny, winz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				fixed (int* pviewport = viewport)
				{
					fixed (double* pwinx = &winx)
					{
						fixed (double* pwiny = &winy)
						{
							int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, (int*)pviewport, (double*)pwinx, (double*)pwiny, winz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					fixed (int* pviewport = &viewport)
					{
						fixed (double* pwinx = &winx)
						{
							fixed (double* pwiny = &winy)
							{
								int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, (int*)pviewport, (double*)pwinx, (double*)pwiny, winz);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					fixed (int* pviewport = viewport)
					{
						fixed (double* pwinx = &winx)
						{
							fixed (double* pwiny = &winy)
							{
								int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, (int*)pviewport, (double*)pwinx, (double*)pwiny, winz);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pwinz = &winz)
			{
				int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, viewport, winx, winy, (double*)pwinz);
				return ret;
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pwinz = &winz)
				{
					int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, winx, winy, (double*)pwinz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pwinz = &winz)
				{
					int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, winx, winy, (double*)pwinz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				fixed (double* pwinz = &winz)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, winx, winy, (double*)pwinz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				fixed (double* pwinz = &winz)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, winx, winy, (double*)pwinz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, winx, winy, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, winx, winy, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (int* pviewport = &viewport)
			{
				fixed (double* pwinz = &winz)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, winx, winy, (double*)pwinz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (int* pviewport = viewport)
			{
				fixed (double* pwinz = &winz)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, winx, winy, (double*)pwinz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (int* pviewport = &viewport)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, (int*)pviewport, winx, winy, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (int* pviewport = viewport)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, (int*)pviewport, winx, winy, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				fixed (int* pviewport = &viewport)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, winy, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				fixed (int* pviewport = viewport)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, winy, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					fixed (int* pviewport = &viewport)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, winy, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					fixed (int* pviewport = viewport)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, winy, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pwinx = &winx)
			{
				fixed (double* pwinz = &winz)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, viewport, (double*)pwinx, winy, (double*)pwinz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, (double*)pwinx, winy, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, (double*)pwinx, winy, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, winy, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, winy, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					fixed (double* pwinx = &winx)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, winy, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					fixed (double* pwinx = &winx)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, winy, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (int* pviewport = &viewport)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, (double*)pwinx, winy, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (int* pviewport = viewport)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, (double*)pwinx, winy, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (int* pviewport = &viewport)
				{
					fixed (double* pwinx = &winx)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, (int*)pviewport, (double*)pwinx, winy, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (int* pviewport = viewport)
				{
					fixed (double* pwinx = &winx)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, (int*)pviewport, (double*)pwinx, winy, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				fixed (int* pviewport = &viewport)
				{
					fixed (double* pwinx = &winx)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, (int*)pviewport, (double*)pwinx, winy, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				fixed (int* pviewport = viewport)
				{
					fixed (double* pwinx = &winx)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, (int*)pviewport, (double*)pwinx, winy, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					fixed (int* pviewport = &viewport)
					{
						fixed (double* pwinx = &winx)
						{
							fixed (double* pwinz = &winz)
							{
								int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, (int*)pviewport, (double*)pwinx, winy, (double*)pwinz);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					fixed (int* pviewport = viewport)
					{
						fixed (double* pwinx = &winx)
						{
							fixed (double* pwinz = &winz)
							{
								int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, (int*)pviewport, (double*)pwinx, winy, (double*)pwinz);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pwiny = &winy)
			{
				fixed (double* pwinz = &winz)
				{
					int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, viewport, winx, (double*)pwiny, (double*)pwinz);
					return ret;
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pwiny = &winy)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, winx, (double*)pwiny, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pwiny = &winy)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, winx, (double*)pwiny, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				fixed (double* pwiny = &winy)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, winx, (double*)pwiny, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				fixed (double* pwiny = &winy)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, winx, (double*)pwiny, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					fixed (double* pwiny = &winy)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, winx, (double*)pwiny, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					fixed (double* pwiny = &winy)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, winx, (double*)pwiny, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (int* pviewport = &viewport)
			{
				fixed (double* pwiny = &winy)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, winx, (double*)pwiny, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (int* pviewport = viewport)
			{
				fixed (double* pwiny = &winy)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, winx, (double*)pwiny, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (int* pviewport = &viewport)
				{
					fixed (double* pwiny = &winy)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, (int*)pviewport, winx, (double*)pwiny, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (int* pviewport = viewport)
				{
					fixed (double* pwiny = &winy)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, (int*)pviewport, winx, (double*)pwiny, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				fixed (int* pviewport = &viewport)
				{
					fixed (double* pwiny = &winy)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, (double*)pwiny, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				fixed (int* pviewport = viewport)
				{
					fixed (double* pwiny = &winy)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, (double*)pwiny, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					fixed (int* pviewport = &viewport)
					{
						fixed (double* pwiny = &winy)
						{
							fixed (double* pwinz = &winz)
							{
								int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, (double*)pwiny, (double*)pwinz);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] double* winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					fixed (int* pviewport = viewport)
					{
						fixed (double* pwiny = &winy)
						{
							fixed (double* pwinz = &winz)
							{
								int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, (int*)pviewport, winx, (double*)pwiny, (double*)pwinz);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pwinx = &winx)
			{
				fixed (double* pwiny = &winy)
				{
					fixed (double* pwinz = &winz)
					{
						int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, viewport, (double*)pwinx, (double*)pwiny, (double*)pwinz);
						return ret;
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwiny = &winy)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, (double*)pwinx, (double*)pwiny, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwiny = &winy)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, projMatrix, viewport, (double*)pwinx, (double*)pwiny, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pprojMatrix = &projMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwiny = &winy)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, (double*)pwiny, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pprojMatrix = projMatrix)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwiny = &winy)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, modelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, (double*)pwiny, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ref double projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = &modelMatrix)
			{
				fixed (double* pprojMatrix = &projMatrix)
				{
					fixed (double* pwinx = &winx)
					{
						fixed (double* pwiny = &winy)
						{
							fixed (double* pwinz = &winz)
							{
								int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, (double*)pwiny, (double*)pwinz);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] ReadOnlySpan<double> projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] int* viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (double* pmodelMatrix = modelMatrix)
			{
				fixed (double* pprojMatrix = projMatrix)
				{
					fixed (double* pwinx = &winx)
					{
						fixed (double* pwiny = &winy)
						{
							fixed (double* pwinz = &winz)
							{
								int ret = uProjectNative(objx, objy, objz, (double*)pmodelMatrix, (double*)pprojMatrix, viewport, (double*)pwinx, (double*)pwiny, (double*)pwinz);
								return ret;
							}
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ref int viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (int* pviewport = &viewport)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwiny = &winy)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, (double*)pwinx, (double*)pwiny, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}

		[NativeName(NativeNameType.Func, "gluProject")]
		[return: NativeName(NativeNameType.Type, "int")]
		public static int uProject([NativeName(NativeNameType.Param, "objx")] [NativeName(NativeNameType.Type, "GLdouble")] double objx, [NativeName(NativeNameType.Param, "objy")] [NativeName(NativeNameType.Type, "GLdouble")] double objy, [NativeName(NativeNameType.Param, "objz")] [NativeName(NativeNameType.Type, "GLdouble")] double objz, [NativeName(NativeNameType.Param, "modelMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* modelMatrix, [NativeName(NativeNameType.Param, "projMatrix")] [NativeName(NativeNameType.Type, "const GLdouble[16]")] double* projMatrix, [NativeName(NativeNameType.Param, "viewport")] [NativeName(NativeNameType.Type, "const GLint[4]")] ReadOnlySpan<int> viewport, [NativeName(NativeNameType.Param, "winx")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winx, [NativeName(NativeNameType.Param, "winy")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winy, [NativeName(NativeNameType.Param, "winz")] [NativeName(NativeNameType.Type, "GLdouble*")] ref double winz)
		{
			fixed (int* pviewport = viewport)
			{
				fixed (double* pwinx = &winx)
				{
					fixed (double* pwiny = &winy)
					{
						fixed (double* pwinz = &winz)
						{
							int ret = uProjectNative(objx, objy, objz, modelMatrix, projMatrix, (int*)pviewport, (double*)pwinx, (double*)pwiny, (double*)pwinz);
							return ret;
						}
					}
				}
			}
		}
	}
}
