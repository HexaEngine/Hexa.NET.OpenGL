// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL
{
	public static unsafe partial class GL
	{

		public static void VertexAttrib1dv(uint index, ref double v)
		{
			fixed (double* pv = &v)
			{
				VertexAttrib1dvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1fNative(uint index, float x)
		{
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[277])(index, x);
		}

		public static void VertexAttrib1f(uint index, float x)
		{
			VertexAttrib1fNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1fvNative(uint index, float* v)
		{
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[278])(index, v);
		}

		public static void VertexAttrib1fv(uint index, float* v)
		{
			VertexAttrib1fvNative(index, v);
		}

		public static void VertexAttrib1fv(uint index, ref float v)
		{
			fixed (float* pv = &v)
			{
				VertexAttrib1fvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1sNative(uint index, short x)
		{
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[279])(index, x);
		}

		public static void VertexAttrib1s(uint index, short x)
		{
			VertexAttrib1sNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1svNative(uint index, short* v)
		{
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[280])(index, v);
		}

		public static void VertexAttrib1sv(uint index, short* v)
		{
			VertexAttrib1svNative(index, v);
		}

		public static void VertexAttrib1sv(uint index, ref short v)
		{
			fixed (short* pv = &v)
			{
				VertexAttrib1svNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2dNative(uint index, double x, double y)
		{
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[281])(index, x, y);
		}

		public static void VertexAttrib2d(uint index, double x, double y)
		{
			VertexAttrib2dNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2dvNative(uint index, double* v)
		{
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[282])(index, v);
		}

		public static void VertexAttrib2dv(uint index, double* v)
		{
			VertexAttrib2dvNative(index, v);
		}

		public static void VertexAttrib2dv(uint index, ref double v)
		{
			fixed (double* pv = &v)
			{
				VertexAttrib2dvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2fNative(uint index, float x, float y)
		{
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[283])(index, x, y);
		}

		public static void VertexAttrib2f(uint index, float x, float y)
		{
			VertexAttrib2fNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2fvNative(uint index, float* v)
		{
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[284])(index, v);
		}

		public static void VertexAttrib2fv(uint index, float* v)
		{
			VertexAttrib2fvNative(index, v);
		}

		public static void VertexAttrib2fv(uint index, ref float v)
		{
			fixed (float* pv = &v)
			{
				VertexAttrib2fvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2sNative(uint index, short x, short y)
		{
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[285])(index, x, y);
		}

		public static void VertexAttrib2s(uint index, short x, short y)
		{
			VertexAttrib2sNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2svNative(uint index, short* v)
		{
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[286])(index, v);
		}

		public static void VertexAttrib2sv(uint index, short* v)
		{
			VertexAttrib2svNative(index, v);
		}

		public static void VertexAttrib2sv(uint index, ref short v)
		{
			fixed (short* pv = &v)
			{
				VertexAttrib2svNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3dNative(uint index, double x, double y, double z)
		{
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[287])(index, x, y, z);
		}

		public static void VertexAttrib3d(uint index, double x, double y, double z)
		{
			VertexAttrib3dNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3dvNative(uint index, double* v)
		{
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[288])(index, v);
		}

		public static void VertexAttrib3dv(uint index, double* v)
		{
			VertexAttrib3dvNative(index, v);
		}

		public static void VertexAttrib3dv(uint index, ref double v)
		{
			fixed (double* pv = &v)
			{
				VertexAttrib3dvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3fNative(uint index, float x, float y, float z)
		{
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[289])(index, x, y, z);
		}

		public static void VertexAttrib3f(uint index, float x, float y, float z)
		{
			VertexAttrib3fNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3fvNative(uint index, float* v)
		{
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[290])(index, v);
		}

		public static void VertexAttrib3fv(uint index, float* v)
		{
			VertexAttrib3fvNative(index, v);
		}

		public static void VertexAttrib3fv(uint index, ref float v)
		{
			fixed (float* pv = &v)
			{
				VertexAttrib3fvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3sNative(uint index, short x, short y, short z)
		{
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[291])(index, x, y, z);
		}

		public static void VertexAttrib3s(uint index, short x, short y, short z)
		{
			VertexAttrib3sNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3svNative(uint index, short* v)
		{
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[292])(index, v);
		}

		public static void VertexAttrib3sv(uint index, short* v)
		{
			VertexAttrib3svNative(index, v);
		}

		public static void VertexAttrib3sv(uint index, ref short v)
		{
			fixed (short* pv = &v)
			{
				VertexAttrib3svNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NbvNative(uint index, sbyte* v)
		{
			((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)funcTable[293])(index, v);
		}

		public static void VertexAttrib4Nbv(uint index, sbyte* v)
		{
			VertexAttrib4NbvNative(index, v);
		}

		public static void VertexAttrib4Nbv(uint index, ref sbyte v)
		{
			fixed (sbyte* pv = &v)
			{
				VertexAttrib4NbvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NivNative(uint index, int* v)
		{
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[294])(index, v);
		}

		public static void VertexAttrib4Niv(uint index, int* v)
		{
			VertexAttrib4NivNative(index, v);
		}

		public static void VertexAttrib4Niv(uint index, ref int v)
		{
			fixed (int* pv = &v)
			{
				VertexAttrib4NivNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NsvNative(uint index, short* v)
		{
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[295])(index, v);
		}

		public static void VertexAttrib4Nsv(uint index, short* v)
		{
			VertexAttrib4NsvNative(index, v);
		}

		public static void VertexAttrib4Nsv(uint index, ref short v)
		{
			fixed (short* pv = &v)
			{
				VertexAttrib4NsvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NubNative(uint index, byte x, byte y, byte z, byte w)
		{
			((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)funcTable[296])(index, x, y, z, w);
		}

		public static void VertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w)
		{
			VertexAttrib4NubNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NubvNative(uint index, byte* v)
		{
			((delegate* unmanaged[Cdecl]<uint, byte*, void>)funcTable[297])(index, v);
		}

		public static void VertexAttrib4Nubv(uint index, byte* v)
		{
			VertexAttrib4NubvNative(index, v);
		}

		public static void VertexAttrib4Nubv(uint index, string v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (v != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(v);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(v, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VertexAttrib4NubvNative(index, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void VertexAttrib4Nubv(uint index, ReadOnlySpan<byte> v)
		{
			fixed (byte* pv = v)
			{
				VertexAttrib4NubvNative(index, pv);
			}
		}

		public static void VertexAttrib4Nubv(uint index, ref byte v)
		{
			fixed (byte* pv = &v)
			{
				VertexAttrib4NubvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NuivNative(uint index, uint* v)
		{
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[298])(index, v);
		}

		public static void VertexAttrib4Nuiv(uint index, uint* v)
		{
			VertexAttrib4NuivNative(index, v);
		}

		public static void VertexAttrib4Nuiv(uint index, ref uint v)
		{
			fixed (uint* pv = &v)
			{
				VertexAttrib4NuivNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NusvNative(uint index, ushort* v)
		{
			((delegate* unmanaged[Cdecl]<uint, ushort*, void>)funcTable[299])(index, v);
		}

		public static void VertexAttrib4Nusv(uint index, ushort* v)
		{
			VertexAttrib4NusvNative(index, v);
		}

		public static void VertexAttrib4Nusv(uint index, ref ushort v)
		{
			fixed (ushort* pv = &v)
			{
				VertexAttrib4NusvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4bvNative(uint index, sbyte* v)
		{
			((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)funcTable[300])(index, v);
		}

		public static void VertexAttrib4bv(uint index, sbyte* v)
		{
			VertexAttrib4bvNative(index, v);
		}

		public static void VertexAttrib4bv(uint index, ref sbyte v)
		{
			fixed (sbyte* pv = &v)
			{
				VertexAttrib4bvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4dNative(uint index, double x, double y, double z, double w)
		{
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[301])(index, x, y, z, w);
		}

		public static void VertexAttrib4d(uint index, double x, double y, double z, double w)
		{
			VertexAttrib4dNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4dvNative(uint index, double* v)
		{
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[302])(index, v);
		}

		public static void VertexAttrib4dv(uint index, double* v)
		{
			VertexAttrib4dvNative(index, v);
		}

		public static void VertexAttrib4dv(uint index, ref double v)
		{
			fixed (double* pv = &v)
			{
				VertexAttrib4dvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4fNative(uint index, float x, float y, float z, float w)
		{
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[303])(index, x, y, z, w);
		}

		public static void VertexAttrib4f(uint index, float x, float y, float z, float w)
		{
			VertexAttrib4fNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4fvNative(uint index, float* v)
		{
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[304])(index, v);
		}

		public static void VertexAttrib4fv(uint index, float* v)
		{
			VertexAttrib4fvNative(index, v);
		}

		public static void VertexAttrib4fv(uint index, ref float v)
		{
			fixed (float* pv = &v)
			{
				VertexAttrib4fvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4ivNative(uint index, int* v)
		{
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[305])(index, v);
		}

		public static void VertexAttrib4iv(uint index, int* v)
		{
			VertexAttrib4ivNative(index, v);
		}

		public static void VertexAttrib4iv(uint index, ref int v)
		{
			fixed (int* pv = &v)
			{
				VertexAttrib4ivNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4sNative(uint index, short x, short y, short z, short w)
		{
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[306])(index, x, y, z, w);
		}

		public static void VertexAttrib4s(uint index, short x, short y, short z, short w)
		{
			VertexAttrib4sNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4svNative(uint index, short* v)
		{
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[307])(index, v);
		}

		public static void VertexAttrib4sv(uint index, short* v)
		{
			VertexAttrib4svNative(index, v);
		}

		public static void VertexAttrib4sv(uint index, ref short v)
		{
			fixed (short* pv = &v)
			{
				VertexAttrib4svNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4ubvNative(uint index, byte* v)
		{
			((delegate* unmanaged[Cdecl]<uint, byte*, void>)funcTable[308])(index, v);
		}

		public static void VertexAttrib4ubv(uint index, byte* v)
		{
			VertexAttrib4ubvNative(index, v);
		}

		public static void VertexAttrib4ubv(uint index, string v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (v != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(v);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(v, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VertexAttrib4ubvNative(index, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void VertexAttrib4ubv(uint index, ReadOnlySpan<byte> v)
		{
			fixed (byte* pv = v)
			{
				VertexAttrib4ubvNative(index, pv);
			}
		}

		public static void VertexAttrib4ubv(uint index, ref byte v)
		{
			fixed (byte* pv = &v)
			{
				VertexAttrib4ubvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4uivNative(uint index, uint* v)
		{
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[309])(index, v);
		}

		public static void VertexAttrib4uiv(uint index, uint* v)
		{
			VertexAttrib4uivNative(index, v);
		}

		public static void VertexAttrib4uiv(uint index, ref uint v)
		{
			fixed (uint* pv = &v)
			{
				VertexAttrib4uivNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4usvNative(uint index, ushort* v)
		{
			((delegate* unmanaged[Cdecl]<uint, ushort*, void>)funcTable[310])(index, v);
		}

		public static void VertexAttrib4usv(uint index, ushort* v)
		{
			VertexAttrib4usvNative(index, v);
		}

		public static void VertexAttrib4usv(uint index, ref ushort v)
		{
			fixed (ushort* pv = &v)
			{
				VertexAttrib4usvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribDivisorNative(uint index, uint divisor)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[311])(index, divisor);
		}

		public static void VertexAttribDivisor(uint index, uint divisor)
		{
			VertexAttribDivisorNative(index, divisor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI1iNative(uint index, int x)
		{
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[312])(index, x);
		}

		public static void VertexAttribI1i(uint index, int x)
		{
			VertexAttribI1iNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI1ivNative(uint index, int* v)
		{
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[313])(index, v);
		}

		public static void VertexAttribI1iv(uint index, int* v)
		{
			VertexAttribI1ivNative(index, v);
		}

		public static void VertexAttribI1iv(uint index, ref int v)
		{
			fixed (int* pv = &v)
			{
				VertexAttribI1ivNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI1uiNative(uint index, uint x)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[314])(index, x);
		}

		public static void VertexAttribI1ui(uint index, uint x)
		{
			VertexAttribI1uiNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI1uivNative(uint index, uint* v)
		{
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[315])(index, v);
		}

		public static void VertexAttribI1uiv(uint index, uint* v)
		{
			VertexAttribI1uivNative(index, v);
		}

		public static void VertexAttribI1uiv(uint index, ref uint v)
		{
			fixed (uint* pv = &v)
			{
				VertexAttribI1uivNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI2iNative(uint index, int x, int y)
		{
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[316])(index, x, y);
		}

		public static void VertexAttribI2i(uint index, int x, int y)
		{
			VertexAttribI2iNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI2ivNative(uint index, int* v)
		{
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[317])(index, v);
		}

		public static void VertexAttribI2iv(uint index, int* v)
		{
			VertexAttribI2ivNative(index, v);
		}

		public static void VertexAttribI2iv(uint index, ref int v)
		{
			fixed (int* pv = &v)
			{
				VertexAttribI2ivNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI2uiNative(uint index, uint x, uint y)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[318])(index, x, y);
		}

		public static void VertexAttribI2ui(uint index, uint x, uint y)
		{
			VertexAttribI2uiNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI2uivNative(uint index, uint* v)
		{
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[319])(index, v);
		}

		public static void VertexAttribI2uiv(uint index, uint* v)
		{
			VertexAttribI2uivNative(index, v);
		}

		public static void VertexAttribI2uiv(uint index, ref uint v)
		{
			fixed (uint* pv = &v)
			{
				VertexAttribI2uivNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI3iNative(uint index, int x, int y, int z)
		{
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[320])(index, x, y, z);
		}

		public static void VertexAttribI3i(uint index, int x, int y, int z)
		{
			VertexAttribI3iNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI3ivNative(uint index, int* v)
		{
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[321])(index, v);
		}

		public static void VertexAttribI3iv(uint index, int* v)
		{
			VertexAttribI3ivNative(index, v);
		}

		public static void VertexAttribI3iv(uint index, ref int v)
		{
			fixed (int* pv = &v)
			{
				VertexAttribI3ivNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI3uiNative(uint index, uint x, uint y, uint z)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)funcTable[322])(index, x, y, z);
		}

		public static void VertexAttribI3ui(uint index, uint x, uint y, uint z)
		{
			VertexAttribI3uiNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI3uivNative(uint index, uint* v)
		{
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[323])(index, v);
		}

		public static void VertexAttribI3uiv(uint index, uint* v)
		{
			VertexAttribI3uivNative(index, v);
		}

		public static void VertexAttribI3uiv(uint index, ref uint v)
		{
			fixed (uint* pv = &v)
			{
				VertexAttribI3uivNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4bvNative(uint index, sbyte* v)
		{
			((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)funcTable[324])(index, v);
		}

		public static void VertexAttribI4bv(uint index, sbyte* v)
		{
			VertexAttribI4bvNative(index, v);
		}

		public static void VertexAttribI4bv(uint index, ref sbyte v)
		{
			fixed (sbyte* pv = &v)
			{
				VertexAttribI4bvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4iNative(uint index, int x, int y, int z, int w)
		{
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[325])(index, x, y, z, w);
		}

		public static void VertexAttribI4i(uint index, int x, int y, int z, int w)
		{
			VertexAttribI4iNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4ivNative(uint index, int* v)
		{
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[326])(index, v);
		}

		public static void VertexAttribI4iv(uint index, int* v)
		{
			VertexAttribI4ivNative(index, v);
		}

		public static void VertexAttribI4iv(uint index, ref int v)
		{
			fixed (int* pv = &v)
			{
				VertexAttribI4ivNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4svNative(uint index, short* v)
		{
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[327])(index, v);
		}

		public static void VertexAttribI4sv(uint index, short* v)
		{
			VertexAttribI4svNative(index, v);
		}

		public static void VertexAttribI4sv(uint index, ref short v)
		{
			fixed (short* pv = &v)
			{
				VertexAttribI4svNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4ubvNative(uint index, byte* v)
		{
			((delegate* unmanaged[Cdecl]<uint, byte*, void>)funcTable[328])(index, v);
		}

		public static void VertexAttribI4ubv(uint index, byte* v)
		{
			VertexAttribI4ubvNative(index, v);
		}

		public static void VertexAttribI4ubv(uint index, string v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (v != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(v);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(v, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VertexAttribI4ubvNative(index, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void VertexAttribI4ubv(uint index, ReadOnlySpan<byte> v)
		{
			fixed (byte* pv = v)
			{
				VertexAttribI4ubvNative(index, pv);
			}
		}

		public static void VertexAttribI4ubv(uint index, ref byte v)
		{
			fixed (byte* pv = &v)
			{
				VertexAttribI4ubvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4uiNative(uint index, uint x, uint y, uint z, uint w)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)funcTable[329])(index, x, y, z, w);
		}

		public static void VertexAttribI4ui(uint index, uint x, uint y, uint z, uint w)
		{
			VertexAttribI4uiNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4uivNative(uint index, uint* v)
		{
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[330])(index, v);
		}

		public static void VertexAttribI4uiv(uint index, uint* v)
		{
			VertexAttribI4uivNative(index, v);
		}

		public static void VertexAttribI4uiv(uint index, ref uint v)
		{
			fixed (uint* pv = &v)
			{
				VertexAttribI4uivNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4usvNative(uint index, ushort* v)
		{
			((delegate* unmanaged[Cdecl]<uint, ushort*, void>)funcTable[331])(index, v);
		}

		public static void VertexAttribI4usv(uint index, ushort* v)
		{
			VertexAttribI4usvNative(index, v);
		}

		public static void VertexAttribI4usv(uint index, ref ushort v)
		{
			fixed (ushort* pv = &v)
			{
				VertexAttribI4usvNative(index, pv);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribIPointerNative(uint index, int size, GLVertexAttribIType type, int stride, void* pointer)
		{
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribIType, int, void*, void>)funcTable[332])(index, size, type, stride, pointer);
		}

		public static void VertexAttribIPointer(uint index, int size, GLVertexAttribIType type, int stride, void* pointer)
		{
			VertexAttribIPointerNative(index, size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP1uiNative(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[333])(index, type, normalized, value);
		}

		public static void VertexAttribP1ui(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			VertexAttribP1uiNative(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP1uivNative(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint*, void>)funcTable[334])(index, type, normalized, value);
		}

		public static void VertexAttribP1uiv(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			VertexAttribP1uivNative(index, type, normalized, value);
		}

		public static void VertexAttribP1uiv(uint index, GLVertexAttribPointerType type, byte normalized, ref uint value)
		{
			fixed (uint* pvalue = &value)
			{
				VertexAttribP1uivNative(index, type, normalized, pvalue);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP2uiNative(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[335])(index, type, normalized, value);
		}

		public static void VertexAttribP2ui(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			VertexAttribP2uiNative(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP2uivNative(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint*, void>)funcTable[336])(index, type, normalized, value);
		}

		public static void VertexAttribP2uiv(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			VertexAttribP2uivNative(index, type, normalized, value);
		}

		public static void VertexAttribP2uiv(uint index, GLVertexAttribPointerType type, byte normalized, ref uint value)
		{
			fixed (uint* pvalue = &value)
			{
				VertexAttribP2uivNative(index, type, normalized, pvalue);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP3uiNative(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[337])(index, type, normalized, value);
		}

		public static void VertexAttribP3ui(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			VertexAttribP3uiNative(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP3uivNative(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint*, void>)funcTable[338])(index, type, normalized, value);
		}

		public static void VertexAttribP3uiv(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			VertexAttribP3uivNative(index, type, normalized, value);
		}

		public static void VertexAttribP3uiv(uint index, GLVertexAttribPointerType type, byte normalized, ref uint value)
		{
			fixed (uint* pvalue = &value)
			{
				VertexAttribP3uivNative(index, type, normalized, pvalue);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP4uiNative(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[339])(index, type, normalized, value);
		}

		public static void VertexAttribP4ui(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			VertexAttribP4uiNative(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP4uivNative(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint*, void>)funcTable[340])(index, type, normalized, value);
		}

		public static void VertexAttribP4uiv(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			VertexAttribP4uivNative(index, type, normalized, value);
		}

		public static void VertexAttribP4uiv(uint index, GLVertexAttribPointerType type, byte normalized, ref uint value)
		{
			fixed (uint* pvalue = &value)
			{
				VertexAttribP4uivNative(index, type, normalized, pvalue);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribPointerNative(uint index, int size, GLVertexAttribPointerType type, byte normalized, int stride, void* pointer)
		{
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribPointerType, byte, int, void*, void>)funcTable[341])(index, size, type, normalized, stride, pointer);
		}

		public static void VertexAttribPointer(uint index, int size, GLVertexAttribPointerType type, byte normalized, int stride, void* pointer)
		{
			VertexAttribPointerNative(index, size, type, normalized, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ViewportNative(int x, int y, int width, int height)
		{
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[342])(x, y, width, height);
		}

		public static void Viewport(int x, int y, int width, int height)
		{
			ViewportNative(x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WaitSyncNative(GLSync sync, GLSyncBehaviorFlags flags, ulong timeout)
		{
			((delegate* unmanaged[Cdecl]<GLSync, GLSyncBehaviorFlags, ulong, void>)funcTable[343])(sync, flags, timeout);
		}

		public static void WaitSync(GLSync sync, GLSyncBehaviorFlags flags, ulong timeout)
		{
			WaitSyncNative(sync, flags, timeout);
		}

	}
}
