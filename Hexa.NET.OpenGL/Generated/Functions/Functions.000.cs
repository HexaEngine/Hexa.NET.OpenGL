// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Numerics;

namespace Hexa.NET.OpenGL
{
	public static unsafe partial class GL
	{
		public static void ActiveTexture(GLTextureUnit texture)
		{
			((delegate* unmanaged[Cdecl]<GLTextureUnit, void>)funcTable[0])(texture);
		}

		public static void AttachShader(uint program, uint shader)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[1])(program, shader);
		}

		public static void BeginConditionalRender(uint id, GLConditionalRenderMode mode)
		{
			((delegate* unmanaged[Cdecl]<uint, GLConditionalRenderMode, void>)funcTable[2])(id, mode);
		}

		public static void BeginQuery(GLQueryTarget target, uint id)
		{
			((delegate* unmanaged[Cdecl]<GLQueryTarget, uint, void>)funcTable[3])(target, id);
		}

		public static void BeginTransformFeedback(GLPrimitiveType primitiveMode)
		{
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, void>)funcTable[4])(primitiveMode);
		}

		public static void BindAttribLocation(uint program, uint index, byte name)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, byte, void>)funcTable[5])(program, index, name);
		}

		public static void BindBuffer(GLBufferTargetARB target, uint buffer)
		{
			((delegate* unmanaged[Cdecl]<GLBufferTargetARB, uint, void>)funcTable[6])(target, buffer);
		}

		public static void BindBufferBase(GLBufferTargetARB target, uint index, uint buffer)
		{
			((delegate* unmanaged[Cdecl]<GLBufferTargetARB, uint, uint, void>)funcTable[7])(target, index, buffer);
		}

		public static void BindBufferRange(GLBufferTargetARB target, uint index, uint buffer, nint offset, nint size)
		{
			((delegate* unmanaged[Cdecl]<GLBufferTargetARB, uint, uint, nint, nint, void>)funcTable[8])(target, index, buffer, offset, size);
		}

		public static void BindFragDataLocation(uint program, uint color, byte name)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, byte, void>)funcTable[9])(program, color, name);
		}

		public static void BindFragDataLocationIndexed(uint program, uint colorNumber, uint index, byte name)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, uint, byte, void>)funcTable[10])(program, colorNumber, index, name);
		}

		public static void BindFramebuffer(GLFramebufferTarget target, uint framebuffer)
		{
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, uint, void>)funcTable[11])(target, framebuffer);
		}

		public static void BindRenderbuffer(GLRenderbufferTarget target, uint renderbuffer)
		{
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, uint, void>)funcTable[12])(target, renderbuffer);
		}

		public static void BindSampler(uint unit, uint sampler)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[13])(unit, sampler);
		}

		public static void BindTexture(GLTextureTarget target, uint texture)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, uint, void>)funcTable[14])(target, texture);
		}

		public static void BindVertexArray(uint array)
		{
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[15])(array);
		}

		public static void BlendColor(float red, float green, float blue, float alpha)
		{
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[16])(red, green, blue, alpha);
		}

		public static void BlendEquation(GLBlendEquationModeEXT mode)
		{
			((delegate* unmanaged[Cdecl]<GLBlendEquationModeEXT, void>)funcTable[17])(mode);
		}

		public static void BlendEquationSeparate(GLBlendEquationModeEXT modeRGB, GLBlendEquationModeEXT modeAlpha)
		{
			((delegate* unmanaged[Cdecl]<GLBlendEquationModeEXT, GLBlendEquationModeEXT, void>)funcTable[18])(modeRGB, modeAlpha);
		}

		public static void BlendFunc(GLBlendingFactor sfactor, GLBlendingFactor dfactor)
		{
			((delegate* unmanaged[Cdecl]<GLBlendingFactor, GLBlendingFactor, void>)funcTable[19])(sfactor, dfactor);
		}

		public static void BlendFuncSeparate(GLBlendingFactor sfactorRGB, GLBlendingFactor dfactorRGB, GLBlendingFactor sfactorAlpha, GLBlendingFactor dfactorAlpha)
		{
			((delegate* unmanaged[Cdecl]<GLBlendingFactor, GLBlendingFactor, GLBlendingFactor, GLBlendingFactor, void>)funcTable[20])(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
		}

		public static void BlitFramebuffer(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, GLClearBufferMask mask, GLBlitFramebufferFilter filter)
		{
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, int, int, GLClearBufferMask, GLBlitFramebufferFilter, void>)funcTable[21])(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
		}

		public static GLEnum CheckFramebufferStatus(GLFramebufferTarget target)
		{
			GLEnum ret = ((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLEnum>)funcTable[22])(target);
			return ret;
		}

		public static void ClampColor(GLClampColorTargetARB target, GLClampColorModeARB clamp)
		{
			((delegate* unmanaged[Cdecl]<GLClampColorTargetARB, GLClampColorModeARB, void>)funcTable[23])(target, clamp);
		}

		public static void Clear(GLClearBufferMask mask)
		{
			((delegate* unmanaged[Cdecl]<GLClearBufferMask, void>)funcTable[24])(mask);
		}

		public static void ClearBufferfi(GLBuffer buffer, int drawbuffer, float depth, int stencil)
		{
			((delegate* unmanaged[Cdecl]<GLBuffer, int, float, int, void>)funcTable[25])(buffer, drawbuffer, depth, stencil);
		}

		public static void ClearBufferfv(GLBuffer buffer, int drawbuffer, float value)
		{
			((delegate* unmanaged[Cdecl]<GLBuffer, int, float, void>)funcTable[26])(buffer, drawbuffer, value);
		}

		public static void ClearBufferiv(GLBuffer buffer, int drawbuffer, int value)
		{
			((delegate* unmanaged[Cdecl]<GLBuffer, int, int, void>)funcTable[27])(buffer, drawbuffer, value);
		}

		public static void ClearBufferuiv(GLBuffer buffer, int drawbuffer, uint value)
		{
			((delegate* unmanaged[Cdecl]<GLBuffer, int, uint, void>)funcTable[28])(buffer, drawbuffer, value);
		}

		public static void ClearColor(float red, float green, float blue, float alpha)
		{
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[29])(red, green, blue, alpha);
		}

		public static void ClearDepth(double depth)
		{
			((delegate* unmanaged[Cdecl]<double, void>)funcTable[30])(depth);
		}

		public static void ClearStencil(int s)
		{
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[31])(s);
		}

		public static GLEnum ClientWaitSync(GLSync sync, GLSyncObjectMask flags, ulong timeout)
		{
			GLEnum ret = ((delegate* unmanaged[Cdecl]<GLSync, GLSyncObjectMask, ulong, GLEnum>)funcTable[32])(sync, flags, timeout);
			return ret;
		}

		public static void ColorMask(byte red, byte green, byte blue, byte alpha)
		{
			((delegate* unmanaged[Cdecl]<byte, byte, byte, byte, void>)funcTable[33])(red, green, blue, alpha);
		}

		public static void ColorMaski(uint index, byte r, byte g, byte b, byte a)
		{
			((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)funcTable[34])(index, r, g, b, a);
		}

		public static void CompileShader(uint shader)
		{
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[35])(shader);
		}

		public static void CopyBufferSubData(GLCopyBufferSubDataTarget readTarget, GLCopyBufferSubDataTarget writeTarget, nint readOffset, nint writeOffset, nint size)
		{
			((delegate* unmanaged[Cdecl]<GLCopyBufferSubDataTarget, GLCopyBufferSubDataTarget, nint, nint, nint, void>)funcTable[36])(readTarget, writeTarget, readOffset, writeOffset, size);
		}

		public static void CopyTexImage1D(GLTextureTarget target, int level, GLInternalFormat internalformat, int x, int y, int width, int border)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLInternalFormat, int, int, int, int, void>)funcTable[37])(target, level, internalformat, x, y, width, border);
		}

		public static void CopyTexImage2D(GLTextureTarget target, int level, GLInternalFormat internalformat, int x, int y, int width, int height, int border)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLInternalFormat, int, int, int, int, int, void>)funcTable[38])(target, level, internalformat, x, y, width, height, border);
		}

		public static void CopyTexSubImage1D(GLTextureTarget target, int level, int xoffset, int x, int y, int width)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, int, int, int, int, void>)funcTable[39])(target, level, xoffset, x, y, width);
		}

		public static void CopyTexSubImage2D(GLTextureTarget target, int level, int xoffset, int yoffset, int x, int y, int width, int height)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, int, int, int, int, int, int, void>)funcTable[40])(target, level, xoffset, yoffset, x, y, width, height);
		}

		public static void CopyTexSubImage3D(GLTextureTarget target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, int, int, int, int, int, int, int, void>)funcTable[41])(target, level, xoffset, yoffset, zoffset, x, y, width, height);
		}

		public static uint CreateProgram()
		{
			uint ret = ((delegate* unmanaged[Cdecl]<uint>)funcTable[42])();
			return ret;
		}

		public static uint CreateShader(GLShaderType type)
		{
			uint ret = ((delegate* unmanaged[Cdecl]<GLShaderType, uint>)funcTable[43])(type);
			return ret;
		}

		public static void CullFace(GLTriangleFace mode)
		{
			((delegate* unmanaged[Cdecl]<GLTriangleFace, void>)funcTable[44])(mode);
		}

		public static void DeleteBuffers(int n, uint buffers)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[45])(n, buffers);
		}

		public static void DeleteFramebuffers(int n, uint framebuffers)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[46])(n, framebuffers);
		}

		public static void DeleteProgram(uint program)
		{
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[47])(program);
		}

		public static void DeleteQueries(int n, uint ids)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[48])(n, ids);
		}

		public static void DeleteRenderbuffers(int n, uint renderbuffers)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[49])(n, renderbuffers);
		}

		public static void DeleteSamplers(int count, uint samplers)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[50])(count, samplers);
		}

		public static void DeleteShader(uint shader)
		{
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[51])(shader);
		}

		public static void DeleteSync(GLSync sync)
		{
			((delegate* unmanaged[Cdecl]<GLSync, void>)funcTable[52])(sync);
		}

		public static void DeleteTextures(int n, uint textures)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[53])(n, textures);
		}

		public static void DeleteVertexArrays(int n, uint arrays)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[54])(n, arrays);
		}

		public static void DepthFunc(GLDepthFunction func)
		{
			((delegate* unmanaged[Cdecl]<GLDepthFunction, void>)funcTable[55])(func);
		}

		public static void DepthMask(byte flag)
		{
			((delegate* unmanaged[Cdecl]<byte, void>)funcTable[56])(flag);
		}

		public static void DepthRange(double n, double f)
		{
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[57])(n, f);
		}

		public static void DetachShader(uint program, uint shader)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[58])(program, shader);
		}

		public static void Disable(GLEnableCap cap)
		{
			((delegate* unmanaged[Cdecl]<GLEnableCap, void>)funcTable[59])(cap);
		}

		public static void DisableVertexAttribArray(uint index)
		{
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[60])(index);
		}

		public static void Disablei(GLEnableCap target, uint index)
		{
			((delegate* unmanaged[Cdecl]<GLEnableCap, uint, void>)funcTable[61])(target, index);
		}

		public static void DrawArrays(GLPrimitiveType mode, int first, int count)
		{
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int, int, void>)funcTable[62])(mode, first, count);
		}

		public static void DrawArraysInstanced(GLPrimitiveType mode, int first, int count, int instancecount)
		{
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int, int, int, void>)funcTable[63])(mode, first, count, instancecount);
		}

		public static void DrawBuffer(GLDrawBufferMode buf)
		{
			((delegate* unmanaged[Cdecl]<GLDrawBufferMode, void>)funcTable[64])(buf);
		}

		public static void DrawBuffers(int n, GLDrawBufferMode bufs)
		{
			((delegate* unmanaged[Cdecl]<int, GLDrawBufferMode, void>)funcTable[65])(n, bufs);
		}

		public static void Enable(GLEnableCap cap)
		{
			((delegate* unmanaged[Cdecl]<GLEnableCap, void>)funcTable[66])(cap);
		}

		public static void EnableVertexAttribArray(uint index)
		{
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[67])(index);
		}

		public static void Enablei(GLEnableCap target, uint index)
		{
			((delegate* unmanaged[Cdecl]<GLEnableCap, uint, void>)funcTable[68])(target, index);
		}

		public static void EndConditionalRender()
		{
			((delegate* unmanaged[Cdecl]<void>)funcTable[69])();
		}

		public static void EndQuery(GLQueryTarget target)
		{
			((delegate* unmanaged[Cdecl]<GLQueryTarget, void>)funcTable[70])(target);
		}

		public static void EndTransformFeedback()
		{
			((delegate* unmanaged[Cdecl]<void>)funcTable[71])();
		}

		public static GLSync FenceSync(GLSyncCondition condition, GLSyncBehaviorFlags flags)
		{
			GLSync ret = ((delegate* unmanaged[Cdecl]<GLSyncCondition, GLSyncBehaviorFlags, GLSync>)funcTable[72])(condition, flags);
			return ret;
		}

		public static void Finish()
		{
			((delegate* unmanaged[Cdecl]<void>)funcTable[73])();
		}

		public static void Flush()
		{
			((delegate* unmanaged[Cdecl]<void>)funcTable[74])();
		}

		public static void FlushMappedBufferRange(GLBufferTargetARB target, nint offset, nint length)
		{
			((delegate* unmanaged[Cdecl]<GLBufferTargetARB, nint, nint, void>)funcTable[75])(target, offset, length);
		}

		public static void FramebufferRenderbuffer(GLFramebufferTarget target, GLFramebufferAttachment attachment, GLRenderbufferTarget renderbuffertarget, uint renderbuffer)
		{
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, GLRenderbufferTarget, uint, void>)funcTable[76])(target, attachment, renderbuffertarget, renderbuffer);
		}

		public static void FramebufferTexture(GLFramebufferTarget target, GLFramebufferAttachment attachment, uint texture, int level)
		{
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, uint, int, void>)funcTable[77])(target, attachment, texture, level);
		}

		public static void FramebufferTexture1D(GLFramebufferTarget target, GLFramebufferAttachment attachment, GLTextureTarget textarget, uint texture, int level)
		{
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, GLTextureTarget, uint, int, void>)funcTable[78])(target, attachment, textarget, texture, level);
		}

		public static void FramebufferTexture2D(GLFramebufferTarget target, GLFramebufferAttachment attachment, GLTextureTarget textarget, uint texture, int level)
		{
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, GLTextureTarget, uint, int, void>)funcTable[79])(target, attachment, textarget, texture, level);
		}

		public static void FramebufferTexture3D(GLFramebufferTarget target, GLFramebufferAttachment attachment, GLTextureTarget textarget, uint texture, int level, int zoffset)
		{
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, GLTextureTarget, uint, int, int, void>)funcTable[80])(target, attachment, textarget, texture, level, zoffset);
		}

		public static void FramebufferTextureLayer(GLFramebufferTarget target, GLFramebufferAttachment attachment, uint texture, int level, int layer)
		{
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, uint, int, int, void>)funcTable[81])(target, attachment, texture, level, layer);
		}

		public static void FrontFace(GLFrontFaceDirection mode)
		{
			((delegate* unmanaged[Cdecl]<GLFrontFaceDirection, void>)funcTable[82])(mode);
		}

		public static void GenBuffers(int n, uint buffers)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[83])(n, buffers);
		}

		public static void GenFramebuffers(int n, uint framebuffers)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[84])(n, framebuffers);
		}

		public static void GenQueries(int n, uint ids)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[85])(n, ids);
		}

		public static void GenRenderbuffers(int n, uint renderbuffers)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[86])(n, renderbuffers);
		}

		public static void GenSamplers(int count, uint samplers)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[87])(count, samplers);
		}

		public static void GenTextures(int n, uint textures)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[88])(n, textures);
		}

		public static void GenVertexArrays(int n, uint arrays)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[89])(n, arrays);
		}

		public static void GenerateMipmap(GLTextureTarget target)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, void>)funcTable[90])(target);
		}

		public static void GetActiveAttrib(uint program, uint index, int bufSize, int length, int size, GLAttributeType type, byte name)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, GLAttributeType, byte, void>)funcTable[91])(program, index, bufSize, length, size, type, name);
		}

		public static void GetActiveUniform(uint program, uint index, int bufSize, int length, int size, GLUniformType type, byte name)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, GLUniformType, byte, void>)funcTable[92])(program, index, bufSize, length, size, type, name);
		}

		public static void GetActiveUniformBlockName(uint program, uint uniformBlockIndex, int bufSize, int length, byte uniformBlockName)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, byte, void>)funcTable[93])(program, uniformBlockIndex, bufSize, length, uniformBlockName);
		}

		public static void GetActiveUniformBlockiv(uint program, uint uniformBlockIndex, GLUniformBlockPName pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, GLUniformBlockPName, int, void>)funcTable[94])(program, uniformBlockIndex, pname, @params);
		}

		public static void GetActiveUniformName(uint program, uint uniformIndex, int bufSize, int length, byte uniformName)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, byte, void>)funcTable[95])(program, uniformIndex, bufSize, length, uniformName);
		}

		public static void GetActiveUniformsiv(uint program, int uniformCount, uint uniformIndices, GLUniformPName pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<uint, int, uint, GLUniformPName, int, void>)funcTable[96])(program, uniformCount, uniformIndices, pname, @params);
		}

		public static void GetAttachedShaders(uint program, int maxCount, int count, uint shaders)
		{
			((delegate* unmanaged[Cdecl]<uint, int, int, uint, void>)funcTable[97])(program, maxCount, count, shaders);
		}

		public static int GetAttribLocation(uint program, byte name)
		{
			int ret = ((delegate* unmanaged[Cdecl]<uint, byte, int>)funcTable[98])(program, name);
			return ret;
		}

		public static void GetBooleani_v(GLBufferTargetARB target, uint index, byte data)
		{
			((delegate* unmanaged[Cdecl]<GLBufferTargetARB, uint, byte, void>)funcTable[99])(target, index, data);
		}

		public static void GetBooleanv(GLGetPName pname, byte data)
		{
			((delegate* unmanaged[Cdecl]<GLGetPName, byte, void>)funcTable[100])(pname, data);
		}

		public static void GetBufferParameteri64v(GLBufferTargetARB target, GLBufferPNameARB pname, long @params)
		{
			((delegate* unmanaged[Cdecl]<GLBufferTargetARB, GLBufferPNameARB, long, void>)funcTable[101])(target, pname, @params);
		}

		public static void GetBufferParameteriv(GLBufferTargetARB target, GLBufferPNameARB pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<GLBufferTargetARB, GLBufferPNameARB, int, void>)funcTable[102])(target, pname, @params);
		}

		public static void GetDoublev(GLGetPName pname, double data)
		{
			((delegate* unmanaged[Cdecl]<GLGetPName, double, void>)funcTable[103])(pname, data);
		}

		public static GLEnum GetError()
		{
			GLEnum ret = ((delegate* unmanaged[Cdecl]<GLEnum>)funcTable[104])();
			return ret;
		}

		public static void GetFloatv(GLGetPName pname, float data)
		{
			((delegate* unmanaged[Cdecl]<GLGetPName, float, void>)funcTable[105])(pname, data);
		}

		public static int GetFragDataIndex(uint program, byte name)
		{
			int ret = ((delegate* unmanaged[Cdecl]<uint, byte, int>)funcTable[106])(program, name);
			return ret;
		}

		public static int GetFragDataLocation(uint program, byte name)
		{
			int ret = ((delegate* unmanaged[Cdecl]<uint, byte, int>)funcTable[107])(program, name);
			return ret;
		}

		public static void GetFramebufferAttachmentParameteriv(GLFramebufferTarget target, GLFramebufferAttachment attachment, GLFramebufferAttachmentParameterName pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, GLFramebufferAttachmentParameterName, int, void>)funcTable[108])(target, attachment, pname, @params);
		}

		public static void GetInteger64i_v(GLGetPName target, uint index, long data)
		{
			((delegate* unmanaged[Cdecl]<GLGetPName, uint, long, void>)funcTable[109])(target, index, data);
		}

		public static void GetInteger64v(GLGetPName pname, long data)
		{
			((delegate* unmanaged[Cdecl]<GLGetPName, long, void>)funcTable[110])(pname, data);
		}

		public static void GetIntegeri_v(GLGetPName target, uint index, int data)
		{
			((delegate* unmanaged[Cdecl]<GLGetPName, uint, int, void>)funcTable[111])(target, index, data);
		}

		public static void GetIntegerv(GLGetPName pname, int data)
		{
			((delegate* unmanaged[Cdecl]<GLGetPName, int, void>)funcTable[112])(pname, data);
		}

		public static void GetMultisamplefv(GLGetMultisamplePNameNV pname, uint index, float val)
		{
			((delegate* unmanaged[Cdecl]<GLGetMultisamplePNameNV, uint, float, void>)funcTable[113])(pname, index, val);
		}

		public static void GetProgramInfoLog(uint program, int bufSize, int length, byte infoLog)
		{
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, void>)funcTable[114])(program, bufSize, length, infoLog);
		}

		public static void GetProgramiv(uint program, GLProgramPropertyARB pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLProgramPropertyARB, int, void>)funcTable[115])(program, pname, @params);
		}

		public static void GetQueryObjecti64v(uint id, GLQueryObjectParameterName pname, long @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLQueryObjectParameterName, long, void>)funcTable[116])(id, pname, @params);
		}

		public static void GetQueryObjectiv(uint id, GLQueryObjectParameterName pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLQueryObjectParameterName, int, void>)funcTable[117])(id, pname, @params);
		}

		public static void GetQueryObjectui64v(uint id, GLQueryObjectParameterName pname, ulong @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLQueryObjectParameterName, ulong, void>)funcTable[118])(id, pname, @params);
		}

		public static void GetQueryObjectuiv(uint id, GLQueryObjectParameterName pname, uint @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLQueryObjectParameterName, uint, void>)funcTable[119])(id, pname, @params);
		}

		public static void GetQueryiv(GLQueryTarget target, GLQueryParameterName pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<GLQueryTarget, GLQueryParameterName, int, void>)funcTable[120])(target, pname, @params);
		}

		public static void GetRenderbufferParameteriv(GLRenderbufferTarget target, GLRenderbufferParameterName pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, GLRenderbufferParameterName, int, void>)funcTable[121])(target, pname, @params);
		}

		public static void GetSamplerParameterIiv(uint sampler, GLSamplerParameterI pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int, void>)funcTable[122])(sampler, pname, @params);
		}

		public static void GetSamplerParameterIuiv(uint sampler, GLSamplerParameterI pname, uint @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, uint, void>)funcTable[123])(sampler, pname, @params);
		}

		public static void GetSamplerParameterfv(uint sampler, GLSamplerParameterF pname, float @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterF, float, void>)funcTable[124])(sampler, pname, @params);
		}

		public static void GetSamplerParameteriv(uint sampler, GLSamplerParameterI pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int, void>)funcTable[125])(sampler, pname, @params);
		}

		public static void GetShaderInfoLog(uint shader, int bufSize, int length, byte infoLog)
		{
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, void>)funcTable[126])(shader, bufSize, length, infoLog);
		}

		public static void GetShaderSource(uint shader, int bufSize, int length, byte source)
		{
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, void>)funcTable[127])(shader, bufSize, length, source);
		}

		public static void GetShaderiv(uint shader, GLShaderParameterName pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLShaderParameterName, int, void>)funcTable[128])(shader, pname, @params);
		}

		public static byte* GetString(GLStringName name)
		{
			byte* ret = ((delegate* unmanaged[Cdecl]<GLStringName, byte*>)funcTable[129])(name);
			return ret;
		}

		public static byte* GetStringi(GLStringName name, uint index)
		{
			byte* ret = ((delegate* unmanaged[Cdecl]<GLStringName, uint, byte*>)funcTable[130])(name, index);
			return ret;
		}

		public static void GetSynciv(GLSync sync, GLSyncParameterName pname, int count, int length, int values)
		{
			((delegate* unmanaged[Cdecl]<GLSync, GLSyncParameterName, int, int, int, void>)funcTable[131])(sync, pname, count, length, values);
		}

		public static void GetTexLevelParameterfv(GLTextureTarget target, int level, GLGetTextureParameter pname, float @params)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLGetTextureParameter, float, void>)funcTable[132])(target, level, pname, @params);
		}

		public static void GetTexLevelParameteriv(GLTextureTarget target, int level, GLGetTextureParameter pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLGetTextureParameter, int, void>)funcTable[133])(target, level, pname, @params);
		}

		public static void GetTexParameterIiv(GLTextureTarget target, GLGetTextureParameter pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLGetTextureParameter, int, void>)funcTable[134])(target, pname, @params);
		}

		public static void GetTexParameterIuiv(GLTextureTarget target, GLGetTextureParameter pname, uint @params)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLGetTextureParameter, uint, void>)funcTable[135])(target, pname, @params);
		}

		public static void GetTexParameterfv(GLTextureTarget target, GLGetTextureParameter pname, float @params)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLGetTextureParameter, float, void>)funcTable[136])(target, pname, @params);
		}

		public static void GetTexParameteriv(GLTextureTarget target, GLGetTextureParameter pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLGetTextureParameter, int, void>)funcTable[137])(target, pname, @params);
		}

		public static void GetTransformFeedbackVarying(uint program, uint index, int bufSize, int length, int size, GLAttributeType type, byte name)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, int, int, int, GLAttributeType, byte, void>)funcTable[138])(program, index, bufSize, length, size, type, name);
		}

		public static uint GetUniformBlockIndex(uint program, byte uniformBlockName)
		{
			uint ret = ((delegate* unmanaged[Cdecl]<uint, byte, uint>)funcTable[139])(program, uniformBlockName);
			return ret;
		}

		public static void GetUniformIndices(uint program, int uniformCount, byte uniformNames, uint uniformIndices)
		{
			((delegate* unmanaged[Cdecl]<uint, int, byte, uint, void>)funcTable[140])(program, uniformCount, uniformNames, uniformIndices);
		}

		public static int GetUniformLocation(uint program, byte name)
		{
			int ret = ((delegate* unmanaged[Cdecl]<uint, byte, int>)funcTable[141])(program, name);
			return ret;
		}

		public static void GetUniformfv(uint program, int location, float @params)
		{
			((delegate* unmanaged[Cdecl]<uint, int, float, void>)funcTable[142])(program, location, @params);
		}

		public static void GetUniformiv(uint program, int location, int @params)
		{
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[143])(program, location, @params);
		}

		public static void GetUniformuiv(uint program, int location, uint @params)
		{
			((delegate* unmanaged[Cdecl]<uint, int, uint, void>)funcTable[144])(program, location, @params);
		}

		public static void GetVertexAttribIiv(uint index, GLVertexAttribEnum pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, int, void>)funcTable[145])(index, pname, @params);
		}

		public static void GetVertexAttribIuiv(uint index, GLVertexAttribEnum pname, uint @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, uint, void>)funcTable[146])(index, pname, @params);
		}

		public static void GetVertexAttribdv(uint index, GLVertexAttribPropertyARB pname, double @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPropertyARB, double, void>)funcTable[147])(index, pname, @params);
		}

		public static void GetVertexAttribfv(uint index, GLVertexAttribPropertyARB pname, float @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPropertyARB, float, void>)funcTable[148])(index, pname, @params);
		}

		public static void GetVertexAttribiv(uint index, GLVertexAttribPropertyARB pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPropertyARB, int, void>)funcTable[149])(index, pname, @params);
		}

		public static void Hint(GLHintTarget target, GLHintMode mode)
		{
			((delegate* unmanaged[Cdecl]<GLHintTarget, GLHintMode, void>)funcTable[150])(target, mode);
		}

		public static byte IsBuffer(uint buffer)
		{
			byte ret = ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[151])(buffer);
			return ret;
		}

		public static byte IsEnabled(GLEnableCap cap)
		{
			byte ret = ((delegate* unmanaged[Cdecl]<GLEnableCap, byte>)funcTable[152])(cap);
			return ret;
		}

		public static byte IsEnabledi(GLEnableCap target, uint index)
		{
			byte ret = ((delegate* unmanaged[Cdecl]<GLEnableCap, uint, byte>)funcTable[153])(target, index);
			return ret;
		}

		public static byte IsFramebuffer(uint framebuffer)
		{
			byte ret = ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[154])(framebuffer);
			return ret;
		}

		public static byte IsProgram(uint program)
		{
			byte ret = ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[155])(program);
			return ret;
		}

		public static byte IsQuery(uint id)
		{
			byte ret = ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[156])(id);
			return ret;
		}

		public static byte IsRenderbuffer(uint renderbuffer)
		{
			byte ret = ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[157])(renderbuffer);
			return ret;
		}

		public static byte IsSampler(uint sampler)
		{
			byte ret = ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[158])(sampler);
			return ret;
		}

		public static byte IsShader(uint shader)
		{
			byte ret = ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[159])(shader);
			return ret;
		}

		public static byte IsSync(GLSync sync)
		{
			byte ret = ((delegate* unmanaged[Cdecl]<GLSync, byte>)funcTable[160])(sync);
			return ret;
		}

		public static byte IsTexture(uint texture)
		{
			byte ret = ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[161])(texture);
			return ret;
		}

		public static byte IsVertexArray(uint array)
		{
			byte ret = ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[162])(array);
			return ret;
		}

		public static void LineWidth(float width)
		{
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[163])(width);
		}

		public static void LinkProgram(uint program)
		{
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[164])(program);
		}

		public static void LogicOp(GLLogicOp opcode)
		{
			((delegate* unmanaged[Cdecl]<GLLogicOp, void>)funcTable[165])(opcode);
		}

		public static void *  MapBuffer(GLBufferTargetARB target, GLBufferAccessARB access)
		{
			void *  ret = ((delegate* unmanaged[Cdecl]<GLBufferTargetARB, GLBufferAccessARB, void * >)funcTable[166])(target, access);
			return ret;
		}

		public static void *  MapBufferRange(GLBufferTargetARB target, nint offset, nint length, GLMapBufferAccessMask access)
		{
			void *  ret = ((delegate* unmanaged[Cdecl]<GLBufferTargetARB, nint, nint, GLMapBufferAccessMask, void * >)funcTable[167])(target, offset, length, access);
			return ret;
		}

		public static void MultiDrawArrays(GLPrimitiveType mode, int first, int count, int drawcount)
		{
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int, int, int, void>)funcTable[168])(mode, first, count, drawcount);
		}

		public static void PixelStoref(GLPixelStoreParameter pname, float param)
		{
			((delegate* unmanaged[Cdecl]<GLPixelStoreParameter, float, void>)funcTable[169])(pname, param);
		}

		public static void PixelStorei(GLPixelStoreParameter pname, int param)
		{
			((delegate* unmanaged[Cdecl]<GLPixelStoreParameter, int, void>)funcTable[170])(pname, param);
		}

		public static void PointParameterf(GLPointParameterNameARB pname, float param)
		{
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, float, void>)funcTable[171])(pname, param);
		}

		public static void PointParameterfv(GLPointParameterNameARB pname, float @params)
		{
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, float, void>)funcTable[172])(pname, @params);
		}

		public static void PointParameteri(GLPointParameterNameARB pname, int param)
		{
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, int, void>)funcTable[173])(pname, param);
		}

		public static void PointParameteriv(GLPointParameterNameARB pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, int, void>)funcTable[174])(pname, @params);
		}

		public static void PointSize(float size)
		{
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[175])(size);
		}

		public static void PolygonMode(GLTriangleFace face, GLPolygonMode mode)
		{
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLPolygonMode, void>)funcTable[176])(face, mode);
		}

		public static void PolygonOffset(float factor, float units)
		{
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[177])(factor, units);
		}

		public static void PrimitiveRestartIndex(uint index)
		{
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[178])(index);
		}

		public static void ProvokingVertex(GLVertexProvokingMode mode)
		{
			((delegate* unmanaged[Cdecl]<GLVertexProvokingMode, void>)funcTable[179])(mode);
		}

		public static void QueryCounter(uint id, GLQueryCounterTarget target)
		{
			((delegate* unmanaged[Cdecl]<uint, GLQueryCounterTarget, void>)funcTable[180])(id, target);
		}

		public static void ReadBuffer(GLReadBufferMode src)
		{
			((delegate* unmanaged[Cdecl]<GLReadBufferMode, void>)funcTable[181])(src);
		}

		public static void RenderbufferStorage(GLRenderbufferTarget target, GLInternalFormat internalformat, int width, int height)
		{
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, GLInternalFormat, int, int, void>)funcTable[182])(target, internalformat, width, height);
		}

		public static void RenderbufferStorageMultisample(GLRenderbufferTarget target, int samples, GLInternalFormat internalformat, int width, int height)
		{
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, int, GLInternalFormat, int, int, void>)funcTable[183])(target, samples, internalformat, width, height);
		}

		public static void SampleCoverage(float value, byte invert)
		{
			((delegate* unmanaged[Cdecl]<float, byte, void>)funcTable[184])(value, invert);
		}

		public static void SampleMaski(uint maskNumber, uint mask)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[185])(maskNumber, mask);
		}

		public static void SamplerParameterIiv(uint sampler, GLSamplerParameterI pname, int param)
		{
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int, void>)funcTable[186])(sampler, pname, param);
		}

		public static void SamplerParameterIuiv(uint sampler, GLSamplerParameterI pname, uint param)
		{
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, uint, void>)funcTable[187])(sampler, pname, param);
		}

		public static void SamplerParameterf(uint sampler, GLSamplerParameterF pname, float param)
		{
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterF, float, void>)funcTable[188])(sampler, pname, param);
		}

		public static void SamplerParameterfv(uint sampler, GLSamplerParameterF pname, float param)
		{
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterF, float, void>)funcTable[189])(sampler, pname, param);
		}

		public static void SamplerParameteri(uint sampler, GLSamplerParameterI pname, int param)
		{
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int, void>)funcTable[190])(sampler, pname, param);
		}

		public static void SamplerParameteriv(uint sampler, GLSamplerParameterI pname, int param)
		{
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int, void>)funcTable[191])(sampler, pname, param);
		}

		public static void Scissor(int x, int y, int width, int height)
		{
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[192])(x, y, width, height);
		}

		public static void ShaderSource(uint shader, int count, byte str, int length)
		{
			((delegate* unmanaged[Cdecl]<uint, int, byte, int, void>)funcTable[193])(shader, count, str, length);
		}

		public static void StencilFunc(GLStencilFunction func, int reference, uint mask)
		{
			((delegate* unmanaged[Cdecl]<GLStencilFunction, int, uint, void>)funcTable[194])(func, reference, mask);
		}

		public static void StencilFuncSeparate(GLTriangleFace face, GLStencilFunction func, int reference, uint mask)
		{
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLStencilFunction, int, uint, void>)funcTable[195])(face, func, reference, mask);
		}

		public static void StencilMask(uint mask)
		{
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[196])(mask);
		}

		public static void StencilMaskSeparate(GLTriangleFace face, uint mask)
		{
			((delegate* unmanaged[Cdecl]<GLTriangleFace, uint, void>)funcTable[197])(face, mask);
		}

		public static void StencilOp(GLStencilOp fail, GLStencilOp zfail, GLStencilOp zpass)
		{
			((delegate* unmanaged[Cdecl]<GLStencilOp, GLStencilOp, GLStencilOp, void>)funcTable[198])(fail, zfail, zpass);
		}

		public static void StencilOpSeparate(GLTriangleFace face, GLStencilOp sfail, GLStencilOp dpfail, GLStencilOp dppass)
		{
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLStencilOp, GLStencilOp, GLStencilOp, void>)funcTable[199])(face, sfail, dpfail, dppass);
		}

		public static void TexBuffer(GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, uint, void>)funcTable[200])(target, internalformat, buffer);
		}

		public static void TexImage2DMultisample(GLTextureTarget target, int samples, GLInternalFormat internalformat, int width, int height, byte fixedsamplelocations)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLInternalFormat, int, int, byte, void>)funcTable[201])(target, samples, internalformat, width, height, fixedsamplelocations);
		}

		public static void TexImage3DMultisample(GLTextureTarget target, int samples, GLInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLInternalFormat, int, int, int, byte, void>)funcTable[202])(target, samples, internalformat, width, height, depth, fixedsamplelocations);
		}

		public static void TexParameterIiv(GLTextureTarget target, GLTextureParameterName pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLTextureParameterName, int, void>)funcTable[203])(target, pname, @params);
		}

		public static void TexParameterIuiv(GLTextureTarget target, GLTextureParameterName pname, uint @params)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLTextureParameterName, uint, void>)funcTable[204])(target, pname, @params);
		}

		public static void TexParameterf(GLTextureTarget target, GLTextureParameterName pname, float param)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLTextureParameterName, float, void>)funcTable[205])(target, pname, param);
		}

		public static void TexParameterfv(GLTextureTarget target, GLTextureParameterName pname, float @params)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLTextureParameterName, float, void>)funcTable[206])(target, pname, @params);
		}

		public static void TexParameteri(GLTextureTarget target, GLTextureParameterName pname, int param)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLTextureParameterName, int, void>)funcTable[207])(target, pname, param);
		}

		public static void TexParameteriv(GLTextureTarget target, GLTextureParameterName pname, int @params)
		{
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLTextureParameterName, int, void>)funcTable[208])(target, pname, @params);
		}

		public static void TransformFeedbackVaryings(uint program, int count, byte varyings, GLTransformFeedbackBufferMode bufferMode)
		{
			((delegate* unmanaged[Cdecl]<uint, int, byte, GLTransformFeedbackBufferMode, void>)funcTable[209])(program, count, varyings, bufferMode);
		}

		public static void Uniform1f(int location, float v0)
		{
			((delegate* unmanaged[Cdecl]<int, float, void>)funcTable[210])(location, v0);
		}

		public static void Uniform1fv(int location, int count, float value)
		{
			((delegate* unmanaged[Cdecl]<int, int, float, void>)funcTable[211])(location, count, value);
		}

		public static void Uniform1i(int location, int v0)
		{
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[212])(location, v0);
		}

		public static void Uniform1iv(int location, int count, int value)
		{
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[213])(location, count, value);
		}

		public static void Uniform1ui(int location, uint v0)
		{
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[214])(location, v0);
		}

		public static void Uniform1uiv(int location, int count, uint value)
		{
			((delegate* unmanaged[Cdecl]<int, int, uint, void>)funcTable[215])(location, count, value);
		}

		public static void Uniform2f(int location, float v0, float v1)
		{
			((delegate* unmanaged[Cdecl]<int, float, float, void>)funcTable[216])(location, v0, v1);
		}

		public static void Uniform2fv(int location, int count, float value)
		{
			((delegate* unmanaged[Cdecl]<int, int, float, void>)funcTable[217])(location, count, value);
		}

		public static void Uniform2i(int location, int v0, int v1)
		{
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[218])(location, v0, v1);
		}

		public static void Uniform2iv(int location, int count, int value)
		{
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[219])(location, count, value);
		}

		public static void Uniform2ui(int location, uint v0, uint v1)
		{
			((delegate* unmanaged[Cdecl]<int, uint, uint, void>)funcTable[220])(location, v0, v1);
		}

		public static void Uniform2uiv(int location, int count, uint value)
		{
			((delegate* unmanaged[Cdecl]<int, int, uint, void>)funcTable[221])(location, count, value);
		}

		public static void Uniform3f(int location, float v0, float v1, float v2)
		{
			((delegate* unmanaged[Cdecl]<int, float, float, float, void>)funcTable[222])(location, v0, v1, v2);
		}

		public static void Uniform3fv(int location, int count, float value)
		{
			((delegate* unmanaged[Cdecl]<int, int, float, void>)funcTable[223])(location, count, value);
		}

		public static void Uniform3i(int location, int v0, int v1, int v2)
		{
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[224])(location, v0, v1, v2);
		}

		public static void Uniform3iv(int location, int count, int value)
		{
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[225])(location, count, value);
		}

		public static void Uniform3ui(int location, uint v0, uint v1, uint v2)
		{
			((delegate* unmanaged[Cdecl]<int, uint, uint, uint, void>)funcTable[226])(location, v0, v1, v2);
		}

		public static void Uniform3uiv(int location, int count, uint value)
		{
			((delegate* unmanaged[Cdecl]<int, int, uint, void>)funcTable[227])(location, count, value);
		}

		public static void Uniform4f(int location, float v0, float v1, float v2, float v3)
		{
			((delegate* unmanaged[Cdecl]<int, float, float, float, float, void>)funcTable[228])(location, v0, v1, v2, v3);
		}

		public static void Uniform4fv(int location, int count, float value)
		{
			((delegate* unmanaged[Cdecl]<int, int, float, void>)funcTable[229])(location, count, value);
		}

		public static void Uniform4i(int location, int v0, int v1, int v2, int v3)
		{
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, void>)funcTable[230])(location, v0, v1, v2, v3);
		}

		public static void Uniform4iv(int location, int count, int value)
		{
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[231])(location, count, value);
		}

		public static void Uniform4ui(int location, uint v0, uint v1, uint v2, uint v3)
		{
			((delegate* unmanaged[Cdecl]<int, uint, uint, uint, uint, void>)funcTable[232])(location, v0, v1, v2, v3);
		}

		public static void Uniform4uiv(int location, int count, uint value)
		{
			((delegate* unmanaged[Cdecl]<int, int, uint, void>)funcTable[233])(location, count, value);
		}

		public static void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[234])(program, uniformBlockIndex, uniformBlockBinding);
		}

		public static void UniformMatrix2fv(int location, int count, byte transpose, float value)
		{
			((delegate* unmanaged[Cdecl]<int, int, byte, float, void>)funcTable[235])(location, count, transpose, value);
		}

		public static void UniformMatrix2x3fv(int location, int count, byte transpose, float value)
		{
			((delegate* unmanaged[Cdecl]<int, int, byte, float, void>)funcTable[236])(location, count, transpose, value);
		}

		public static void UniformMatrix2x4fv(int location, int count, byte transpose, float value)
		{
			((delegate* unmanaged[Cdecl]<int, int, byte, float, void>)funcTable[237])(location, count, transpose, value);
		}

		public static void UniformMatrix3fv(int location, int count, byte transpose, float value)
		{
			((delegate* unmanaged[Cdecl]<int, int, byte, float, void>)funcTable[238])(location, count, transpose, value);
		}

		public static void UniformMatrix3x2fv(int location, int count, byte transpose, float value)
		{
			((delegate* unmanaged[Cdecl]<int, int, byte, float, void>)funcTable[239])(location, count, transpose, value);
		}

		public static void UniformMatrix3x4fv(int location, int count, byte transpose, float value)
		{
			((delegate* unmanaged[Cdecl]<int, int, byte, float, void>)funcTable[240])(location, count, transpose, value);
		}

		public static void UniformMatrix4fv(int location, int count, byte transpose, float value)
		{
			((delegate* unmanaged[Cdecl]<int, int, byte, float, void>)funcTable[241])(location, count, transpose, value);
		}

		public static void UniformMatrix4x2fv(int location, int count, byte transpose, float value)
		{
			((delegate* unmanaged[Cdecl]<int, int, byte, float, void>)funcTable[242])(location, count, transpose, value);
		}

		public static void UniformMatrix4x3fv(int location, int count, byte transpose, float value)
		{
			((delegate* unmanaged[Cdecl]<int, int, byte, float, void>)funcTable[243])(location, count, transpose, value);
		}

		public static byte UnmapBuffer(GLBufferTargetARB target)
		{
			byte ret = ((delegate* unmanaged[Cdecl]<GLBufferTargetARB, byte>)funcTable[244])(target);
			return ret;
		}

		public static void UseProgram(uint program)
		{
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[245])(program);
		}

		public static void ValidateProgram(uint program)
		{
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[246])(program);
		}

		public static void VertexAttrib1d(uint index, double x)
		{
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[247])(index, x);
		}

		public static void VertexAttrib1dv(uint index, double v)
		{
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[248])(index, v);
		}

		public static void VertexAttrib1f(uint index, float x)
		{
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[249])(index, x);
		}

		public static void VertexAttrib1fv(uint index, float v)
		{
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[250])(index, v);
		}

		public static void VertexAttrib1s(uint index, short x)
		{
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[251])(index, x);
		}

		public static void VertexAttrib1sv(uint index, short v)
		{
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[252])(index, v);
		}

		public static void VertexAttrib2d(uint index, double x, double y)
		{
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[253])(index, x, y);
		}

		public static void VertexAttrib2dv(uint index, double v)
		{
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[254])(index, v);
		}

		public static void VertexAttrib2f(uint index, float x, float y)
		{
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[255])(index, x, y);
		}

		public static void VertexAttrib2fv(uint index, float v)
		{
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[256])(index, v);
		}

		public static void VertexAttrib2s(uint index, short x, short y)
		{
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[257])(index, x, y);
		}

		public static void VertexAttrib2sv(uint index, short v)
		{
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[258])(index, v);
		}

		public static void VertexAttrib3d(uint index, double x, double y, double z)
		{
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[259])(index, x, y, z);
		}

		public static void VertexAttrib3dv(uint index, double v)
		{
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[260])(index, v);
		}

		public static void VertexAttrib3f(uint index, float x, float y, float z)
		{
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[261])(index, x, y, z);
		}

		public static void VertexAttrib3fv(uint index, float v)
		{
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[262])(index, v);
		}

		public static void VertexAttrib3s(uint index, short x, short y, short z)
		{
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[263])(index, x, y, z);
		}

		public static void VertexAttrib3sv(uint index, short v)
		{
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[264])(index, v);
		}

		public static void VertexAttrib4Nbv(uint index, sbyte v)
		{
			((delegate* unmanaged[Cdecl]<uint, sbyte, void>)funcTable[265])(index, v);
		}

		public static void VertexAttrib4Niv(uint index, int v)
		{
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[266])(index, v);
		}

		public static void VertexAttrib4Nsv(uint index, short v)
		{
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[267])(index, v);
		}

		public static void VertexAttrib4Nub(uint index, byte x, byte y, byte z, byte w)
		{
			((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)funcTable[268])(index, x, y, z, w);
		}

		public static void VertexAttrib4Nubv(uint index, byte v)
		{
			((delegate* unmanaged[Cdecl]<uint, byte, void>)funcTable[269])(index, v);
		}

		public static void VertexAttrib4Nuiv(uint index, uint v)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[270])(index, v);
		}

		public static void VertexAttrib4Nusv(uint index, ushort v)
		{
			((delegate* unmanaged[Cdecl]<uint, ushort, void>)funcTable[271])(index, v);
		}

		public static void VertexAttrib4bv(uint index, sbyte v)
		{
			((delegate* unmanaged[Cdecl]<uint, sbyte, void>)funcTable[272])(index, v);
		}

		public static void VertexAttrib4d(uint index, double x, double y, double z, double w)
		{
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[273])(index, x, y, z, w);
		}

		public static void VertexAttrib4dv(uint index, double v)
		{
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[274])(index, v);
		}

		public static void VertexAttrib4f(uint index, float x, float y, float z, float w)
		{
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[275])(index, x, y, z, w);
		}

		public static void VertexAttrib4fv(uint index, float v)
		{
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[276])(index, v);
		}

		public static void VertexAttrib4iv(uint index, int v)
		{
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[277])(index, v);
		}

		public static void VertexAttrib4s(uint index, short x, short y, short z, short w)
		{
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[278])(index, x, y, z, w);
		}

		public static void VertexAttrib4sv(uint index, short v)
		{
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[279])(index, v);
		}

		public static void VertexAttrib4ubv(uint index, byte v)
		{
			((delegate* unmanaged[Cdecl]<uint, byte, void>)funcTable[280])(index, v);
		}

		public static void VertexAttrib4uiv(uint index, uint v)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[281])(index, v);
		}

		public static void VertexAttrib4usv(uint index, ushort v)
		{
			((delegate* unmanaged[Cdecl]<uint, ushort, void>)funcTable[282])(index, v);
		}

		public static void VertexAttribDivisor(uint index, uint divisor)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[283])(index, divisor);
		}

		public static void VertexAttribI1i(uint index, int x)
		{
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[284])(index, x);
		}

		public static void VertexAttribI1iv(uint index, int v)
		{
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[285])(index, v);
		}

		public static void VertexAttribI1ui(uint index, uint x)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[286])(index, x);
		}

		public static void VertexAttribI1uiv(uint index, uint v)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[287])(index, v);
		}

		public static void VertexAttribI2i(uint index, int x, int y)
		{
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[288])(index, x, y);
		}

		public static void VertexAttribI2iv(uint index, int v)
		{
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[289])(index, v);
		}

		public static void VertexAttribI2ui(uint index, uint x, uint y)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[290])(index, x, y);
		}

		public static void VertexAttribI2uiv(uint index, uint v)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[291])(index, v);
		}

		public static void VertexAttribI3i(uint index, int x, int y, int z)
		{
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[292])(index, x, y, z);
		}

		public static void VertexAttribI3iv(uint index, int v)
		{
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[293])(index, v);
		}

		public static void VertexAttribI3ui(uint index, uint x, uint y, uint z)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)funcTable[294])(index, x, y, z);
		}

		public static void VertexAttribI3uiv(uint index, uint v)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[295])(index, v);
		}

		public static void VertexAttribI4bv(uint index, sbyte v)
		{
			((delegate* unmanaged[Cdecl]<uint, sbyte, void>)funcTable[296])(index, v);
		}

		public static void VertexAttribI4i(uint index, int x, int y, int z, int w)
		{
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[297])(index, x, y, z, w);
		}

		public static void VertexAttribI4iv(uint index, int v)
		{
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[298])(index, v);
		}

		public static void VertexAttribI4sv(uint index, short v)
		{
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[299])(index, v);
		}

		public static void VertexAttribI4ubv(uint index, byte v)
		{
			((delegate* unmanaged[Cdecl]<uint, byte, void>)funcTable[300])(index, v);
		}

		public static void VertexAttribI4ui(uint index, uint x, uint y, uint z, uint w)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)funcTable[301])(index, x, y, z, w);
		}

		public static void VertexAttribI4uiv(uint index, uint v)
		{
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[302])(index, v);
		}

		public static void VertexAttribI4usv(uint index, ushort v)
		{
			((delegate* unmanaged[Cdecl]<uint, ushort, void>)funcTable[303])(index, v);
		}

		public static void VertexAttribP1ui(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[304])(index, type, normalized, value);
		}

		public static void VertexAttribP1uiv(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[305])(index, type, normalized, value);
		}

		public static void VertexAttribP2ui(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[306])(index, type, normalized, value);
		}

		public static void VertexAttribP2uiv(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[307])(index, type, normalized, value);
		}

		public static void VertexAttribP3ui(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[308])(index, type, normalized, value);
		}

		public static void VertexAttribP3uiv(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[309])(index, type, normalized, value);
		}

		public static void VertexAttribP4ui(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[310])(index, type, normalized, value);
		}

		public static void VertexAttribP4uiv(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[311])(index, type, normalized, value);
		}

		public static void Viewport(int x, int y, int width, int height)
		{
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[312])(x, y, width, height);
		}

		public static void WaitSync(GLSync sync, GLSyncBehaviorFlags flags, ulong timeout)
		{
			((delegate* unmanaged[Cdecl]<GLSync, GLSyncBehaviorFlags, ulong, void>)funcTable[313])(sync, flags, timeout);
		}

	}
}
