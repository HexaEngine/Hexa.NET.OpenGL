// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.ARB
{
	public static unsafe partial class GLARBSampleLocations
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EvaluateDepthValuesARBNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[0])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[0])();
			#endif
		}

		public static void EvaluateDepthValuesARB()
		{
			EvaluateDepthValuesARBNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FramebufferSampleLocationsfvARBNative(GLFramebufferTarget target, uint start, int count, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, uint, int, float*, void>)funcTable[1])(target, start, count, v);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, uint, int, nint, void>)funcTable[1])(target, start, count, (nint)v);
			#endif
		}

		public static void FramebufferSampleLocationsfvARB(GLFramebufferTarget target, uint start, int count, float* v)
		{
			FramebufferSampleLocationsfvARBNative(target, start, count, v);
		}

		public static void FramebufferSampleLocationsfvARB(GLFramebufferTarget target, uint start, int count, Span<float> v)
		{
			fixed (float* pv0 = v)
			{
				FramebufferSampleLocationsfvARBNative(target, start, count, pv0);
			}
		}

		public static void FramebufferSampleLocationsfvARB(GLFramebufferTarget target, uint start, int count, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				FramebufferSampleLocationsfvARBNative(target, start, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferSampleLocationsfvARBNative(uint framebuffer, uint start, int count, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, float*, void>)funcTable[2])(framebuffer, start, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, nint, void>)funcTable[2])(framebuffer, start, count, (nint)v);
			#endif
		}

		public static void NamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, float* v)
		{
			NamedFramebufferSampleLocationsfvARBNative(framebuffer, start, count, v);
		}

		public static void NamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, Span<float> v)
		{
			fixed (float* pv0 = v)
			{
				NamedFramebufferSampleLocationsfvARBNative(framebuffer, start, count, pv0);
			}
		}

		public static void NamedFramebufferSampleLocationsfvARB(uint framebuffer, uint start, int count, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				NamedFramebufferSampleLocationsfvARBNative(framebuffer, start, count, pv0);
			}
		}

	}
}
