// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.ARB
{
	public static unsafe partial class GLArb
	{

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4uivARBNative(uint index, uint* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[681])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[681])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4uivARB(uint index, uint* v)
		{
			VertexAttrib4uivARBNative(index, v);
		}

		public static void VertexAttrib4uivARB(uint index, ref uint v)
		{
			fixed (uint* pv0 = &v)
			{
				VertexAttrib4uivARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4usvARBNative(uint index, ushort* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ushort*, void>)funcTable[682])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[682])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4usvARB(uint index, ushort* v)
		{
			VertexAttrib4usvARBNative(index, v);
		}

		public static void VertexAttrib4usvARB(uint index, ref ushort v)
		{
			fixed (ushort* pv0 = &v)
			{
				VertexAttrib4usvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribBindingNative(uint attribindex, uint bindingindex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[683])(attribindex, bindingindex);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[683])(attribindex, bindingindex);
			#endif
		}

		public static void VertexAttribBinding(uint attribindex, uint bindingindex)
		{
			VertexAttribBindingNative(attribindex, bindingindex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribDivisorARBNative(uint index, uint divisor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[684])(index, divisor);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[684])(index, divisor);
			#endif
		}

		public static void VertexAttribDivisorARB(uint index, uint divisor)
		{
			VertexAttribDivisorARBNative(index, divisor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribFormatNative(uint attribindex, int size, GLVertexAttribType type, byte normalized, uint relativeoffset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribType, byte, uint, void>)funcTable[685])(attribindex, size, type, normalized, relativeoffset);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribType, byte, uint, void>)funcTable[685])(attribindex, size, type, normalized, relativeoffset);
			#endif
		}

		public static void VertexAttribFormat(uint attribindex, int size, GLVertexAttribType type, byte normalized, uint relativeoffset)
		{
			VertexAttribFormatNative(attribindex, size, type, normalized, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribIFormatNative(uint attribindex, int size, GLVertexAttribIType type, uint relativeoffset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribIType, uint, void>)funcTable[686])(attribindex, size, type, relativeoffset);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribIType, uint, void>)funcTable[686])(attribindex, size, type, relativeoffset);
			#endif
		}

		public static void VertexAttribIFormat(uint attribindex, int size, GLVertexAttribIType type, uint relativeoffset)
		{
			VertexAttribIFormatNative(attribindex, size, type, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL1dNative(uint index, double x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[687])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[687])(index, x);
			#endif
		}

		public static void VertexAttribL1d(uint index, double x)
		{
			VertexAttribL1dNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL1dvNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[688])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[688])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL1dv(uint index, double* v)
		{
			VertexAttribL1dvNative(index, v);
		}

		public static void VertexAttribL1dv(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribL1dvNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL1ui64ARBNative(uint index, ulong x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong, void>)funcTable[689])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, ulong, void>)funcTable[689])(index, x);
			#endif
		}

		public static void VertexAttribL1ui64ARB(uint index, ulong x)
		{
			VertexAttribL1ui64ARBNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL1ui64vARBNative(uint index, ulong* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong*, void>)funcTable[690])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[690])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL1ui64vARB(uint index, ulong* v)
		{
			VertexAttribL1ui64vARBNative(index, v);
		}

		public static void VertexAttribL1ui64vARB(uint index, ref ulong v)
		{
			fixed (ulong* pv0 = &v)
			{
				VertexAttribL1ui64vARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL2dNative(uint index, double x, double y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[691])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[691])(index, x, y);
			#endif
		}

		public static void VertexAttribL2d(uint index, double x, double y)
		{
			VertexAttribL2dNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL2dvNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[692])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[692])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL2dv(uint index, double* v)
		{
			VertexAttribL2dvNative(index, v);
		}

		public static void VertexAttribL2dv(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribL2dvNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL3dNative(uint index, double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[693])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[693])(index, x, y, z);
			#endif
		}

		public static void VertexAttribL3d(uint index, double x, double y, double z)
		{
			VertexAttribL3dNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL3dvNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[694])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[694])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL3dv(uint index, double* v)
		{
			VertexAttribL3dvNative(index, v);
		}

		public static void VertexAttribL3dv(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribL3dvNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL4dNative(uint index, double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[695])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[695])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttribL4d(uint index, double x, double y, double z, double w)
		{
			VertexAttribL4dNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL4dvNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[696])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[696])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL4dv(uint index, double* v)
		{
			VertexAttribL4dvNative(index, v);
		}

		public static void VertexAttribL4dv(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribL4dvNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribLFormatNative(uint attribindex, int size, GLVertexAttribLType type, uint relativeoffset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribLType, uint, void>)funcTable[697])(attribindex, size, type, relativeoffset);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribLType, uint, void>)funcTable[697])(attribindex, size, type, relativeoffset);
			#endif
		}

		public static void VertexAttribLFormat(uint attribindex, int size, GLVertexAttribLType type, uint relativeoffset)
		{
			VertexAttribLFormatNative(attribindex, size, type, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribLPointerNative(uint index, int size, GLVertexAttribLType type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribLType, int, void*, void>)funcTable[698])(index, size, type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribLType, int, nint, void>)funcTable[698])(index, size, type, stride, (nint)pointer);
			#endif
		}

		public static void VertexAttribLPointer(uint index, int size, GLVertexAttribLType type, int stride, void* pointer)
		{
			VertexAttribLPointerNative(index, size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP1uiNative(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[699])(index, type, normalized, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[699])(index, type, normalized, value);
			#endif
		}

		public static void VertexAttribP1ui(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			VertexAttribP1uiNative(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP1uivNative(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint*, void>)funcTable[700])(index, type, normalized, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, nint, void>)funcTable[700])(index, type, normalized, (nint)value);
			#endif
		}

		public static void VertexAttribP1uiv(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			VertexAttribP1uivNative(index, type, normalized, value);
		}

		public static void VertexAttribP1uiv(uint index, GLVertexAttribPointerType type, byte normalized, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				VertexAttribP1uivNative(index, type, normalized, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP2uiNative(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[701])(index, type, normalized, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[701])(index, type, normalized, value);
			#endif
		}

		public static void VertexAttribP2ui(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			VertexAttribP2uiNative(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP2uivNative(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint*, void>)funcTable[702])(index, type, normalized, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, nint, void>)funcTable[702])(index, type, normalized, (nint)value);
			#endif
		}

		public static void VertexAttribP2uiv(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			VertexAttribP2uivNative(index, type, normalized, value);
		}

		public static void VertexAttribP2uiv(uint index, GLVertexAttribPointerType type, byte normalized, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				VertexAttribP2uivNative(index, type, normalized, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP3uiNative(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[703])(index, type, normalized, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[703])(index, type, normalized, value);
			#endif
		}

		public static void VertexAttribP3ui(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			VertexAttribP3uiNative(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP3uivNative(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint*, void>)funcTable[704])(index, type, normalized, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, nint, void>)funcTable[704])(index, type, normalized, (nint)value);
			#endif
		}

		public static void VertexAttribP3uiv(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			VertexAttribP3uivNative(index, type, normalized, value);
		}

		public static void VertexAttribP3uiv(uint index, GLVertexAttribPointerType type, byte normalized, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				VertexAttribP3uivNative(index, type, normalized, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP4uiNative(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[705])(index, type, normalized, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint, void>)funcTable[705])(index, type, normalized, value);
			#endif
		}

		public static void VertexAttribP4ui(uint index, GLVertexAttribPointerType type, byte normalized, uint value)
		{
			VertexAttribP4uiNative(index, type, normalized, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribP4uivNative(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, uint*, void>)funcTable[706])(index, type, normalized, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerType, byte, nint, void>)funcTable[706])(index, type, normalized, (nint)value);
			#endif
		}

		public static void VertexAttribP4uiv(uint index, GLVertexAttribPointerType type, byte normalized, uint* value)
		{
			VertexAttribP4uivNative(index, type, normalized, value);
		}

		public static void VertexAttribP4uiv(uint index, GLVertexAttribPointerType type, byte normalized, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				VertexAttribP4uivNative(index, type, normalized, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribPointerARBNative(uint index, int size, GLVertexAttribPointerType type, byte normalized, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribPointerType, byte, int, void*, void>)funcTable[707])(index, size, type, normalized, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribPointerType, byte, int, nint, void>)funcTable[707])(index, size, type, normalized, stride, (nint)pointer);
			#endif
		}

		public static void VertexAttribPointerARB(uint index, int size, GLVertexAttribPointerType type, byte normalized, int stride, void* pointer)
		{
			VertexAttribPointerARBNative(index, size, type, normalized, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexBindingDivisorNative(uint bindingindex, uint divisor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[708])(bindingindex, divisor);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[708])(bindingindex, divisor);
			#endif
		}

		public static void VertexBindingDivisor(uint bindingindex, uint divisor)
		{
			VertexBindingDivisorNative(bindingindex, divisor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexBlendARBNative(int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[709])(count);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[709])(count);
			#endif
		}

		public static void VertexBlendARB(int count)
		{
			VertexBlendARBNative(count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexP2uiNative(GLVertexPointerType type, uint value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexPointerType, uint, void>)funcTable[710])(type, value);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexPointerType, uint, void>)funcTable[710])(type, value);
			#endif
		}

		public static void VertexP2ui(GLVertexPointerType type, uint value)
		{
			VertexP2uiNative(type, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexP2uivNative(GLVertexPointerType type, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexPointerType, uint*, void>)funcTable[711])(type, value);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexPointerType, nint, void>)funcTable[711])(type, (nint)value);
			#endif
		}

		public static void VertexP2uiv(GLVertexPointerType type, uint* value)
		{
			VertexP2uivNative(type, value);
		}

		public static void VertexP2uiv(GLVertexPointerType type, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				VertexP2uivNative(type, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexP3uiNative(GLVertexPointerType type, uint value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexPointerType, uint, void>)funcTable[712])(type, value);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexPointerType, uint, void>)funcTable[712])(type, value);
			#endif
		}

		public static void VertexP3ui(GLVertexPointerType type, uint value)
		{
			VertexP3uiNative(type, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexP3uivNative(GLVertexPointerType type, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexPointerType, uint*, void>)funcTable[713])(type, value);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexPointerType, nint, void>)funcTable[713])(type, (nint)value);
			#endif
		}

		public static void VertexP3uiv(GLVertexPointerType type, uint* value)
		{
			VertexP3uivNative(type, value);
		}

		public static void VertexP3uiv(GLVertexPointerType type, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				VertexP3uivNative(type, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexP4uiNative(GLVertexPointerType type, uint value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexPointerType, uint, void>)funcTable[714])(type, value);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexPointerType, uint, void>)funcTable[714])(type, value);
			#endif
		}

		public static void VertexP4ui(GLVertexPointerType type, uint value)
		{
			VertexP4uiNative(type, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexP4uivNative(GLVertexPointerType type, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexPointerType, uint*, void>)funcTable[715])(type, value);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexPointerType, nint, void>)funcTable[715])(type, (nint)value);
			#endif
		}

		public static void VertexP4uiv(GLVertexPointerType type, uint* value)
		{
			VertexP4uivNative(type, value);
		}

		public static void VertexP4uiv(GLVertexPointerType type, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				VertexP4uivNative(type, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ViewportArrayvNative(uint first, int count, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[716])(first, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[716])(first, count, (nint)v);
			#endif
		}

		public static void ViewportArrayv(uint first, int count, float* v)
		{
			ViewportArrayvNative(first, count, v);
		}

		public static void ViewportArrayv(uint first, int count, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				ViewportArrayvNative(first, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ViewportIndexedfNative(uint index, float x, float y, float w, float h)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[717])(index, x, y, w, h);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[717])(index, x, y, w, h);
			#endif
		}

		public static void ViewportIndexedf(uint index, float x, float y, float w, float h)
		{
			ViewportIndexedfNative(index, x, y, w, h);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ViewportIndexedfvNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[718])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[718])(index, (nint)v);
			#endif
		}

		public static void ViewportIndexedfv(uint index, float* v)
		{
			ViewportIndexedfvNative(index, v);
		}

		public static void ViewportIndexedfv(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				ViewportIndexedfvNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WaitSyncNative(GLSync sync, GLSyncBehaviorFlags flags, ulong timeout)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLSync, GLSyncBehaviorFlags, ulong, void>)funcTable[719])(sync, flags, timeout);
			#else
			((delegate* unmanaged[Cdecl]<GLSync, GLSyncBehaviorFlags, ulong, void>)funcTable[719])(sync, flags, timeout);
			#endif
		}

		public static void WaitSync(GLSync sync, GLSyncBehaviorFlags flags, ulong timeout)
		{
			WaitSyncNative(sync, flags, timeout);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightPointerARBNative(int size, GLWeightPointerTypeARB type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, GLWeightPointerTypeARB, int, void*, void>)funcTable[720])(size, type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, GLWeightPointerTypeARB, int, nint, void>)funcTable[720])(size, type, stride, (nint)pointer);
			#endif
		}

		public static void WeightPointerARB(int size, GLWeightPointerTypeARB type, int stride, void* pointer)
		{
			WeightPointerARBNative(size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightbvARBNative(int size, sbyte* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, sbyte*, void>)funcTable[721])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[721])(size, (nint)weights);
			#endif
		}

		public static void WeightbvARB(int size, sbyte* weights)
		{
			WeightbvARBNative(size, weights);
		}

		public static void WeightbvARB(int size, ref sbyte weights)
		{
			fixed (sbyte* pweights0 = &weights)
			{
				WeightbvARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightdvARBNative(int size, double* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, double*, void>)funcTable[722])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[722])(size, (nint)weights);
			#endif
		}

		public static void WeightdvARB(int size, double* weights)
		{
			WeightdvARBNative(size, weights);
		}

		public static void WeightdvARB(int size, ref double weights)
		{
			fixed (double* pweights0 = &weights)
			{
				WeightdvARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightfvARBNative(int size, float* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float*, void>)funcTable[723])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[723])(size, (nint)weights);
			#endif
		}

		public static void WeightfvARB(int size, float* weights)
		{
			WeightfvARBNative(size, weights);
		}

		public static void WeightfvARB(int size, ref float weights)
		{
			fixed (float* pweights0 = &weights)
			{
				WeightfvARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightivARBNative(int size, int* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int*, void>)funcTable[724])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[724])(size, (nint)weights);
			#endif
		}

		public static void WeightivARB(int size, int* weights)
		{
			WeightivARBNative(size, weights);
		}

		public static void WeightivARB(int size, ref int weights)
		{
			fixed (int* pweights0 = &weights)
			{
				WeightivARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightsvARBNative(int size, short* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, short*, void>)funcTable[725])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[725])(size, (nint)weights);
			#endif
		}

		public static void WeightsvARB(int size, short* weights)
		{
			WeightsvARBNative(size, weights);
		}

		public static void WeightsvARB(int size, ref short weights)
		{
			fixed (short* pweights0 = &weights)
			{
				WeightsvARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightubvARBNative(int size, byte* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, byte*, void>)funcTable[726])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[726])(size, (nint)weights);
			#endif
		}

		public static void WeightubvARB(int size, byte* weights)
		{
			WeightubvARBNative(size, weights);
		}

		public static void WeightubvARB(int size, string weights)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (weights != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(weights);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(weights, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			WeightubvARBNative(size, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void WeightubvARB(int size, ReadOnlySpan<byte> weights)
		{
			fixed (byte* pweights0 = weights)
			{
				WeightubvARBNative(size, pweights0);
			}
		}

		public static void WeightubvARB(int size, ref byte weights)
		{
			fixed (byte* pweights0 = &weights)
			{
				WeightubvARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightuivARBNative(int size, uint* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[727])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[727])(size, (nint)weights);
			#endif
		}

		public static void WeightuivARB(int size, uint* weights)
		{
			WeightuivARBNative(size, weights);
		}

		public static void WeightuivARB(int size, ref uint weights)
		{
			fixed (uint* pweights0 = &weights)
			{
				WeightuivARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightusvARBNative(int size, ushort* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ushort*, void>)funcTable[728])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[728])(size, (nint)weights);
			#endif
		}

		public static void WeightusvARB(int size, ushort* weights)
		{
			WeightusvARBNative(size, weights);
		}

		public static void WeightusvARB(int size, ref ushort weights)
		{
			fixed (ushort* pweights0 = &weights)
			{
				WeightusvARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2dARBNative(double x, double y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[729])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[729])(x, y);
			#endif
		}

		public static void WindowPos2dARB(double x, double y)
		{
			WindowPos2dARBNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2dvARBNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[730])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[730])((nint)v);
			#endif
		}

		public static void WindowPos2dvARB(double* v)
		{
			WindowPos2dvARBNative(v);
		}

		public static void WindowPos2dvARB(ref double v)
		{
			fixed (double* pv0 = &v)
			{
				WindowPos2dvARBNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2fARBNative(float x, float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[731])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[731])(x, y);
			#endif
		}

		public static void WindowPos2fARB(float x, float y)
		{
			WindowPos2fARBNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2fvARBNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[732])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[732])((nint)v);
			#endif
		}

		public static void WindowPos2fvARB(float* v)
		{
			WindowPos2fvARBNative(v);
		}

		public static void WindowPos2fvARB(ref float v)
		{
			fixed (float* pv0 = &v)
			{
				WindowPos2fvARBNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2iARBNative(int x, int y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[733])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[733])(x, y);
			#endif
		}

		public static void WindowPos2iARB(int x, int y)
		{
			WindowPos2iARBNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2ivARBNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[734])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[734])((nint)v);
			#endif
		}

		public static void WindowPos2ivARB(int* v)
		{
			WindowPos2ivARBNative(v);
		}

		public static void WindowPos2ivARB(ref int v)
		{
			fixed (int* pv0 = &v)
			{
				WindowPos2ivARBNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2sARBNative(short x, short y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[735])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[735])(x, y);
			#endif
		}

		public static void WindowPos2sARB(short x, short y)
		{
			WindowPos2sARBNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2svARBNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[736])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[736])((nint)v);
			#endif
		}

		public static void WindowPos2svARB(short* v)
		{
			WindowPos2svARBNative(v);
		}

		public static void WindowPos2svARB(ref short v)
		{
			fixed (short* pv0 = &v)
			{
				WindowPos2svARBNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3dARBNative(double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[737])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[737])(x, y, z);
			#endif
		}

		public static void WindowPos3dARB(double x, double y, double z)
		{
			WindowPos3dARBNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3dvARBNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[738])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[738])((nint)v);
			#endif
		}

		public static void WindowPos3dvARB(double* v)
		{
			WindowPos3dvARBNative(v);
		}

		public static void WindowPos3dvARB(ref double v)
		{
			fixed (double* pv0 = &v)
			{
				WindowPos3dvARBNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3fARBNative(float x, float y, float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[739])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[739])(x, y, z);
			#endif
		}

		public static void WindowPos3fARB(float x, float y, float z)
		{
			WindowPos3fARBNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3fvARBNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[740])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[740])((nint)v);
			#endif
		}

		public static void WindowPos3fvARB(float* v)
		{
			WindowPos3fvARBNative(v);
		}

		public static void WindowPos3fvARB(ref float v)
		{
			fixed (float* pv0 = &v)
			{
				WindowPos3fvARBNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3iARBNative(int x, int y, int z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[741])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[741])(x, y, z);
			#endif
		}

		public static void WindowPos3iARB(int x, int y, int z)
		{
			WindowPos3iARBNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3ivARBNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[742])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[742])((nint)v);
			#endif
		}

		public static void WindowPos3ivARB(int* v)
		{
			WindowPos3ivARBNative(v);
		}

		public static void WindowPos3ivARB(ref int v)
		{
			fixed (int* pv0 = &v)
			{
				WindowPos3ivARBNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3sARBNative(short x, short y, short z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[743])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[743])(x, y, z);
			#endif
		}

		public static void WindowPos3sARB(short x, short y, short z)
		{
			WindowPos3sARBNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3svARBNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[744])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[744])((nint)v);
			#endif
		}

		public static void WindowPos3svARB(short* v)
		{
			WindowPos3svARBNative(v);
		}

		public static void WindowPos3svARB(ref short v)
		{
			fixed (short* pv0 = &v)
			{
				WindowPos3svARBNative(pv0);
			}
		}

	}
}
