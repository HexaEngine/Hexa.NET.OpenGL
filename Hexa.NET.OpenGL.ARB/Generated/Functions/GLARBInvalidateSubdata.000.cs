// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.ARB
{
	public static unsafe partial class GLARBInvalidateSubdata
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void InvalidateBufferDataNative(uint buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[0])(buffer);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[0])(buffer);
			#endif
		}

		public static void InvalidateBufferData(uint buffer)
		{
			InvalidateBufferDataNative(buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void InvalidateBufferSubDataNative(uint buffer, nint offset, nint length)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, nint, nint, void>)funcTable[1])(buffer, offset, length);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, nint, void>)funcTable[1])(buffer, offset, length);
			#endif
		}

		public static void InvalidateBufferSubData(uint buffer, nint offset, nint length)
		{
			InvalidateBufferSubDataNative(buffer, offset, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void InvalidateFramebufferNative(GLFramebufferTarget target, int numAttachments, GLInvalidateFramebufferAttachment attachments)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, int, GLInvalidateFramebufferAttachment, void>)funcTable[2])(target, numAttachments, attachments);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, int, GLInvalidateFramebufferAttachment, void>)funcTable[2])(target, numAttachments, attachments);
			#endif
		}

		public static void InvalidateFramebuffer(GLFramebufferTarget target, int numAttachments, GLInvalidateFramebufferAttachment attachments)
		{
			InvalidateFramebufferNative(target, numAttachments, attachments);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void InvalidateSubFramebufferNative(GLFramebufferTarget target, int numAttachments, GLInvalidateFramebufferAttachment attachments, int x, int y, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, int, GLInvalidateFramebufferAttachment, int, int, int, int, void>)funcTable[3])(target, numAttachments, attachments, x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, int, GLInvalidateFramebufferAttachment, int, int, int, int, void>)funcTable[3])(target, numAttachments, attachments, x, y, width, height);
			#endif
		}

		public static void InvalidateSubFramebuffer(GLFramebufferTarget target, int numAttachments, GLInvalidateFramebufferAttachment attachments, int x, int y, int width, int height)
		{
			InvalidateSubFramebufferNative(target, numAttachments, attachments, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void InvalidateTexImageNative(uint texture, int level)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[4])(texture, level);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[4])(texture, level);
			#endif
		}

		public static void InvalidateTexImage(uint texture, int level)
		{
			InvalidateTexImageNative(texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void InvalidateTexSubImageNative(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, void>)funcTable[5])(texture, level, xoffset, yoffset, zoffset, width, height, depth);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, void>)funcTable[5])(texture, level, xoffset, yoffset, zoffset, width, height, depth);
			#endif
		}

		public static void InvalidateTexSubImage(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth)
		{
			InvalidateTexSubImageNative(texture, level, xoffset, yoffset, zoffset, width, height, depth);
		}

	}
}
