// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.ARB
{
	public static unsafe partial class GLARBMultitexture
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ActiveTextureARBNative(GLTextureUnit texture)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, void>)funcTable[0])(texture);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, void>)funcTable[0])(texture);
			#endif
		}

		public static void ActiveTextureARB(GLTextureUnit texture)
		{
			ActiveTextureARBNative(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ClientActiveTextureARBNative(GLTextureUnit texture)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, void>)funcTable[1])(texture);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, void>)funcTable[1])(texture);
			#endif
		}

		public static void ClientActiveTextureARB(GLTextureUnit texture)
		{
			ClientActiveTextureARBNative(texture);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord1dARBNative(GLTextureUnit target, double s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double, void>)funcTable[2])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double, void>)funcTable[2])(target, s);
			#endif
		}

		public static void MultiTexCoord1dARB(GLTextureUnit target, double s)
		{
			MultiTexCoord1dARBNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord1dvARBNative(GLTextureUnit target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double*, void>)funcTable[3])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[3])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord1dvARB(GLTextureUnit target, double* v)
		{
			MultiTexCoord1dvARBNative(target, v);
		}

		public static void MultiTexCoord1dvARB(GLTextureUnit target, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				MultiTexCoord1dvARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord1fARBNative(GLTextureUnit target, float s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float, void>)funcTable[4])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float, void>)funcTable[4])(target, s);
			#endif
		}

		public static void MultiTexCoord1fARB(GLTextureUnit target, float s)
		{
			MultiTexCoord1fARBNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord1fvARBNative(GLTextureUnit target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float*, void>)funcTable[5])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[5])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord1fvARB(GLTextureUnit target, float* v)
		{
			MultiTexCoord1fvARBNative(target, v);
		}

		public static void MultiTexCoord1fvARB(GLTextureUnit target, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				MultiTexCoord1fvARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord1iARBNative(GLTextureUnit target, int s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, void>)funcTable[6])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, void>)funcTable[6])(target, s);
			#endif
		}

		public static void MultiTexCoord1iARB(GLTextureUnit target, int s)
		{
			MultiTexCoord1iARBNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord1ivARBNative(GLTextureUnit target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int*, void>)funcTable[7])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[7])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord1ivARB(GLTextureUnit target, int* v)
		{
			MultiTexCoord1ivARBNative(target, v);
		}

		public static void MultiTexCoord1ivARB(GLTextureUnit target, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				MultiTexCoord1ivARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord1sARBNative(GLTextureUnit target, short s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short, void>)funcTable[8])(target, s);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short, void>)funcTable[8])(target, s);
			#endif
		}

		public static void MultiTexCoord1sARB(GLTextureUnit target, short s)
		{
			MultiTexCoord1sARBNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord1svARBNative(GLTextureUnit target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short*, void>)funcTable[9])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[9])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord1svARB(GLTextureUnit target, short* v)
		{
			MultiTexCoord1svARBNative(target, v);
		}

		public static void MultiTexCoord1svARB(GLTextureUnit target, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				MultiTexCoord1svARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2dARBNative(GLTextureUnit target, double s, double t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double, double, void>)funcTable[10])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double, double, void>)funcTable[10])(target, s, t);
			#endif
		}

		public static void MultiTexCoord2dARB(GLTextureUnit target, double s, double t)
		{
			MultiTexCoord2dARBNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2dvARBNative(GLTextureUnit target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double*, void>)funcTable[11])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[11])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord2dvARB(GLTextureUnit target, double* v)
		{
			MultiTexCoord2dvARBNative(target, v);
		}

		public static void MultiTexCoord2dvARB(GLTextureUnit target, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				MultiTexCoord2dvARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2fARBNative(GLTextureUnit target, float s, float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float, float, void>)funcTable[12])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float, float, void>)funcTable[12])(target, s, t);
			#endif
		}

		public static void MultiTexCoord2fARB(GLTextureUnit target, float s, float t)
		{
			MultiTexCoord2fARBNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2fvARBNative(GLTextureUnit target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float*, void>)funcTable[13])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[13])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord2fvARB(GLTextureUnit target, float* v)
		{
			MultiTexCoord2fvARBNative(target, v);
		}

		public static void MultiTexCoord2fvARB(GLTextureUnit target, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				MultiTexCoord2fvARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2iARBNative(GLTextureUnit target, int s, int t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, void>)funcTable[14])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, void>)funcTable[14])(target, s, t);
			#endif
		}

		public static void MultiTexCoord2iARB(GLTextureUnit target, int s, int t)
		{
			MultiTexCoord2iARBNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2ivARBNative(GLTextureUnit target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int*, void>)funcTable[15])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[15])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord2ivARB(GLTextureUnit target, int* v)
		{
			MultiTexCoord2ivARBNative(target, v);
		}

		public static void MultiTexCoord2ivARB(GLTextureUnit target, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				MultiTexCoord2ivARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2sARBNative(GLTextureUnit target, short s, short t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short, short, void>)funcTable[16])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short, short, void>)funcTable[16])(target, s, t);
			#endif
		}

		public static void MultiTexCoord2sARB(GLTextureUnit target, short s, short t)
		{
			MultiTexCoord2sARBNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2svARBNative(GLTextureUnit target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short*, void>)funcTable[17])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[17])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord2svARB(GLTextureUnit target, short* v)
		{
			MultiTexCoord2svARBNative(target, v);
		}

		public static void MultiTexCoord2svARB(GLTextureUnit target, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				MultiTexCoord2svARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3dARBNative(GLTextureUnit target, double s, double t, double r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double, double, double, void>)funcTable[18])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double, double, double, void>)funcTable[18])(target, s, t, r);
			#endif
		}

		public static void MultiTexCoord3dARB(GLTextureUnit target, double s, double t, double r)
		{
			MultiTexCoord3dARBNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3dvARBNative(GLTextureUnit target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double*, void>)funcTable[19])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[19])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord3dvARB(GLTextureUnit target, double* v)
		{
			MultiTexCoord3dvARBNative(target, v);
		}

		public static void MultiTexCoord3dvARB(GLTextureUnit target, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				MultiTexCoord3dvARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3fARBNative(GLTextureUnit target, float s, float t, float r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float, float, float, void>)funcTable[20])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float, float, float, void>)funcTable[20])(target, s, t, r);
			#endif
		}

		public static void MultiTexCoord3fARB(GLTextureUnit target, float s, float t, float r)
		{
			MultiTexCoord3fARBNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3fvARBNative(GLTextureUnit target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float*, void>)funcTable[21])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[21])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord3fvARB(GLTextureUnit target, float* v)
		{
			MultiTexCoord3fvARBNative(target, v);
		}

		public static void MultiTexCoord3fvARB(GLTextureUnit target, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				MultiTexCoord3fvARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3iARBNative(GLTextureUnit target, int s, int t, int r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, int, void>)funcTable[22])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, int, void>)funcTable[22])(target, s, t, r);
			#endif
		}

		public static void MultiTexCoord3iARB(GLTextureUnit target, int s, int t, int r)
		{
			MultiTexCoord3iARBNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3ivARBNative(GLTextureUnit target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int*, void>)funcTable[23])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[23])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord3ivARB(GLTextureUnit target, int* v)
		{
			MultiTexCoord3ivARBNative(target, v);
		}

		public static void MultiTexCoord3ivARB(GLTextureUnit target, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				MultiTexCoord3ivARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3sARBNative(GLTextureUnit target, short s, short t, short r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short, short, short, void>)funcTable[24])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short, short, short, void>)funcTable[24])(target, s, t, r);
			#endif
		}

		public static void MultiTexCoord3sARB(GLTextureUnit target, short s, short t, short r)
		{
			MultiTexCoord3sARBNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3svARBNative(GLTextureUnit target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short*, void>)funcTable[25])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[25])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord3svARB(GLTextureUnit target, short* v)
		{
			MultiTexCoord3svARBNative(target, v);
		}

		public static void MultiTexCoord3svARB(GLTextureUnit target, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				MultiTexCoord3svARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4dARBNative(GLTextureUnit target, double s, double t, double r, double q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double, double, double, double, void>)funcTable[26])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double, double, double, double, void>)funcTable[26])(target, s, t, r, q);
			#endif
		}

		public static void MultiTexCoord4dARB(GLTextureUnit target, double s, double t, double r, double q)
		{
			MultiTexCoord4dARBNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4dvARBNative(GLTextureUnit target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double*, void>)funcTable[27])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[27])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord4dvARB(GLTextureUnit target, double* v)
		{
			MultiTexCoord4dvARBNative(target, v);
		}

		public static void MultiTexCoord4dvARB(GLTextureUnit target, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				MultiTexCoord4dvARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4fARBNative(GLTextureUnit target, float s, float t, float r, float q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float, float, float, float, void>)funcTable[28])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float, float, float, float, void>)funcTable[28])(target, s, t, r, q);
			#endif
		}

		public static void MultiTexCoord4fARB(GLTextureUnit target, float s, float t, float r, float q)
		{
			MultiTexCoord4fARBNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4fvARBNative(GLTextureUnit target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float*, void>)funcTable[29])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[29])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord4fvARB(GLTextureUnit target, float* v)
		{
			MultiTexCoord4fvARBNative(target, v);
		}

		public static void MultiTexCoord4fvARB(GLTextureUnit target, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				MultiTexCoord4fvARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4iARBNative(GLTextureUnit target, int s, int t, int r, int q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, int, int, void>)funcTable[30])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, int, int, void>)funcTable[30])(target, s, t, r, q);
			#endif
		}

		public static void MultiTexCoord4iARB(GLTextureUnit target, int s, int t, int r, int q)
		{
			MultiTexCoord4iARBNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4ivARBNative(GLTextureUnit target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int*, void>)funcTable[31])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[31])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord4ivARB(GLTextureUnit target, int* v)
		{
			MultiTexCoord4ivARBNative(target, v);
		}

		public static void MultiTexCoord4ivARB(GLTextureUnit target, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				MultiTexCoord4ivARBNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4sARBNative(GLTextureUnit target, short s, short t, short r, short q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short, short, short, short, void>)funcTable[32])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short, short, short, short, void>)funcTable[32])(target, s, t, r, q);
			#endif
		}

		public static void MultiTexCoord4sARB(GLTextureUnit target, short s, short t, short r, short q)
		{
			MultiTexCoord4sARBNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4svARBNative(GLTextureUnit target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short*, void>)funcTable[33])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[33])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord4svARB(GLTextureUnit target, short* v)
		{
			MultiTexCoord4svARBNative(target, v);
		}

		public static void MultiTexCoord4svARB(GLTextureUnit target, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				MultiTexCoord4svARBNative(target, pv0);
			}
		}

	}
}
