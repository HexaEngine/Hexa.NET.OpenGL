// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.ARB
{
	public static unsafe partial class GLARBVertexShader
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BindAttribLocationARBNative(uint programObj, uint index, byte* name)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, byte*, void>)funcTable[0])(programObj, index, name);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, void>)funcTable[0])(programObj, index, (nint)name);
			#endif
		}

		public static void BindAttribLocationARB(uint programObj, uint index, byte* name)
		{
			BindAttribLocationARBNative(programObj, index, name);
		}

		public static void BindAttribLocationARB(uint programObj, uint index, string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BindAttribLocationARBNative(programObj, index, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void BindAttribLocationARB(uint programObj, uint index, ReadOnlySpan<byte> name)
		{
			fixed (byte* pname0 = name)
			{
				BindAttribLocationARBNative(programObj, index, pname0);
			}
		}

		public static void BindAttribLocationARB(uint programObj, uint index, ref byte name)
		{
			fixed (byte* pname0 = &name)
			{
				BindAttribLocationARBNative(programObj, index, pname0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DisableVertexAttribArrayARBNative(uint index)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1])(index);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1])(index);
			#endif
		}

		public static void DisableVertexAttribArrayARB(uint index)
		{
			DisableVertexAttribArrayARBNative(index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EnableVertexAttribArrayARBNative(uint index)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[2])(index);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[2])(index);
			#endif
		}

		public static void EnableVertexAttribArrayARB(uint index)
		{
			EnableVertexAttribArrayARBNative(index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetActiveAttribARBNative(uint programObj, uint index, int maxLength, int* length, int* size, GLAttributeType type, byte* name)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, int*, int*, GLAttributeType, byte*, void>)funcTable[3])(programObj, index, maxLength, length, size, type, name);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, nint, nint, GLAttributeType, nint, void>)funcTable[3])(programObj, index, maxLength, (nint)length, (nint)size, type, (nint)name);
			#endif
		}

		public static void GetActiveAttribARB(uint programObj, uint index, int maxLength, int* length, int* size, GLAttributeType type, byte* name)
		{
			GetActiveAttribARBNative(programObj, index, maxLength, length, size, type, name);
		}

		public static void GetActiveAttribARB(uint programObj, uint index, int maxLength, ref int length, int* size, GLAttributeType type, byte* name)
		{
			fixed (int* plength0 = &length)
			{
				GetActiveAttribARBNative(programObj, index, maxLength, plength0, size, type, name);
			}
		}

		public static void GetActiveAttribARB(uint programObj, uint index, int maxLength, int* length, ref int size, GLAttributeType type, byte* name)
		{
			fixed (int* psize0 = &size)
			{
				GetActiveAttribARBNative(programObj, index, maxLength, length, psize0, type, name);
			}
		}

		public static void GetActiveAttribARB(uint programObj, uint index, int maxLength, ref int length, ref int size, GLAttributeType type, byte* name)
		{
			fixed (int* plength0 = &length)
			{
				fixed (int* psize1 = &size)
				{
					GetActiveAttribARBNative(programObj, index, maxLength, plength0, psize1, type, name);
				}
			}
		}

		public static void GetActiveAttribARB(uint programObj, uint index, int maxLength, int* length, int* size, GLAttributeType type, string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			GetActiveAttribARBNative(programObj, index, maxLength, length, size, type, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void GetActiveAttribARB(uint programObj, uint index, int maxLength, int* length, int* size, GLAttributeType type, ReadOnlySpan<byte> name)
		{
			fixed (byte* pname0 = name)
			{
				GetActiveAttribARBNative(programObj, index, maxLength, length, size, type, pname0);
			}
		}

		public static void GetActiveAttribARB(uint programObj, uint index, int maxLength, int* length, int* size, GLAttributeType type, ref byte name)
		{
			fixed (byte* pname0 = &name)
			{
				GetActiveAttribARBNative(programObj, index, maxLength, length, size, type, pname0);
			}
		}

		public static void GetActiveAttribARB(uint programObj, uint index, int maxLength, ref int length, int* size, GLAttributeType type, ref byte name)
		{
			fixed (int* plength0 = &length)
			{
				fixed (byte* pname1 = &name)
				{
					GetActiveAttribARBNative(programObj, index, maxLength, plength0, size, type, pname1);
				}
			}
		}

		public static void GetActiveAttribARB(uint programObj, uint index, int maxLength, int* length, ref int size, GLAttributeType type, ref byte name)
		{
			fixed (int* psize0 = &size)
			{
				fixed (byte* pname1 = &name)
				{
					GetActiveAttribARBNative(programObj, index, maxLength, length, psize0, type, pname1);
				}
			}
		}

		public static void GetActiveAttribARB(uint programObj, uint index, int maxLength, ref int length, ref int size, GLAttributeType type, ref byte name)
		{
			fixed (int* plength0 = &length)
			{
				fixed (int* psize1 = &size)
				{
					fixed (byte* pname2 = &name)
					{
						GetActiveAttribARBNative(programObj, index, maxLength, plength0, psize1, type, pname2);
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetAttribLocationARBNative(uint programObj, byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte*, int>)funcTable[4])(programObj, name);
			#else
			return (int)((delegate* unmanaged[Cdecl]<uint, nint, int>)funcTable[4])(programObj, (nint)name);
			#endif
		}

		public static int GetAttribLocationARB(uint programObj, byte* name)
		{
			int ret = GetAttribLocationARBNative(programObj, name);
			return ret;
		}

		public static int GetAttribLocationARB(uint programObj, string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			int ret = GetAttribLocationARBNative(programObj, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static int GetAttribLocationARB(uint programObj, ReadOnlySpan<byte> name)
		{
			fixed (byte* pname0 = name)
			{
				int ret = GetAttribLocationARBNative(programObj, pname0);
				return ret;
			}
		}

		public static int GetAttribLocationARB(uint programObj, ref byte name)
		{
			fixed (byte* pname0 = &name)
			{
				int ret = GetAttribLocationARBNative(programObj, pname0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribPointervARBNative(uint index, GLVertexAttribPointerPropertyARB pname, void** pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerPropertyARB, void**, void>)funcTable[5])(index, pname, pointer);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPointerPropertyARB, nint, void>)funcTable[5])(index, pname, (nint)pointer);
			#endif
		}

		public static void GetVertexAttribPointervARB(uint index, GLVertexAttribPointerPropertyARB pname, void** pointer)
		{
			GetVertexAttribPointervARBNative(index, pname, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribdvARBNative(uint index, GLVertexAttribPropertyARB pname, double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPropertyARB, double*, void>)funcTable[6])(index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPropertyARB, nint, void>)funcTable[6])(index, pname, (nint)@params);
			#endif
		}

		public static void GetVertexAttribdvARB(uint index, GLVertexAttribPropertyARB pname, double* @params)
		{
			GetVertexAttribdvARBNative(index, pname, @params);
		}

		public static void GetVertexAttribdvARB(uint index, GLVertexAttribPropertyARB pname, ref double @params)
		{
			fixed (double* pparams0 = &@params)
			{
				GetVertexAttribdvARBNative(index, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribfvARBNative(uint index, GLVertexAttribPropertyARB pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPropertyARB, float*, void>)funcTable[7])(index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPropertyARB, nint, void>)funcTable[7])(index, pname, (nint)@params);
			#endif
		}

		public static void GetVertexAttribfvARB(uint index, GLVertexAttribPropertyARB pname, float* @params)
		{
			GetVertexAttribfvARBNative(index, pname, @params);
		}

		public static void GetVertexAttribfvARB(uint index, GLVertexAttribPropertyARB pname, out float @params)
		{
			float pparams;
			GetVertexAttribfvARBNative(index, pname, &pparams);
			@params = pparams;
		}

		public static void GetVertexAttribfvARB(uint index, GLVertexAttribPropertyARB pname, Span<float> @params)
		{
			fixed (float* pparams = @params)
			{
				GetVertexAttribfvARBNative(index, pname, pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribivARBNative(uint index, GLVertexAttribPropertyARB pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPropertyARB, int*, void>)funcTable[8])(index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribPropertyARB, nint, void>)funcTable[8])(index, pname, (nint)@params);
			#endif
		}

		public static void GetVertexAttribivARB(uint index, GLVertexAttribPropertyARB pname, int* @params)
		{
			GetVertexAttribivARBNative(index, pname, @params);
		}

		public static void GetVertexAttribivARB(uint index, GLVertexAttribPropertyARB pname, out int @params)
		{
			int pparams;
			GetVertexAttribivARBNative(index, pname, &pparams);
			@params = pparams;
		}

		public static void GetVertexAttribivARB(uint index, GLVertexAttribPropertyARB pname, Span<int> @params)
		{
			fixed (int* pparams = @params)
			{
				GetVertexAttribivARBNative(index, pname, pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1dARBNative(uint index, double x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[9])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[9])(index, x);
			#endif
		}

		public static void VertexAttrib1dARB(uint index, double x)
		{
			VertexAttrib1dARBNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1dvARBNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[10])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[10])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib1dvARB(uint index, double* v)
		{
			VertexAttrib1dvARBNative(index, v);
		}

		public static void VertexAttrib1dvARB(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib1dvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1fARBNative(uint index, float x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[11])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[11])(index, x);
			#endif
		}

		public static void VertexAttrib1fARB(uint index, float x)
		{
			VertexAttrib1fARBNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1fvARBNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[12])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[12])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib1fvARB(uint index, float* v)
		{
			VertexAttrib1fvARBNative(index, v);
		}

		public static void VertexAttrib1fvARB(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib1fvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1sARBNative(uint index, short x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[13])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[13])(index, x);
			#endif
		}

		public static void VertexAttrib1sARB(uint index, short x)
		{
			VertexAttrib1sARBNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1svARBNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[14])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[14])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib1svARB(uint index, short* v)
		{
			VertexAttrib1svARBNative(index, v);
		}

		public static void VertexAttrib1svARB(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib1svARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2dARBNative(uint index, double x, double y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[15])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[15])(index, x, y);
			#endif
		}

		public static void VertexAttrib2dARB(uint index, double x, double y)
		{
			VertexAttrib2dARBNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2dvARBNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[16])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[16])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib2dvARB(uint index, double* v)
		{
			VertexAttrib2dvARBNative(index, v);
		}

		public static void VertexAttrib2dvARB(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib2dvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2fARBNative(uint index, float x, float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[17])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[17])(index, x, y);
			#endif
		}

		public static void VertexAttrib2fARB(uint index, float x, float y)
		{
			VertexAttrib2fARBNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2fvARBNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[18])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[18])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib2fvARB(uint index, float* v)
		{
			VertexAttrib2fvARBNative(index, v);
		}

		public static void VertexAttrib2fvARB(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib2fvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2sARBNative(uint index, short x, short y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[19])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[19])(index, x, y);
			#endif
		}

		public static void VertexAttrib2sARB(uint index, short x, short y)
		{
			VertexAttrib2sARBNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2svARBNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[20])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[20])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib2svARB(uint index, short* v)
		{
			VertexAttrib2svARBNative(index, v);
		}

		public static void VertexAttrib2svARB(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib2svARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3dARBNative(uint index, double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[21])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[21])(index, x, y, z);
			#endif
		}

		public static void VertexAttrib3dARB(uint index, double x, double y, double z)
		{
			VertexAttrib3dARBNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3dvARBNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[22])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[22])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib3dvARB(uint index, double* v)
		{
			VertexAttrib3dvARBNative(index, v);
		}

		public static void VertexAttrib3dvARB(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib3dvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3fARBNative(uint index, float x, float y, float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[23])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[23])(index, x, y, z);
			#endif
		}

		public static void VertexAttrib3fARB(uint index, float x, float y, float z)
		{
			VertexAttrib3fARBNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3fvARBNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[24])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[24])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib3fvARB(uint index, float* v)
		{
			VertexAttrib3fvARBNative(index, v);
		}

		public static void VertexAttrib3fvARB(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib3fvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3sARBNative(uint index, short x, short y, short z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[25])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[25])(index, x, y, z);
			#endif
		}

		public static void VertexAttrib3sARB(uint index, short x, short y, short z)
		{
			VertexAttrib3sARBNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3svARBNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[26])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[26])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib3svARB(uint index, short* v)
		{
			VertexAttrib3svARBNative(index, v);
		}

		public static void VertexAttrib3svARB(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib3svARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NbvARBNative(uint index, sbyte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)funcTable[27])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[27])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4NbvARB(uint index, sbyte* v)
		{
			VertexAttrib4NbvARBNative(index, v);
		}

		public static void VertexAttrib4NbvARB(uint index, ref sbyte v)
		{
			fixed (sbyte* pv0 = &v)
			{
				VertexAttrib4NbvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NivARBNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[28])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[28])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4NivARB(uint index, int* v)
		{
			VertexAttrib4NivARBNative(index, v);
		}

		public static void VertexAttrib4NivARB(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				VertexAttrib4NivARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NsvARBNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[29])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[29])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4NsvARB(uint index, short* v)
		{
			VertexAttrib4NsvARBNative(index, v);
		}

		public static void VertexAttrib4NsvARB(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib4NsvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NubARBNative(uint index, byte x, byte y, byte z, byte w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)funcTable[30])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)funcTable[30])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4NubARB(uint index, byte x, byte y, byte z, byte w)
		{
			VertexAttrib4NubARBNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NubvARBNative(uint index, byte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte*, void>)funcTable[31])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[31])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4NubvARB(uint index, byte* v)
		{
			VertexAttrib4NubvARBNative(index, v);
		}

		public static void VertexAttrib4NubvARB(uint index, string v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (v != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(v);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(v, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VertexAttrib4NubvARBNative(index, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void VertexAttrib4NubvARB(uint index, ReadOnlySpan<byte> v)
		{
			fixed (byte* pv0 = v)
			{
				VertexAttrib4NubvARBNative(index, pv0);
			}
		}

		public static void VertexAttrib4NubvARB(uint index, ref byte v)
		{
			fixed (byte* pv0 = &v)
			{
				VertexAttrib4NubvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NuivARBNative(uint index, uint* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[32])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[32])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4NuivARB(uint index, uint* v)
		{
			VertexAttrib4NuivARBNative(index, v);
		}

		public static void VertexAttrib4NuivARB(uint index, ref uint v)
		{
			fixed (uint* pv0 = &v)
			{
				VertexAttrib4NuivARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NusvARBNative(uint index, ushort* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ushort*, void>)funcTable[33])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[33])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4NusvARB(uint index, ushort* v)
		{
			VertexAttrib4NusvARBNative(index, v);
		}

		public static void VertexAttrib4NusvARB(uint index, ref ushort v)
		{
			fixed (ushort* pv0 = &v)
			{
				VertexAttrib4NusvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4bvARBNative(uint index, sbyte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)funcTable[34])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[34])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4bvARB(uint index, sbyte* v)
		{
			VertexAttrib4bvARBNative(index, v);
		}

		public static void VertexAttrib4bvARB(uint index, ref sbyte v)
		{
			fixed (sbyte* pv0 = &v)
			{
				VertexAttrib4bvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4dARBNative(uint index, double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[35])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[35])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4dARB(uint index, double x, double y, double z, double w)
		{
			VertexAttrib4dARBNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4dvARBNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[36])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[36])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4dvARB(uint index, double* v)
		{
			VertexAttrib4dvARBNative(index, v);
		}

		public static void VertexAttrib4dvARB(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib4dvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4fARBNative(uint index, float x, float y, float z, float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[37])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[37])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4fARB(uint index, float x, float y, float z, float w)
		{
			VertexAttrib4fARBNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4fvARBNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[38])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[38])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4fvARB(uint index, float* v)
		{
			VertexAttrib4fvARBNative(index, v);
		}

		public static void VertexAttrib4fvARB(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib4fvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4ivARBNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[39])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[39])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4ivARB(uint index, int* v)
		{
			VertexAttrib4ivARBNative(index, v);
		}

		public static void VertexAttrib4ivARB(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				VertexAttrib4ivARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4sARBNative(uint index, short x, short y, short z, short w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[40])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[40])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4sARB(uint index, short x, short y, short z, short w)
		{
			VertexAttrib4sARBNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4svARBNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[41])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[41])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4svARB(uint index, short* v)
		{
			VertexAttrib4svARBNative(index, v);
		}

		public static void VertexAttrib4svARB(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib4svARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4ubvARBNative(uint index, byte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte*, void>)funcTable[42])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[42])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4ubvARB(uint index, byte* v)
		{
			VertexAttrib4ubvARBNative(index, v);
		}

		public static void VertexAttrib4ubvARB(uint index, string v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (v != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(v);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(v, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VertexAttrib4ubvARBNative(index, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void VertexAttrib4ubvARB(uint index, ReadOnlySpan<byte> v)
		{
			fixed (byte* pv0 = v)
			{
				VertexAttrib4ubvARBNative(index, pv0);
			}
		}

		public static void VertexAttrib4ubvARB(uint index, ref byte v)
		{
			fixed (byte* pv0 = &v)
			{
				VertexAttrib4ubvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4uivARBNative(uint index, uint* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[43])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[43])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4uivARB(uint index, uint* v)
		{
			VertexAttrib4uivARBNative(index, v);
		}

		public static void VertexAttrib4uivARB(uint index, ref uint v)
		{
			fixed (uint* pv0 = &v)
			{
				VertexAttrib4uivARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4usvARBNative(uint index, ushort* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ushort*, void>)funcTable[44])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[44])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4usvARB(uint index, ushort* v)
		{
			VertexAttrib4usvARBNative(index, v);
		}

		public static void VertexAttrib4usvARB(uint index, ref ushort v)
		{
			fixed (ushort* pv0 = &v)
			{
				VertexAttrib4usvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribPointerARBNative(uint index, int size, GLVertexAttribPointerType type, byte normalized, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribPointerType, byte, int, void*, void>)funcTable[45])(index, size, type, normalized, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribPointerType, byte, int, nint, void>)funcTable[45])(index, size, type, normalized, stride, (nint)pointer);
			#endif
		}

		public static void VertexAttribPointerARB(uint index, int size, GLVertexAttribPointerType type, byte normalized, int stride, void* pointer)
		{
			VertexAttribPointerARBNative(index, size, type, normalized, stride, pointer);
		}

	}
}
