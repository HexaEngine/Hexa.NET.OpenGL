// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.OpenGL;

namespace Hexa.NET.OpenGL.ARB
{
	public unsafe partial class GLARBImaging
	{
		internal static FunctionTable funcTable;

		public static bool Initialized => funcTable != null;

		public static bool IsSupported => GLBase.NativeContext.IsExtensionSupported(ExtensionName);

		public const string ExtensionName = "GL_ARB_imaging";

		/// <summary>
		/// Tries to initialize the function table of the extension, call before you access any function.
		/// </summary>
		/// <returns>Returns <c>true</c> if successful, <c>false</c> if extension is not supported.</returns>
		public static bool TryInitExtension()
		{
			if (!IsSupported) return false;
			InitExtension();
			return true;
		}

		/// <summary>
		/// Initializes the function table of the extension, call before you access any function.
		/// </summary>
		public static void InitExtension()
		{
			if (funcTable != null) return;
			if (GLBase.NativeContext == null) throw new InvalidOperationException("OpenGL is not initialized, call GL.InitApi.");
			funcTable = new FunctionTable(GLBase.NativeContext, 34);
			funcTable.Load(0, "glBlendColor");
			funcTable.Load(1, "glBlendEquation");
			funcTable.Load(2, "glColorSubTable");
			funcTable.Load(3, "glColorTable");
			funcTable.Load(4, "glColorTableParameterfv");
			funcTable.Load(5, "glColorTableParameteriv");
			funcTable.Load(6, "glConvolutionFilter1D");
			funcTable.Load(7, "glConvolutionFilter2D");
			funcTable.Load(8, "glConvolutionParameterf");
			funcTable.Load(9, "glConvolutionParameterfv");
			funcTable.Load(10, "glConvolutionParameteri");
			funcTable.Load(11, "glConvolutionParameteriv");
			funcTable.Load(12, "glCopyColorSubTable");
			funcTable.Load(13, "glCopyColorTable");
			funcTable.Load(14, "glCopyConvolutionFilter1D");
			funcTable.Load(15, "glCopyConvolutionFilter2D");
			funcTable.Load(16, "glGetColorTable");
			funcTable.Load(17, "glGetColorTableParameterfv");
			funcTable.Load(18, "glGetColorTableParameteriv");
			funcTable.Load(19, "glGetConvolutionFilter");
			funcTable.Load(20, "glGetConvolutionParameterfv");
			funcTable.Load(21, "glGetConvolutionParameteriv");
			funcTable.Load(22, "glGetHistogram");
			funcTable.Load(23, "glGetHistogramParameterfv");
			funcTable.Load(24, "glGetHistogramParameteriv");
			funcTable.Load(25, "glGetMinmax");
			funcTable.Load(26, "glGetMinmaxParameterfv");
			funcTable.Load(27, "glGetMinmaxParameteriv");
			funcTable.Load(28, "glGetSeparableFilter");
			funcTable.Load(29, "glHistogram");
			funcTable.Load(30, "glMinmax");
			funcTable.Load(31, "glResetHistogram");
			funcTable.Load(32, "glResetMinmax");
			funcTable.Load(33, "glSeparableFilter2D");
		}

		public static void FreeExtension()
		{
			if (funcTable == null) return;
			funcTable.Free();
			funcTable = null;
		}
	}
}
