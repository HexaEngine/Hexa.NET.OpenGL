// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.ARB
{
	public static unsafe partial class GLArb
	{

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PointParameterfARBNative(GLPointParameterNameARB pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, float, void>)funcTable[428])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, float, void>)funcTable[428])(pname, param);
			#endif
		}

		public static void PointParameterfARB(GLPointParameterNameARB pname, float param)
		{
			PointParameterfARBNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PointParameterfvARBNative(GLPointParameterNameARB pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, float*, void>)funcTable[429])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, nint, void>)funcTable[429])(pname, (nint)@params);
			#endif
		}

		public static void PointParameterfvARB(GLPointParameterNameARB pname, float* @params)
		{
			PointParameterfvARBNative(pname, @params);
		}

		public static void PointParameterfvARB(GLPointParameterNameARB pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				PointParameterfvARBNative(pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PolygonOffsetClampNative(float factor, float units, float clamp)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[430])(factor, units, clamp);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[430])(factor, units, clamp);
			#endif
		}

		public static void PolygonOffsetClamp(float factor, float units, float clamp)
		{
			PolygonOffsetClampNative(factor, units, clamp);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PrimitiveBoundingBoxARBNative(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, float, float, void>)funcTable[431])(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, float, float, void>)funcTable[431])(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
			#endif
		}

		public static void PrimitiveBoundingBoxARB(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
		{
			PrimitiveBoundingBoxARBNative(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramBinaryNative(uint program, GLEnum binaryFormat, void* binary, int length)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, void*, int, void>)funcTable[432])(program, binaryFormat, binary, length);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, nint, int, void>)funcTable[432])(program, binaryFormat, (nint)binary, length);
			#endif
		}

		public static void ProgramBinary(uint program, GLEnum binaryFormat, void* binary, int length)
		{
			ProgramBinaryNative(program, binaryFormat, binary, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramEnvParameter4dARBNative(GLProgramTarget target, uint index, double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, double, double, double, double, void>)funcTable[433])(target, index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, double, double, double, double, void>)funcTable[433])(target, index, x, y, z, w);
			#endif
		}

		public static void ProgramEnvParameter4dARB(GLProgramTarget target, uint index, double x, double y, double z, double w)
		{
			ProgramEnvParameter4dARBNative(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramEnvParameter4dvARBNative(GLProgramTarget target, uint index, double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, double*, void>)funcTable[434])(target, index, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, nint, void>)funcTable[434])(target, index, (nint)@params);
			#endif
		}

		public static void ProgramEnvParameter4dvARB(GLProgramTarget target, uint index, double* @params)
		{
			ProgramEnvParameter4dvARBNative(target, index, @params);
		}

		public static void ProgramEnvParameter4dvARB(GLProgramTarget target, uint index, ref double @params)
		{
			fixed (double* pparams0 = &@params)
			{
				ProgramEnvParameter4dvARBNative(target, index, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramEnvParameter4fARBNative(GLProgramTarget target, uint index, float x, float y, float z, float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, float, float, float, float, void>)funcTable[435])(target, index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, float, float, float, float, void>)funcTable[435])(target, index, x, y, z, w);
			#endif
		}

		public static void ProgramEnvParameter4fARB(GLProgramTarget target, uint index, float x, float y, float z, float w)
		{
			ProgramEnvParameter4fARBNative(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramEnvParameter4fvARBNative(GLProgramTarget target, uint index, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, float*, void>)funcTable[436])(target, index, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, nint, void>)funcTable[436])(target, index, (nint)@params);
			#endif
		}

		public static void ProgramEnvParameter4fvARB(GLProgramTarget target, uint index, float* @params)
		{
			ProgramEnvParameter4fvARBNative(target, index, @params);
		}

		public static void ProgramEnvParameter4fvARB(GLProgramTarget target, uint index, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				ProgramEnvParameter4fvARBNative(target, index, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramLocalParameter4dARBNative(GLProgramTarget target, uint index, double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, double, double, double, double, void>)funcTable[437])(target, index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, double, double, double, double, void>)funcTable[437])(target, index, x, y, z, w);
			#endif
		}

		public static void ProgramLocalParameter4dARB(GLProgramTarget target, uint index, double x, double y, double z, double w)
		{
			ProgramLocalParameter4dARBNative(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramLocalParameter4dvARBNative(GLProgramTarget target, uint index, double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, double*, void>)funcTable[438])(target, index, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, nint, void>)funcTable[438])(target, index, (nint)@params);
			#endif
		}

		public static void ProgramLocalParameter4dvARB(GLProgramTarget target, uint index, double* @params)
		{
			ProgramLocalParameter4dvARBNative(target, index, @params);
		}

		public static void ProgramLocalParameter4dvARB(GLProgramTarget target, uint index, ref double @params)
		{
			fixed (double* pparams0 = &@params)
			{
				ProgramLocalParameter4dvARBNative(target, index, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramLocalParameter4fARBNative(GLProgramTarget target, uint index, float x, float y, float z, float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, float, float, float, float, void>)funcTable[439])(target, index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, float, float, float, float, void>)funcTable[439])(target, index, x, y, z, w);
			#endif
		}

		public static void ProgramLocalParameter4fARB(GLProgramTarget target, uint index, float x, float y, float z, float w)
		{
			ProgramLocalParameter4fARBNative(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramLocalParameter4fvARBNative(GLProgramTarget target, uint index, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, float*, void>)funcTable[440])(target, index, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, nint, void>)funcTable[440])(target, index, (nint)@params);
			#endif
		}

		public static void ProgramLocalParameter4fvARB(GLProgramTarget target, uint index, float* @params)
		{
			ProgramLocalParameter4fvARBNative(target, index, @params);
		}

		public static void ProgramLocalParameter4fvARB(GLProgramTarget target, uint index, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				ProgramLocalParameter4fvARBNative(target, index, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramParameteriNative(uint program, GLProgramParameterPName pname, int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramParameterPName, int, void>)funcTable[441])(program, pname, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramParameterPName, int, void>)funcTable[441])(program, pname, value);
			#endif
		}

		public static void ProgramParameteri(uint program, GLProgramParameterPName pname, int value)
		{
			ProgramParameteriNative(program, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramParameteriARBNative(uint program, GLProgramParameterPName pname, int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramParameterPName, int, void>)funcTable[442])(program, pname, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramParameterPName, int, void>)funcTable[442])(program, pname, value);
			#endif
		}

		public static void ProgramParameteriARB(uint program, GLProgramParameterPName pname, int value)
		{
			ProgramParameteriARBNative(program, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramStringARBNative(GLProgramTarget target, GLProgramFormat format, int len, void* str)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, GLProgramFormat, int, void*, void>)funcTable[443])(target, format, len, str);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, GLProgramFormat, int, nint, void>)funcTable[443])(target, format, len, (nint)str);
			#endif
		}

		public static void ProgramStringARB(GLProgramTarget target, GLProgramFormat format, int len, void* str)
		{
			ProgramStringARBNative(target, format, len, str);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1dNative(uint program, int location, double v0)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double, void>)funcTable[444])(program, location, v0);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, double, void>)funcTable[444])(program, location, v0);
			#endif
		}

		public static void ProgramUniform1d(uint program, int location, double v0)
		{
			ProgramUniform1dNative(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1dvNative(uint program, int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)funcTable[445])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[445])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1dv(uint program, int location, int count, double* value)
		{
			ProgramUniform1dvNative(program, location, count, value);
		}

		public static void ProgramUniform1dv(uint program, int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniform1dvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1fNative(uint program, int location, float v0)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, void>)funcTable[446])(program, location, v0);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, void>)funcTable[446])(program, location, v0);
			#endif
		}

		public static void ProgramUniform1f(uint program, int location, float v0)
		{
			ProgramUniform1fNative(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1fvNative(uint program, int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)funcTable[447])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[447])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1fv(uint program, int location, int count, float* value)
		{
			ProgramUniform1fvNative(program, location, count, value);
		}

		public static void ProgramUniform1fv(uint program, int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniform1fvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1iNative(uint program, int location, int v0)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[448])(program, location, v0);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[448])(program, location, v0);
			#endif
		}

		public static void ProgramUniform1i(uint program, int location, int v0)
		{
			ProgramUniform1iNative(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1i64ARBNative(uint program, int location, long x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, long, void>)funcTable[449])(program, location, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, long, void>)funcTable[449])(program, location, x);
			#endif
		}

		public static void ProgramUniform1i64ARB(uint program, int location, long x)
		{
			ProgramUniform1i64ARBNative(program, location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1i64vARBNative(uint program, int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)funcTable[450])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[450])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1i64vARB(uint program, int location, int count, long* value)
		{
			ProgramUniform1i64vARBNative(program, location, count, value);
		}

		public static void ProgramUniform1i64vARB(uint program, int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				ProgramUniform1i64vARBNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1ivNative(uint program, int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)funcTable[451])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[451])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1iv(uint program, int location, int count, int* value)
		{
			ProgramUniform1ivNative(program, location, count, value);
		}

		public static void ProgramUniform1iv(uint program, int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				ProgramUniform1ivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1uiNative(uint program, int location, uint v0)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, void>)funcTable[452])(program, location, v0);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, void>)funcTable[452])(program, location, v0);
			#endif
		}

		public static void ProgramUniform1ui(uint program, int location, uint v0)
		{
			ProgramUniform1uiNative(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1ui64ARBNative(uint program, int location, ulong x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, ulong, void>)funcTable[453])(program, location, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, ulong, void>)funcTable[453])(program, location, x);
			#endif
		}

		public static void ProgramUniform1ui64ARB(uint program, int location, ulong x)
		{
			ProgramUniform1ui64ARBNative(program, location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1ui64vARBNative(uint program, int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)funcTable[454])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[454])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1ui64vARB(uint program, int location, int count, ulong* value)
		{
			ProgramUniform1ui64vARBNative(program, location, count, value);
		}

		public static void ProgramUniform1ui64vARB(uint program, int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				ProgramUniform1ui64vARBNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1uivNative(uint program, int location, int count, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)funcTable[455])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[455])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1uiv(uint program, int location, int count, uint* value)
		{
			ProgramUniform1uivNative(program, location, count, value);
		}

		public static void ProgramUniform1uiv(uint program, int location, int count, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				ProgramUniform1uivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2dNative(uint program, int location, double v0, double v1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double, double, void>)funcTable[456])(program, location, v0, v1);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, double, double, void>)funcTable[456])(program, location, v0, v1);
			#endif
		}

		public static void ProgramUniform2d(uint program, int location, double v0, double v1)
		{
			ProgramUniform2dNative(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2dvNative(uint program, int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)funcTable[457])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[457])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2dv(uint program, int location, int count, double* value)
		{
			ProgramUniform2dvNative(program, location, count, value);
		}

		public static void ProgramUniform2dv(uint program, int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniform2dvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2fNative(uint program, int location, float v0, float v1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, float, void>)funcTable[458])(program, location, v0, v1);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, float, void>)funcTable[458])(program, location, v0, v1);
			#endif
		}

		public static void ProgramUniform2f(uint program, int location, float v0, float v1)
		{
			ProgramUniform2fNative(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2fvNative(uint program, int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)funcTable[459])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[459])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2fv(uint program, int location, int count, float* value)
		{
			ProgramUniform2fvNative(program, location, count, value);
		}

		public static void ProgramUniform2fv(uint program, int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniform2fvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2iNative(uint program, int location, int v0, int v1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[460])(program, location, v0, v1);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[460])(program, location, v0, v1);
			#endif
		}

		public static void ProgramUniform2i(uint program, int location, int v0, int v1)
		{
			ProgramUniform2iNative(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2i64ARBNative(uint program, int location, long x, long y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, long, long, void>)funcTable[461])(program, location, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, long, long, void>)funcTable[461])(program, location, x, y);
			#endif
		}

		public static void ProgramUniform2i64ARB(uint program, int location, long x, long y)
		{
			ProgramUniform2i64ARBNative(program, location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2i64vARBNative(uint program, int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)funcTable[462])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[462])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2i64vARB(uint program, int location, int count, long* value)
		{
			ProgramUniform2i64vARBNative(program, location, count, value);
		}

		public static void ProgramUniform2i64vARB(uint program, int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				ProgramUniform2i64vARBNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2ivNative(uint program, int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)funcTable[463])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[463])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2iv(uint program, int location, int count, int* value)
		{
			ProgramUniform2ivNative(program, location, count, value);
		}

		public static void ProgramUniform2iv(uint program, int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				ProgramUniform2ivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2uiNative(uint program, int location, uint v0, uint v1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void>)funcTable[464])(program, location, v0, v1);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void>)funcTable[464])(program, location, v0, v1);
			#endif
		}

		public static void ProgramUniform2ui(uint program, int location, uint v0, uint v1)
		{
			ProgramUniform2uiNative(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2ui64ARBNative(uint program, int location, ulong x, ulong y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, void>)funcTable[465])(program, location, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, void>)funcTable[465])(program, location, x, y);
			#endif
		}

		public static void ProgramUniform2ui64ARB(uint program, int location, ulong x, ulong y)
		{
			ProgramUniform2ui64ARBNative(program, location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2ui64vARBNative(uint program, int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)funcTable[466])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[466])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2ui64vARB(uint program, int location, int count, ulong* value)
		{
			ProgramUniform2ui64vARBNative(program, location, count, value);
		}

		public static void ProgramUniform2ui64vARB(uint program, int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				ProgramUniform2ui64vARBNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2uivNative(uint program, int location, int count, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)funcTable[467])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[467])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2uiv(uint program, int location, int count, uint* value)
		{
			ProgramUniform2uivNative(program, location, count, value);
		}

		public static void ProgramUniform2uiv(uint program, int location, int count, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				ProgramUniform2uivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3dNative(uint program, int location, double v0, double v1, double v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double, double, double, void>)funcTable[468])(program, location, v0, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, double, double, double, void>)funcTable[468])(program, location, v0, v1, v2);
			#endif
		}

		public static void ProgramUniform3d(uint program, int location, double v0, double v1, double v2)
		{
			ProgramUniform3dNative(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3dvNative(uint program, int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)funcTable[469])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[469])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3dv(uint program, int location, int count, double* value)
		{
			ProgramUniform3dvNative(program, location, count, value);
		}

		public static void ProgramUniform3dv(uint program, int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniform3dvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3fNative(uint program, int location, float v0, float v1, float v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, void>)funcTable[470])(program, location, v0, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, void>)funcTable[470])(program, location, v0, v1, v2);
			#endif
		}

		public static void ProgramUniform3f(uint program, int location, float v0, float v1, float v2)
		{
			ProgramUniform3fNative(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3fvNative(uint program, int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)funcTable[471])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[471])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3fv(uint program, int location, int count, float* value)
		{
			ProgramUniform3fvNative(program, location, count, value);
		}

		public static void ProgramUniform3fv(uint program, int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniform3fvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3iNative(uint program, int location, int v0, int v1, int v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[472])(program, location, v0, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[472])(program, location, v0, v1, v2);
			#endif
		}

		public static void ProgramUniform3i(uint program, int location, int v0, int v1, int v2)
		{
			ProgramUniform3iNative(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3i64ARBNative(uint program, int location, long x, long y, long z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, long, long, long, void>)funcTable[473])(program, location, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, long, long, long, void>)funcTable[473])(program, location, x, y, z);
			#endif
		}

		public static void ProgramUniform3i64ARB(uint program, int location, long x, long y, long z)
		{
			ProgramUniform3i64ARBNative(program, location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3i64vARBNative(uint program, int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)funcTable[474])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[474])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3i64vARB(uint program, int location, int count, long* value)
		{
			ProgramUniform3i64vARBNative(program, location, count, value);
		}

		public static void ProgramUniform3i64vARB(uint program, int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				ProgramUniform3i64vARBNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3ivNative(uint program, int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)funcTable[475])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[475])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3iv(uint program, int location, int count, int* value)
		{
			ProgramUniform3ivNative(program, location, count, value);
		}

		public static void ProgramUniform3iv(uint program, int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				ProgramUniform3ivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3uiNative(uint program, int location, uint v0, uint v1, uint v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, void>)funcTable[476])(program, location, v0, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, void>)funcTable[476])(program, location, v0, v1, v2);
			#endif
		}

		public static void ProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2)
		{
			ProgramUniform3uiNative(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3ui64ARBNative(uint program, int location, ulong x, ulong y, ulong z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, ulong, void>)funcTable[477])(program, location, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, ulong, void>)funcTable[477])(program, location, x, y, z);
			#endif
		}

		public static void ProgramUniform3ui64ARB(uint program, int location, ulong x, ulong y, ulong z)
		{
			ProgramUniform3ui64ARBNative(program, location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3ui64vARBNative(uint program, int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)funcTable[478])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[478])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3ui64vARB(uint program, int location, int count, ulong* value)
		{
			ProgramUniform3ui64vARBNative(program, location, count, value);
		}

		public static void ProgramUniform3ui64vARB(uint program, int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				ProgramUniform3ui64vARBNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3uivNative(uint program, int location, int count, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)funcTable[479])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[479])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3uiv(uint program, int location, int count, uint* value)
		{
			ProgramUniform3uivNative(program, location, count, value);
		}

		public static void ProgramUniform3uiv(uint program, int location, int count, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				ProgramUniform3uivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4dNative(uint program, int location, double v0, double v1, double v2, double v3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double, double, double, double, void>)funcTable[480])(program, location, v0, v1, v2, v3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, double, double, double, double, void>)funcTable[480])(program, location, v0, v1, v2, v3);
			#endif
		}

		public static void ProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3)
		{
			ProgramUniform4dNative(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4dvNative(uint program, int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)funcTable[481])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[481])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4dv(uint program, int location, int count, double* value)
		{
			ProgramUniform4dvNative(program, location, count, value);
		}

		public static void ProgramUniform4dv(uint program, int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniform4dvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4fNative(uint program, int location, float v0, float v1, float v2, float v3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, float, void>)funcTable[482])(program, location, v0, v1, v2, v3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, float, void>)funcTable[482])(program, location, v0, v1, v2, v3);
			#endif
		}

		public static void ProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3)
		{
			ProgramUniform4fNative(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4fvNative(uint program, int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)funcTable[483])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[483])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4fv(uint program, int location, int count, float* value)
		{
			ProgramUniform4fvNative(program, location, count, value);
		}

		public static void ProgramUniform4fv(uint program, int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniform4fvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4iNative(uint program, int location, int v0, int v1, int v2, int v3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void>)funcTable[484])(program, location, v0, v1, v2, v3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void>)funcTable[484])(program, location, v0, v1, v2, v3);
			#endif
		}

		public static void ProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3)
		{
			ProgramUniform4iNative(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4i64ARBNative(uint program, int location, long x, long y, long z, long w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, long, long, long, long, void>)funcTable[485])(program, location, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, long, long, long, long, void>)funcTable[485])(program, location, x, y, z, w);
			#endif
		}

		public static void ProgramUniform4i64ARB(uint program, int location, long x, long y, long z, long w)
		{
			ProgramUniform4i64ARBNative(program, location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4i64vARBNative(uint program, int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)funcTable[486])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[486])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4i64vARB(uint program, int location, int count, long* value)
		{
			ProgramUniform4i64vARBNative(program, location, count, value);
		}

		public static void ProgramUniform4i64vARB(uint program, int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				ProgramUniform4i64vARBNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4ivNative(uint program, int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)funcTable[487])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[487])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4iv(uint program, int location, int count, int* value)
		{
			ProgramUniform4ivNative(program, location, count, value);
		}

		public static void ProgramUniform4iv(uint program, int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				ProgramUniform4ivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4uiNative(uint program, int location, uint v0, uint v1, uint v2, uint v3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, uint, void>)funcTable[488])(program, location, v0, v1, v2, v3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, uint, void>)funcTable[488])(program, location, v0, v1, v2, v3);
			#endif
		}

		public static void ProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3)
		{
			ProgramUniform4uiNative(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4ui64ARBNative(uint program, int location, ulong x, ulong y, ulong z, ulong w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, ulong, ulong, void>)funcTable[489])(program, location, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, ulong, ulong, void>)funcTable[489])(program, location, x, y, z, w);
			#endif
		}

		public static void ProgramUniform4ui64ARB(uint program, int location, ulong x, ulong y, ulong z, ulong w)
		{
			ProgramUniform4ui64ARBNative(program, location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4ui64vARBNative(uint program, int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)funcTable[490])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[490])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4ui64vARB(uint program, int location, int count, ulong* value)
		{
			ProgramUniform4ui64vARBNative(program, location, count, value);
		}

		public static void ProgramUniform4ui64vARB(uint program, int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				ProgramUniform4ui64vARBNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4uivNative(uint program, int location, int count, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)funcTable[491])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[491])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4uiv(uint program, int location, int count, uint* value)
		{
			ProgramUniform4uivNative(program, location, count, value);
		}

		public static void ProgramUniform4uiv(uint program, int location, int count, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				ProgramUniform4uivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformHandleui64ARBNative(uint program, int location, ulong value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, ulong, void>)funcTable[492])(program, location, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, ulong, void>)funcTable[492])(program, location, value);
			#endif
		}

		public static void ProgramUniformHandleui64ARB(uint program, int location, ulong value)
		{
			ProgramUniformHandleui64ARBNative(program, location, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformHandleui64vARBNative(uint program, int location, int count, ulong* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)funcTable[493])(program, location, count, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[493])(program, location, count, (nint)values);
			#endif
		}

		public static void ProgramUniformHandleui64vARB(uint program, int location, int count, ulong* values)
		{
			ProgramUniformHandleui64vARBNative(program, location, count, values);
		}

		public static void ProgramUniformHandleui64vARB(uint program, int location, int count, ref ulong values)
		{
			fixed (ulong* pvalues0 = &values)
			{
				ProgramUniformHandleui64vARBNative(program, location, count, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2dvNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[494])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[494])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2dv(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix2dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2dv(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix2dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2fvNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[495])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[495])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2fv(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix2fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2fv(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix2fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2x3dvNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[496])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[496])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2x3dv(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix2x3dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2x3dv(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix2x3dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2x3fvNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[497])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[497])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2x3fv(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix2x3fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2x3fv(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix2x3fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2x4dvNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[498])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[498])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2x4dv(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix2x4dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2x4dv(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix2x4dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2x4fvNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[499])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[499])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2x4fv(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix2x4fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2x4fv(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix2x4fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3dvNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[500])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[500])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3dv(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix3dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3dv(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix3dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3fvNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[501])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[501])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3fv(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix3fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3fv(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix3fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3x2dvNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[502])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[502])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3x2dv(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix3x2dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3x2dv(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix3x2dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3x2fvNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[503])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[503])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3x2fv(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix3x2fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3x2fv(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix3x2fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3x4dvNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[504])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[504])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3x4dv(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix3x4dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3x4dv(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix3x4dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3x4fvNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[505])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[505])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3x4fv(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix3x4fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3x4fv(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix3x4fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4dvNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[506])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[506])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4dv(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix4dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4dv(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix4dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4fvNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[507])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[507])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4fv(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix4fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4fv(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix4fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4x2dvNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[508])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[508])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4x2dv(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix4x2dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4x2dv(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix4x2dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4x2fvNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[509])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[509])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4x2fv(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix4x2fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4x2fv(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix4x2fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4x3dvNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[510])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[510])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4x3dv(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix4x3dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4x3dv(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix4x3dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4x3fvNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[511])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[511])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4x3fv(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix4x3fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4x3fv(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix4x3fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProvokingVertexNative(GLVertexProvokingMode mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexProvokingMode, void>)funcTable[512])(mode);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexProvokingMode, void>)funcTable[512])(mode);
			#endif
		}

		public static void ProvokingVertex(GLVertexProvokingMode mode)
		{
			ProvokingVertexNative(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void QueryCounterNative(uint id, GLQueryCounterTarget target)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLQueryCounterTarget, void>)funcTable[513])(id, target);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLQueryCounterTarget, void>)funcTable[513])(id, target);
			#endif
		}

		public static void QueryCounter(uint id, GLQueryCounterTarget target)
		{
			QueryCounterNative(id, target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ReadnPixelsARBNative(int x, int y, int width, int height, GLPixelFormat format, GLPixelType type, int bufSize, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, GLPixelFormat, GLPixelType, int, void*, void>)funcTable[514])(x, y, width, height, format, type, bufSize, data);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, GLPixelFormat, GLPixelType, int, nint, void>)funcTable[514])(x, y, width, height, format, type, bufSize, (nint)data);
			#endif
		}

		public static void ReadnPixelsARB(int x, int y, int width, int height, GLPixelFormat format, GLPixelType type, int bufSize, void* data)
		{
			ReadnPixelsARBNative(x, y, width, height, format, type, bufSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ReleaseShaderCompilerNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[515])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[515])();
			#endif
		}

		public static void ReleaseShaderCompiler()
		{
			ReleaseShaderCompilerNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RenderbufferStorageNative(GLRenderbufferTarget target, GLInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, GLInternalFormat, int, int, void>)funcTable[516])(target, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, GLInternalFormat, int, int, void>)funcTable[516])(target, internalformat, width, height);
			#endif
		}

		public static void RenderbufferStorage(GLRenderbufferTarget target, GLInternalFormat internalformat, int width, int height)
		{
			RenderbufferStorageNative(target, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RenderbufferStorageMultisampleNative(GLRenderbufferTarget target, int samples, GLInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, int, GLInternalFormat, int, int, void>)funcTable[517])(target, samples, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, int, GLInternalFormat, int, int, void>)funcTable[517])(target, samples, internalformat, width, height);
			#endif
		}

		public static void RenderbufferStorageMultisample(GLRenderbufferTarget target, int samples, GLInternalFormat internalformat, int width, int height)
		{
			RenderbufferStorageMultisampleNative(target, samples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ResetHistogramNative(GLHistogramTargetEXT target)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, void>)funcTable[518])(target);
			#else
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, void>)funcTable[518])(target);
			#endif
		}

		public static void ResetHistogram(GLHistogramTargetEXT target)
		{
			ResetHistogramNative(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ResetMinmaxNative(GLMinmaxTargetEXT target)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, void>)funcTable[519])(target);
			#else
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, void>)funcTable[519])(target);
			#endif
		}

		public static void ResetMinmax(GLMinmaxTargetEXT target)
		{
			ResetMinmaxNative(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ResumeTransformFeedbackNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[520])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[520])();
			#endif
		}

		public static void ResumeTransformFeedback()
		{
			ResumeTransformFeedbackNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SampleCoverageARBNative(float value, byte invert)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, byte, void>)funcTable[521])(value, invert);
			#else
			((delegate* unmanaged[Cdecl]<float, byte, void>)funcTable[521])(value, invert);
			#endif
		}

		public static void SampleCoverageARB(float value, byte invert)
		{
			SampleCoverageARBNative(value, invert);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SampleMaskiNative(uint maskNumber, uint mask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[522])(maskNumber, mask);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[522])(maskNumber, mask);
			#endif
		}

		public static void SampleMaski(uint maskNumber, uint mask)
		{
			SampleMaskiNative(maskNumber, mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplerParameterIivNative(uint sampler, GLSamplerParameterI pname, int* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int*, void>)funcTable[523])(sampler, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, nint, void>)funcTable[523])(sampler, pname, (nint)param);
			#endif
		}

		public static void SamplerParameterIiv(uint sampler, GLSamplerParameterI pname, int* param)
		{
			SamplerParameterIivNative(sampler, pname, param);
		}

		public static void SamplerParameterIiv(uint sampler, GLSamplerParameterI pname, ref int param)
		{
			fixed (int* pparam0 = &param)
			{
				SamplerParameterIivNative(sampler, pname, pparam0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplerParameterIuivNative(uint sampler, GLSamplerParameterI pname, uint* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, uint*, void>)funcTable[524])(sampler, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, nint, void>)funcTable[524])(sampler, pname, (nint)param);
			#endif
		}

		public static void SamplerParameterIuiv(uint sampler, GLSamplerParameterI pname, uint* param)
		{
			SamplerParameterIuivNative(sampler, pname, param);
		}

		public static void SamplerParameterIuiv(uint sampler, GLSamplerParameterI pname, ref uint param)
		{
			fixed (uint* pparam0 = &param)
			{
				SamplerParameterIuivNative(sampler, pname, pparam0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplerParameterfNative(uint sampler, GLSamplerParameterF pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterF, float, void>)funcTable[525])(sampler, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterF, float, void>)funcTable[525])(sampler, pname, param);
			#endif
		}

		public static void SamplerParameterf(uint sampler, GLSamplerParameterF pname, float param)
		{
			SamplerParameterfNative(sampler, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplerParameterfvNative(uint sampler, GLSamplerParameterF pname, float* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterF, float*, void>)funcTable[526])(sampler, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterF, nint, void>)funcTable[526])(sampler, pname, (nint)param);
			#endif
		}

		public static void SamplerParameterfv(uint sampler, GLSamplerParameterF pname, float* param)
		{
			SamplerParameterfvNative(sampler, pname, param);
		}

		public static void SamplerParameterfv(uint sampler, GLSamplerParameterF pname, ref float param)
		{
			fixed (float* pparam0 = &param)
			{
				SamplerParameterfvNative(sampler, pname, pparam0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplerParameteriNative(uint sampler, GLSamplerParameterI pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int, void>)funcTable[527])(sampler, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int, void>)funcTable[527])(sampler, pname, param);
			#endif
		}

		public static void SamplerParameteri(uint sampler, GLSamplerParameterI pname, int param)
		{
			SamplerParameteriNative(sampler, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplerParameterivNative(uint sampler, GLSamplerParameterI pname, int* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int*, void>)funcTable[528])(sampler, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, nint, void>)funcTable[528])(sampler, pname, (nint)param);
			#endif
		}

		public static void SamplerParameteriv(uint sampler, GLSamplerParameterI pname, int* param)
		{
			SamplerParameterivNative(sampler, pname, param);
		}

		public static void SamplerParameteriv(uint sampler, GLSamplerParameterI pname, ref int param)
		{
			fixed (int* pparam0 = &param)
			{
				SamplerParameterivNative(sampler, pname, pparam0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScissorArrayvNative(uint first, int count, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int*, void>)funcTable[529])(first, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[529])(first, count, (nint)v);
			#endif
		}

		public static void ScissorArrayv(uint first, int count, int* v)
		{
			ScissorArrayvNative(first, count, v);
		}

		public static void ScissorArrayv(uint first, int count, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				ScissorArrayvNative(first, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScissorIndexedNative(uint index, int left, int bottom, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[530])(index, left, bottom, width, height);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[530])(index, left, bottom, width, height);
			#endif
		}

		public static void ScissorIndexed(uint index, int left, int bottom, int width, int height)
		{
			ScissorIndexedNative(index, left, bottom, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScissorIndexedvNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[531])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[531])(index, (nint)v);
			#endif
		}

		public static void ScissorIndexedv(uint index, int* v)
		{
			ScissorIndexedvNative(index, v);
		}

		public static void ScissorIndexedv(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				ScissorIndexedvNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColorP3uiNative(GLColorPointerType type, uint color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLColorPointerType, uint, void>)funcTable[532])(type, color);
			#else
			((delegate* unmanaged[Cdecl]<GLColorPointerType, uint, void>)funcTable[532])(type, color);
			#endif
		}

		public static void SecondaryColorP3ui(GLColorPointerType type, uint color)
		{
			SecondaryColorP3uiNative(type, color);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColorP3uivNative(GLColorPointerType type, uint* color)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLColorPointerType, uint*, void>)funcTable[533])(type, color);
			#else
			((delegate* unmanaged[Cdecl]<GLColorPointerType, nint, void>)funcTable[533])(type, (nint)color);
			#endif
		}

		public static void SecondaryColorP3uiv(GLColorPointerType type, uint* color)
		{
			SecondaryColorP3uivNative(type, color);
		}

		public static void SecondaryColorP3uiv(GLColorPointerType type, ref uint color)
		{
			fixed (uint* pcolor0 = &color)
			{
				SecondaryColorP3uivNative(type, pcolor0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SeparableFilter2DNative(GLSeparableTargetEXT target, GLInternalFormat internalformat, int width, int height, GLPixelFormat format, GLPixelType type, void* row, void* column)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLSeparableTargetEXT, GLInternalFormat, int, int, GLPixelFormat, GLPixelType, void*, void*, void>)funcTable[534])(target, internalformat, width, height, format, type, row, column);
			#else
			((delegate* unmanaged[Cdecl]<GLSeparableTargetEXT, GLInternalFormat, int, int, GLPixelFormat, GLPixelType, nint, nint, void>)funcTable[534])(target, internalformat, width, height, format, type, (nint)row, (nint)column);
			#endif
		}

		public static void SeparableFilter2D(GLSeparableTargetEXT target, GLInternalFormat internalformat, int width, int height, GLPixelFormat format, GLPixelType type, void* row, void* column)
		{
			SeparableFilter2DNative(target, internalformat, width, height, format, type, row, column);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ShaderBinaryNative(int count, uint* shaders, GLShaderBinaryFormat binaryFormat, void* binary, int length)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, GLShaderBinaryFormat, void*, int, void>)funcTable[535])(count, shaders, binaryFormat, binary, length);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, GLShaderBinaryFormat, nint, int, void>)funcTable[535])(count, (nint)shaders, binaryFormat, (nint)binary, length);
			#endif
		}

		public static void ShaderBinary(int count, uint* shaders, GLShaderBinaryFormat binaryFormat, void* binary, int length)
		{
			ShaderBinaryNative(count, shaders, binaryFormat, binary, length);
		}

		public static void ShaderBinary(int count, ref uint shaders, GLShaderBinaryFormat binaryFormat, void* binary, int length)
		{
			fixed (uint* pshaders0 = &shaders)
			{
				ShaderBinaryNative(count, pshaders0, binaryFormat, binary, length);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ShaderSourceARBNative(uint shaderObj, int count, byte** str, int* length)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, byte**, int*, void>)funcTable[536])(shaderObj, count, str, length);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, void>)funcTable[536])(shaderObj, count, (nint)str, (nint)length);
			#endif
		}

		public static void ShaderSourceARB(uint shaderObj, int count, byte** str, int* length)
		{
			ShaderSourceARBNative(shaderObj, count, str, length);
		}

		public static void ShaderSourceARB(uint shaderObj, int count, byte** str, ref int length)
		{
			fixed (int* plength0 = &length)
			{
				ShaderSourceARBNative(shaderObj, count, str, plength0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ShaderStorageBlockBindingNative(uint program, uint storageBlockIndex, uint storageBlockBinding)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[537])(program, storageBlockIndex, storageBlockBinding);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[537])(program, storageBlockIndex, storageBlockBinding);
			#endif
		}

		public static void ShaderStorageBlockBinding(uint program, uint storageBlockIndex, uint storageBlockBinding)
		{
			ShaderStorageBlockBindingNative(program, storageBlockIndex, storageBlockBinding);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SpecializeShaderARBNative(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte*, uint, uint*, uint*, void>)funcTable[538])(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, uint, nint, nint, void>)funcTable[538])(shader, (nint)pEntryPoint, numSpecializationConstants, (nint)pConstantIndex, (nint)pConstantValue);
			#endif
		}

		public static void SpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
		{
			SpecializeShaderARBNative(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
		}

		public static void SpecializeShaderARB(uint shader, string pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpecializeShaderARBNative(shader, pStr0, numSpecializationConstants, pConstantIndex, pConstantValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void SpecializeShaderARB(uint shader, ReadOnlySpan<byte> pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
		{
			fixed (byte* ppEntryPoint0 = pEntryPoint)
			{
				SpecializeShaderARBNative(shader, ppEntryPoint0, numSpecializationConstants, pConstantIndex, pConstantValue);
			}
		}

		public static void SpecializeShaderARB(uint shader, ref byte pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
		{
			fixed (byte* ppEntryPoint0 = &pEntryPoint)
			{
				SpecializeShaderARBNative(shader, ppEntryPoint0, numSpecializationConstants, pConstantIndex, pConstantValue);
			}
		}

		public static void SpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, ref uint pConstantIndex, uint* pConstantValue)
		{
			fixed (uint* ppConstantIndex0 = &pConstantIndex)
			{
				SpecializeShaderARBNative(shader, pEntryPoint, numSpecializationConstants, ppConstantIndex0, pConstantValue);
			}
		}

		public static void SpecializeShaderARB(uint shader, ref byte pEntryPoint, uint numSpecializationConstants, ref uint pConstantIndex, uint* pConstantValue)
		{
			fixed (byte* ppEntryPoint0 = &pEntryPoint)
			{
				fixed (uint* ppConstantIndex1 = &pConstantIndex)
				{
					SpecializeShaderARBNative(shader, ppEntryPoint0, numSpecializationConstants, ppConstantIndex1, pConstantValue);
				}
			}
		}

		public static void SpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, ref uint pConstantValue)
		{
			fixed (uint* ppConstantValue0 = &pConstantValue)
			{
				SpecializeShaderARBNative(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, ppConstantValue0);
			}
		}

		public static void SpecializeShaderARB(uint shader, ref byte pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, ref uint pConstantValue)
		{
			fixed (byte* ppEntryPoint0 = &pEntryPoint)
			{
				fixed (uint* ppConstantValue1 = &pConstantValue)
				{
					SpecializeShaderARBNative(shader, ppEntryPoint0, numSpecializationConstants, pConstantIndex, ppConstantValue1);
				}
			}
		}

		public static void SpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, ref uint pConstantIndex, ref uint pConstantValue)
		{
			fixed (uint* ppConstantIndex0 = &pConstantIndex)
			{
				fixed (uint* ppConstantValue1 = &pConstantValue)
				{
					SpecializeShaderARBNative(shader, pEntryPoint, numSpecializationConstants, ppConstantIndex0, ppConstantValue1);
				}
			}
		}

		public static void SpecializeShaderARB(uint shader, ref byte pEntryPoint, uint numSpecializationConstants, ref uint pConstantIndex, ref uint pConstantValue)
		{
			fixed (byte* ppEntryPoint0 = &pEntryPoint)
			{
				fixed (uint* ppConstantIndex1 = &pConstantIndex)
				{
					fixed (uint* ppConstantValue2 = &pConstantValue)
					{
						SpecializeShaderARBNative(shader, ppEntryPoint0, numSpecializationConstants, ppConstantIndex1, ppConstantValue2);
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexBufferARBNative(GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, uint, void>)funcTable[539])(target, internalformat, buffer);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, uint, void>)funcTable[539])(target, internalformat, buffer);
			#endif
		}

		public static void TexBufferARB(GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer)
		{
			TexBufferARBNative(target, internalformat, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexBufferRangeNative(GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer, nint offset, nint size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, uint, nint, nint, void>)funcTable[540])(target, internalformat, buffer, offset, size);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, uint, nint, nint, void>)funcTable[540])(target, internalformat, buffer, offset, size);
			#endif
		}

		public static void TexBufferRange(GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer, nint offset, nint size)
		{
			TexBufferRangeNative(target, internalformat, buffer, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoordP1uiNative(GLTexCoordPointerType type, uint coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, uint, void>)funcTable[541])(type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, uint, void>)funcTable[541])(type, coords);
			#endif
		}

		public static void TexCoordP1ui(GLTexCoordPointerType type, uint coords)
		{
			TexCoordP1uiNative(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoordP1uivNative(GLTexCoordPointerType type, uint* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, uint*, void>)funcTable[542])(type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, nint, void>)funcTable[542])(type, (nint)coords);
			#endif
		}

		public static void TexCoordP1uiv(GLTexCoordPointerType type, uint* coords)
		{
			TexCoordP1uivNative(type, coords);
		}

		public static void TexCoordP1uiv(GLTexCoordPointerType type, ref uint coords)
		{
			fixed (uint* pcoords0 = &coords)
			{
				TexCoordP1uivNative(type, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoordP2uiNative(GLTexCoordPointerType type, uint coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, uint, void>)funcTable[543])(type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, uint, void>)funcTable[543])(type, coords);
			#endif
		}

		public static void TexCoordP2ui(GLTexCoordPointerType type, uint coords)
		{
			TexCoordP2uiNative(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoordP2uivNative(GLTexCoordPointerType type, uint* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, uint*, void>)funcTable[544])(type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, nint, void>)funcTable[544])(type, (nint)coords);
			#endif
		}

		public static void TexCoordP2uiv(GLTexCoordPointerType type, uint* coords)
		{
			TexCoordP2uivNative(type, coords);
		}

		public static void TexCoordP2uiv(GLTexCoordPointerType type, ref uint coords)
		{
			fixed (uint* pcoords0 = &coords)
			{
				TexCoordP2uivNative(type, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoordP3uiNative(GLTexCoordPointerType type, uint coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, uint, void>)funcTable[545])(type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, uint, void>)funcTable[545])(type, coords);
			#endif
		}

		public static void TexCoordP3ui(GLTexCoordPointerType type, uint coords)
		{
			TexCoordP3uiNative(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoordP3uivNative(GLTexCoordPointerType type, uint* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, uint*, void>)funcTable[546])(type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, nint, void>)funcTable[546])(type, (nint)coords);
			#endif
		}

		public static void TexCoordP3uiv(GLTexCoordPointerType type, uint* coords)
		{
			TexCoordP3uivNative(type, coords);
		}

		public static void TexCoordP3uiv(GLTexCoordPointerType type, ref uint coords)
		{
			fixed (uint* pcoords0 = &coords)
			{
				TexCoordP3uivNative(type, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoordP4uiNative(GLTexCoordPointerType type, uint coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, uint, void>)funcTable[547])(type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, uint, void>)funcTable[547])(type, coords);
			#endif
		}

		public static void TexCoordP4ui(GLTexCoordPointerType type, uint coords)
		{
			TexCoordP4uiNative(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoordP4uivNative(GLTexCoordPointerType type, uint* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, uint*, void>)funcTable[548])(type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTexCoordPointerType, nint, void>)funcTable[548])(type, (nint)coords);
			#endif
		}

		public static void TexCoordP4uiv(GLTexCoordPointerType type, uint* coords)
		{
			TexCoordP4uivNative(type, coords);
		}

		public static void TexCoordP4uiv(GLTexCoordPointerType type, ref uint coords)
		{
			fixed (uint* pcoords0 = &coords)
			{
				TexCoordP4uivNative(type, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexImage2DMultisampleNative(GLTextureTarget target, int samples, GLInternalFormat internalformat, int width, int height, byte fixedsamplelocations)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLInternalFormat, int, int, byte, void>)funcTable[549])(target, samples, internalformat, width, height, fixedsamplelocations);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLInternalFormat, int, int, byte, void>)funcTable[549])(target, samples, internalformat, width, height, fixedsamplelocations);
			#endif
		}

		public static void TexImage2DMultisample(GLTextureTarget target, int samples, GLInternalFormat internalformat, int width, int height, byte fixedsamplelocations)
		{
			TexImage2DMultisampleNative(target, samples, internalformat, width, height, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexImage3DMultisampleNative(GLTextureTarget target, int samples, GLInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLInternalFormat, int, int, int, byte, void>)funcTable[550])(target, samples, internalformat, width, height, depth, fixedsamplelocations);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLInternalFormat, int, int, int, byte, void>)funcTable[550])(target, samples, internalformat, width, height, depth, fixedsamplelocations);
			#endif
		}

		public static void TexImage3DMultisample(GLTextureTarget target, int samples, GLInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
		{
			TexImage3DMultisampleNative(target, samples, internalformat, width, height, depth, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexPageCommitmentARBNative(GLEnum target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, int, int, int, int, int, int, int, byte, void>)funcTable[551])(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, int, int, int, int, int, int, int, byte, void>)funcTable[551])(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
			#endif
		}

		public static void TexPageCommitmentARB(GLEnum target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit)
		{
			TexPageCommitmentARBNative(target, level, xoffset, yoffset, zoffset, width, height, depth, commit);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorage1DNative(GLTextureTarget target, int levels, GLSizedInternalFormat internalformat, int width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, void>)funcTable[552])(target, levels, internalformat, width);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, void>)funcTable[552])(target, levels, internalformat, width);
			#endif
		}

		public static void TexStorage1D(GLTextureTarget target, int levels, GLSizedInternalFormat internalformat, int width)
		{
			TexStorage1DNative(target, levels, internalformat, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorage2DNative(GLTextureTarget target, int levels, GLSizedInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, void>)funcTable[553])(target, levels, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, void>)funcTable[553])(target, levels, internalformat, width, height);
			#endif
		}

		public static void TexStorage2D(GLTextureTarget target, int levels, GLSizedInternalFormat internalformat, int width, int height)
		{
			TexStorage2DNative(target, levels, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorage2DMultisampleNative(GLTextureTarget target, int samples, GLSizedInternalFormat internalformat, int width, int height, byte fixedsamplelocations)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, byte, void>)funcTable[554])(target, samples, internalformat, width, height, fixedsamplelocations);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, byte, void>)funcTable[554])(target, samples, internalformat, width, height, fixedsamplelocations);
			#endif
		}

		public static void TexStorage2DMultisample(GLTextureTarget target, int samples, GLSizedInternalFormat internalformat, int width, int height, byte fixedsamplelocations)
		{
			TexStorage2DMultisampleNative(target, samples, internalformat, width, height, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorage3DNative(GLTextureTarget target, int levels, GLSizedInternalFormat internalformat, int width, int height, int depth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, int, void>)funcTable[555])(target, levels, internalformat, width, height, depth);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, int, void>)funcTable[555])(target, levels, internalformat, width, height, depth);
			#endif
		}

		public static void TexStorage3D(GLTextureTarget target, int levels, GLSizedInternalFormat internalformat, int width, int height, int depth)
		{
			TexStorage3DNative(target, levels, internalformat, width, height, depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorage3DMultisampleNative(GLTextureTarget target, int samples, GLSizedInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, int, byte, void>)funcTable[556])(target, samples, internalformat, width, height, depth, fixedsamplelocations);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, int, byte, void>)funcTable[556])(target, samples, internalformat, width, height, depth, fixedsamplelocations);
			#endif
		}

		public static void TexStorage3DMultisample(GLTextureTarget target, int samples, GLSizedInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
		{
			TexStorage3DMultisampleNative(target, samples, internalformat, width, height, depth, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureBarrierNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[557])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[557])();
			#endif
		}

		public static void TextureBarrier()
		{
			TextureBarrierNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureBufferNative(uint texture, GLSizedInternalFormat internalformat, uint buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSizedInternalFormat, uint, void>)funcTable[558])(texture, internalformat, buffer);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSizedInternalFormat, uint, void>)funcTable[558])(texture, internalformat, buffer);
			#endif
		}

		public static void TextureBuffer(uint texture, GLSizedInternalFormat internalformat, uint buffer)
		{
			TextureBufferNative(texture, internalformat, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureBufferRangeNative(uint texture, GLSizedInternalFormat internalformat, uint buffer, nint offset, nint size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSizedInternalFormat, uint, nint, nint, void>)funcTable[559])(texture, internalformat, buffer, offset, size);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSizedInternalFormat, uint, nint, nint, void>)funcTable[559])(texture, internalformat, buffer, offset, size);
			#endif
		}

		public static void TextureBufferRange(uint texture, GLSizedInternalFormat internalformat, uint buffer, nint offset, nint size)
		{
			TextureBufferRangeNative(texture, internalformat, buffer, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureParameterIivNative(uint texture, GLTextureParameterName pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureParameterName, int*, void>)funcTable[560])(texture, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureParameterName, nint, void>)funcTable[560])(texture, pname, (nint)@params);
			#endif
		}

		public static void TextureParameterIiv(uint texture, GLTextureParameterName pname, int* @params)
		{
			TextureParameterIivNative(texture, pname, @params);
		}

		public static void TextureParameterIiv(uint texture, GLTextureParameterName pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				TextureParameterIivNative(texture, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureParameterIuivNative(uint texture, GLTextureParameterName pname, uint* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureParameterName, uint*, void>)funcTable[561])(texture, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureParameterName, nint, void>)funcTable[561])(texture, pname, (nint)@params);
			#endif
		}

		public static void TextureParameterIuiv(uint texture, GLTextureParameterName pname, uint* @params)
		{
			TextureParameterIuivNative(texture, pname, @params);
		}

		public static void TextureParameterIuiv(uint texture, GLTextureParameterName pname, ref uint @params)
		{
			fixed (uint* pparams0 = &@params)
			{
				TextureParameterIuivNative(texture, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureParameterfNative(uint texture, GLTextureParameterName pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureParameterName, float, void>)funcTable[562])(texture, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureParameterName, float, void>)funcTable[562])(texture, pname, param);
			#endif
		}

		public static void TextureParameterf(uint texture, GLTextureParameterName pname, float param)
		{
			TextureParameterfNative(texture, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureParameterfvNative(uint texture, GLTextureParameterName pname, float* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureParameterName, float*, void>)funcTable[563])(texture, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureParameterName, nint, void>)funcTable[563])(texture, pname, (nint)param);
			#endif
		}

		public static void TextureParameterfv(uint texture, GLTextureParameterName pname, float* param)
		{
			TextureParameterfvNative(texture, pname, param);
		}

		public static void TextureParameterfv(uint texture, GLTextureParameterName pname, ref float param)
		{
			fixed (float* pparam0 = &param)
			{
				TextureParameterfvNative(texture, pname, pparam0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureParameteriNative(uint texture, GLTextureParameterName pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureParameterName, int, void>)funcTable[564])(texture, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureParameterName, int, void>)funcTable[564])(texture, pname, param);
			#endif
		}

		public static void TextureParameteri(uint texture, GLTextureParameterName pname, int param)
		{
			TextureParameteriNative(texture, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureParameterivNative(uint texture, GLTextureParameterName pname, int* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureParameterName, int*, void>)funcTable[565])(texture, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureParameterName, nint, void>)funcTable[565])(texture, pname, (nint)param);
			#endif
		}

		public static void TextureParameteriv(uint texture, GLTextureParameterName pname, int* param)
		{
			TextureParameterivNative(texture, pname, param);
		}

		public static void TextureParameteriv(uint texture, GLTextureParameterName pname, ref int param)
		{
			fixed (int* pparam0 = &param)
			{
				TextureParameterivNative(texture, pname, pparam0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorage1DNative(uint texture, int levels, GLSizedInternalFormat internalformat, int width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, void>)funcTable[566])(texture, levels, internalformat, width);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, void>)funcTable[566])(texture, levels, internalformat, width);
			#endif
		}

		public static void TextureStorage1D(uint texture, int levels, GLSizedInternalFormat internalformat, int width)
		{
			TextureStorage1DNative(texture, levels, internalformat, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorage2DNative(uint texture, int levels, GLSizedInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, void>)funcTable[567])(texture, levels, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, void>)funcTable[567])(texture, levels, internalformat, width, height);
			#endif
		}

		public static void TextureStorage2D(uint texture, int levels, GLSizedInternalFormat internalformat, int width, int height)
		{
			TextureStorage2DNative(texture, levels, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorage2DMultisampleNative(uint texture, int samples, GLSizedInternalFormat internalformat, int width, int height, byte fixedsamplelocations)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, byte, void>)funcTable[568])(texture, samples, internalformat, width, height, fixedsamplelocations);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, byte, void>)funcTable[568])(texture, samples, internalformat, width, height, fixedsamplelocations);
			#endif
		}

		public static void TextureStorage2DMultisample(uint texture, int samples, GLSizedInternalFormat internalformat, int width, int height, byte fixedsamplelocations)
		{
			TextureStorage2DMultisampleNative(texture, samples, internalformat, width, height, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorage3DNative(uint texture, int levels, GLSizedInternalFormat internalformat, int width, int height, int depth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, int, void>)funcTable[569])(texture, levels, internalformat, width, height, depth);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, int, void>)funcTable[569])(texture, levels, internalformat, width, height, depth);
			#endif
		}

		public static void TextureStorage3D(uint texture, int levels, GLSizedInternalFormat internalformat, int width, int height, int depth)
		{
			TextureStorage3DNative(texture, levels, internalformat, width, height, depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorage3DMultisampleNative(uint texture, int samples, GLSizedInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, int, byte, void>)funcTable[570])(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, int, byte, void>)funcTable[570])(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
			#endif
		}

		public static void TextureStorage3DMultisample(uint texture, int samples, GLSizedInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
		{
			TextureStorage3DMultisampleNative(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureSubImage1DNative(uint texture, int level, int xoffset, int width, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[571])(texture, level, xoffset, width, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[571])(texture, level, xoffset, width, format, type, (nint)pixels);
			#endif
		}

		public static void TextureSubImage1D(uint texture, int level, int xoffset, int width, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TextureSubImage1DNative(texture, level, xoffset, width, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureSubImage2DNative(uint texture, int level, int xoffset, int yoffset, int width, int height, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[572])(texture, level, xoffset, yoffset, width, height, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[572])(texture, level, xoffset, yoffset, width, height, format, type, (nint)pixels);
			#endif
		}

		public static void TextureSubImage2D(uint texture, int level, int xoffset, int yoffset, int width, int height, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TextureSubImage2DNative(texture, level, xoffset, yoffset, width, height, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureSubImage3DNative(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[573])(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[573])(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (nint)pixels);
			#endif
		}

		public static void TextureSubImage3D(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TextureSubImage3DNative(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureViewNative(uint texture, GLTextureTarget target, uint origtexture, GLSizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, uint, GLSizedInternalFormat, uint, uint, uint, uint, void>)funcTable[574])(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, uint, GLSizedInternalFormat, uint, uint, uint, uint, void>)funcTable[574])(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
			#endif
		}

		public static void TextureView(uint texture, GLTextureTarget target, uint origtexture, GLSizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
		{
			TextureViewNative(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TransformFeedbackBufferBaseNative(uint xfb, uint index, uint buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[575])(xfb, index, buffer);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[575])(xfb, index, buffer);
			#endif
		}

		public static void TransformFeedbackBufferBase(uint xfb, uint index, uint buffer)
		{
			TransformFeedbackBufferBaseNative(xfb, index, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TransformFeedbackBufferRangeNative(uint xfb, uint index, uint buffer, nint offset, nint size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, nint, void>)funcTable[576])(xfb, index, buffer, offset, size);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, nint, void>)funcTable[576])(xfb, index, buffer, offset, size);
			#endif
		}

		public static void TransformFeedbackBufferRange(uint xfb, uint index, uint buffer, nint offset, nint size)
		{
			TransformFeedbackBufferRangeNative(xfb, index, buffer, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1dNative(int location, double x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, double, void>)funcTable[577])(location, x);
			#else
			((delegate* unmanaged[Cdecl]<int, double, void>)funcTable[577])(location, x);
			#endif
		}

		public static void Uniform1d(int location, double x)
		{
			Uniform1dNative(location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1dvNative(int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, double*, void>)funcTable[578])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[578])(location, count, (nint)value);
			#endif
		}

		public static void Uniform1dv(int location, int count, double* value)
		{
			Uniform1dvNative(location, count, value);
		}

		public static void Uniform1dv(int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				Uniform1dvNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1fARBNative(int location, float v0)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float, void>)funcTable[579])(location, v0);
			#else
			((delegate* unmanaged[Cdecl]<int, float, void>)funcTable[579])(location, v0);
			#endif
		}

		public static void Uniform1fARB(int location, float v0)
		{
			Uniform1fARBNative(location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1fvARBNative(int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, float*, void>)funcTable[580])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[580])(location, count, (nint)value);
			#endif
		}

		public static void Uniform1fvARB(int location, int count, float* value)
		{
			Uniform1fvARBNative(location, count, value);
		}

		public static void Uniform1fvARB(int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				Uniform1fvARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1i64ARBNative(int location, long x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, long, void>)funcTable[581])(location, x);
			#else
			((delegate* unmanaged[Cdecl]<int, long, void>)funcTable[581])(location, x);
			#endif
		}

		public static void Uniform1i64ARB(int location, long x)
		{
			Uniform1i64ARBNative(location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1i64vARBNative(int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, long*, void>)funcTable[582])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[582])(location, count, (nint)value);
			#endif
		}

		public static void Uniform1i64vARB(int location, int count, long* value)
		{
			Uniform1i64vARBNative(location, count, value);
		}

		public static void Uniform1i64vARB(int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				Uniform1i64vARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1iARBNative(int location, int v0)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[583])(location, v0);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[583])(location, v0);
			#endif
		}

		public static void Uniform1iARB(int location, int v0)
		{
			Uniform1iARBNative(location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1ivARBNative(int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int*, void>)funcTable[584])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[584])(location, count, (nint)value);
			#endif
		}

		public static void Uniform1ivARB(int location, int count, int* value)
		{
			Uniform1ivARBNative(location, count, value);
		}

		public static void Uniform1ivARB(int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				Uniform1ivARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1ui64ARBNative(int location, ulong x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ulong, void>)funcTable[585])(location, x);
			#else
			((delegate* unmanaged[Cdecl]<int, ulong, void>)funcTable[585])(location, x);
			#endif
		}

		public static void Uniform1ui64ARB(int location, ulong x)
		{
			Uniform1ui64ARBNative(location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1ui64vARBNative(int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)funcTable[586])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[586])(location, count, (nint)value);
			#endif
		}

		public static void Uniform1ui64vARB(int location, int count, ulong* value)
		{
			Uniform1ui64vARBNative(location, count, value);
		}

		public static void Uniform1ui64vARB(int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				Uniform1ui64vARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform2dNative(int location, double x, double y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, double, double, void>)funcTable[587])(location, x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, double, double, void>)funcTable[587])(location, x, y);
			#endif
		}

		public static void Uniform2d(int location, double x, double y)
		{
			Uniform2dNative(location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform2dvNative(int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, double*, void>)funcTable[588])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[588])(location, count, (nint)value);
			#endif
		}

		public static void Uniform2dv(int location, int count, double* value)
		{
			Uniform2dvNative(location, count, value);
		}

		public static void Uniform2dv(int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				Uniform2dvNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform2fARBNative(int location, float v0, float v1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float, float, void>)funcTable[589])(location, v0, v1);
			#else
			((delegate* unmanaged[Cdecl]<int, float, float, void>)funcTable[589])(location, v0, v1);
			#endif
		}

		public static void Uniform2fARB(int location, float v0, float v1)
		{
			Uniform2fARBNative(location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform2fvARBNative(int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, float*, void>)funcTable[590])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[590])(location, count, (nint)value);
			#endif
		}

		public static void Uniform2fvARB(int location, int count, float* value)
		{
			Uniform2fvARBNative(location, count, value);
		}

		public static void Uniform2fvARB(int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				Uniform2fvARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform2i64ARBNative(int location, long x, long y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, long, long, void>)funcTable[591])(location, x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, long, long, void>)funcTable[591])(location, x, y);
			#endif
		}

		public static void Uniform2i64ARB(int location, long x, long y)
		{
			Uniform2i64ARBNative(location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform2i64vARBNative(int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, long*, void>)funcTable[592])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[592])(location, count, (nint)value);
			#endif
		}

		public static void Uniform2i64vARB(int location, int count, long* value)
		{
			Uniform2i64vARBNative(location, count, value);
		}

		public static void Uniform2i64vARB(int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				Uniform2i64vARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform2iARBNative(int location, int v0, int v1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[593])(location, v0, v1);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[593])(location, v0, v1);
			#endif
		}

		public static void Uniform2iARB(int location, int v0, int v1)
		{
			Uniform2iARBNative(location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform2ivARBNative(int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int*, void>)funcTable[594])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[594])(location, count, (nint)value);
			#endif
		}

		public static void Uniform2ivARB(int location, int count, int* value)
		{
			Uniform2ivARBNative(location, count, value);
		}

		public static void Uniform2ivARB(int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				Uniform2ivARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform2ui64ARBNative(int location, ulong x, ulong y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ulong, ulong, void>)funcTable[595])(location, x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, ulong, ulong, void>)funcTable[595])(location, x, y);
			#endif
		}

		public static void Uniform2ui64ARB(int location, ulong x, ulong y)
		{
			Uniform2ui64ARBNative(location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform2ui64vARBNative(int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)funcTable[596])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[596])(location, count, (nint)value);
			#endif
		}

		public static void Uniform2ui64vARB(int location, int count, ulong* value)
		{
			Uniform2ui64vARBNative(location, count, value);
		}

		public static void Uniform2ui64vARB(int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				Uniform2ui64vARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform3dNative(int location, double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, double, double, double, void>)funcTable[597])(location, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, double, double, double, void>)funcTable[597])(location, x, y, z);
			#endif
		}

		public static void Uniform3d(int location, double x, double y, double z)
		{
			Uniform3dNative(location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform3dvNative(int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, double*, void>)funcTable[598])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[598])(location, count, (nint)value);
			#endif
		}

		public static void Uniform3dv(int location, int count, double* value)
		{
			Uniform3dvNative(location, count, value);
		}

		public static void Uniform3dv(int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				Uniform3dvNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform3fARBNative(int location, float v0, float v1, float v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float, float, float, void>)funcTable[599])(location, v0, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<int, float, float, float, void>)funcTable[599])(location, v0, v1, v2);
			#endif
		}

		public static void Uniform3fARB(int location, float v0, float v1, float v2)
		{
			Uniform3fARBNative(location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform3fvARBNative(int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, float*, void>)funcTable[600])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[600])(location, count, (nint)value);
			#endif
		}

		public static void Uniform3fvARB(int location, int count, float* value)
		{
			Uniform3fvARBNative(location, count, value);
		}

		public static void Uniform3fvARB(int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				Uniform3fvARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform3i64ARBNative(int location, long x, long y, long z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, long, long, long, void>)funcTable[601])(location, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, long, long, long, void>)funcTable[601])(location, x, y, z);
			#endif
		}

		public static void Uniform3i64ARB(int location, long x, long y, long z)
		{
			Uniform3i64ARBNative(location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform3i64vARBNative(int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, long*, void>)funcTable[602])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[602])(location, count, (nint)value);
			#endif
		}

		public static void Uniform3i64vARB(int location, int count, long* value)
		{
			Uniform3i64vARBNative(location, count, value);
		}

		public static void Uniform3i64vARB(int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				Uniform3i64vARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform3iARBNative(int location, int v0, int v1, int v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[603])(location, v0, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[603])(location, v0, v1, v2);
			#endif
		}

		public static void Uniform3iARB(int location, int v0, int v1, int v2)
		{
			Uniform3iARBNative(location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform3ivARBNative(int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int*, void>)funcTable[604])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[604])(location, count, (nint)value);
			#endif
		}

		public static void Uniform3ivARB(int location, int count, int* value)
		{
			Uniform3ivARBNative(location, count, value);
		}

		public static void Uniform3ivARB(int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				Uniform3ivARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform3ui64ARBNative(int location, ulong x, ulong y, ulong z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong, void>)funcTable[605])(location, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong, void>)funcTable[605])(location, x, y, z);
			#endif
		}

		public static void Uniform3ui64ARB(int location, ulong x, ulong y, ulong z)
		{
			Uniform3ui64ARBNative(location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform3ui64vARBNative(int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)funcTable[606])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[606])(location, count, (nint)value);
			#endif
		}

		public static void Uniform3ui64vARB(int location, int count, ulong* value)
		{
			Uniform3ui64vARBNative(location, count, value);
		}

		public static void Uniform3ui64vARB(int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				Uniform3ui64vARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform4dNative(int location, double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, double, double, double, double, void>)funcTable[607])(location, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<int, double, double, double, double, void>)funcTable[607])(location, x, y, z, w);
			#endif
		}

		public static void Uniform4d(int location, double x, double y, double z, double w)
		{
			Uniform4dNative(location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform4dvNative(int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, double*, void>)funcTable[608])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[608])(location, count, (nint)value);
			#endif
		}

		public static void Uniform4dv(int location, int count, double* value)
		{
			Uniform4dvNative(location, count, value);
		}

		public static void Uniform4dv(int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				Uniform4dvNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform4fARBNative(int location, float v0, float v1, float v2, float v3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float, float, float, float, void>)funcTable[609])(location, v0, v1, v2, v3);
			#else
			((delegate* unmanaged[Cdecl]<int, float, float, float, float, void>)funcTable[609])(location, v0, v1, v2, v3);
			#endif
		}

		public static void Uniform4fARB(int location, float v0, float v1, float v2, float v3)
		{
			Uniform4fARBNative(location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform4fvARBNative(int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, float*, void>)funcTable[610])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[610])(location, count, (nint)value);
			#endif
		}

		public static void Uniform4fvARB(int location, int count, float* value)
		{
			Uniform4fvARBNative(location, count, value);
		}

		public static void Uniform4fvARB(int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				Uniform4fvARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform4i64ARBNative(int location, long x, long y, long z, long w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, long, long, long, long, void>)funcTable[611])(location, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<int, long, long, long, long, void>)funcTable[611])(location, x, y, z, w);
			#endif
		}

		public static void Uniform4i64ARB(int location, long x, long y, long z, long w)
		{
			Uniform4i64ARBNative(location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform4i64vARBNative(int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, long*, void>)funcTable[612])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[612])(location, count, (nint)value);
			#endif
		}

		public static void Uniform4i64vARB(int location, int count, long* value)
		{
			Uniform4i64vARBNative(location, count, value);
		}

		public static void Uniform4i64vARB(int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				Uniform4i64vARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform4iARBNative(int location, int v0, int v1, int v2, int v3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, void>)funcTable[613])(location, v0, v1, v2, v3);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, void>)funcTable[613])(location, v0, v1, v2, v3);
			#endif
		}

		public static void Uniform4iARB(int location, int v0, int v1, int v2, int v3)
		{
			Uniform4iARBNative(location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform4ivARBNative(int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int*, void>)funcTable[614])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[614])(location, count, (nint)value);
			#endif
		}

		public static void Uniform4ivARB(int location, int count, int* value)
		{
			Uniform4ivARBNative(location, count, value);
		}

		public static void Uniform4ivARB(int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				Uniform4ivARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform4ui64ARBNative(int location, ulong x, ulong y, ulong z, ulong w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong, ulong, void>)funcTable[615])(location, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong, ulong, void>)funcTable[615])(location, x, y, z, w);
			#endif
		}

		public static void Uniform4ui64ARB(int location, ulong x, ulong y, ulong z, ulong w)
		{
			Uniform4ui64ARBNative(location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform4ui64vARBNative(int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)funcTable[616])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[616])(location, count, (nint)value);
			#endif
		}

		public static void Uniform4ui64vARB(int location, int count, ulong* value)
		{
			Uniform4ui64vARBNative(location, count, value);
		}

		public static void Uniform4ui64vARB(int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				Uniform4ui64vARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformBlockBindingNative(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[617])(program, uniformBlockIndex, uniformBlockBinding);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[617])(program, uniformBlockIndex, uniformBlockBinding);
			#endif
		}

		public static void UniformBlockBinding(uint program, uint uniformBlockIndex, uint uniformBlockBinding)
		{
			UniformBlockBindingNative(program, uniformBlockIndex, uniformBlockBinding);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformHandleui64ARBNative(int location, ulong value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ulong, void>)funcTable[618])(location, value);
			#else
			((delegate* unmanaged[Cdecl]<int, ulong, void>)funcTable[618])(location, value);
			#endif
		}

		public static void UniformHandleui64ARB(int location, ulong value)
		{
			UniformHandleui64ARBNative(location, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformHandleui64vARBNative(int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)funcTable[619])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[619])(location, count, (nint)value);
			#endif
		}

		public static void UniformHandleui64vARB(int location, int count, ulong* value)
		{
			UniformHandleui64vARBNative(location, count, value);
		}

		public static void UniformHandleui64vARB(int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				UniformHandleui64vARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformMatrix2dvNative(int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)funcTable[620])(location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, byte, nint, void>)funcTable[620])(location, count, transpose, (nint)value);
			#endif
		}

		public static void UniformMatrix2dv(int location, int count, byte transpose, double* value)
		{
			UniformMatrix2dvNative(location, count, transpose, value);
		}

		public static void UniformMatrix2dv(int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				UniformMatrix2dvNative(location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformMatrix2fvARBNative(int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)funcTable[621])(location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, byte, nint, void>)funcTable[621])(location, count, transpose, (nint)value);
			#endif
		}

		public static void UniformMatrix2fvARB(int location, int count, byte transpose, float* value)
		{
			UniformMatrix2fvARBNative(location, count, transpose, value);
		}

		public static void UniformMatrix2fvARB(int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				UniformMatrix2fvARBNative(location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformMatrix2x3dvNative(int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)funcTable[622])(location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, byte, nint, void>)funcTable[622])(location, count, transpose, (nint)value);
			#endif
		}

		public static void UniformMatrix2x3dv(int location, int count, byte transpose, double* value)
		{
			UniformMatrix2x3dvNative(location, count, transpose, value);
		}

		public static void UniformMatrix2x3dv(int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				UniformMatrix2x3dvNative(location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformMatrix2x4dvNative(int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)funcTable[623])(location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, byte, nint, void>)funcTable[623])(location, count, transpose, (nint)value);
			#endif
		}

		public static void UniformMatrix2x4dv(int location, int count, byte transpose, double* value)
		{
			UniformMatrix2x4dvNative(location, count, transpose, value);
		}

		public static void UniformMatrix2x4dv(int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				UniformMatrix2x4dvNative(location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformMatrix3dvNative(int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)funcTable[624])(location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, byte, nint, void>)funcTable[624])(location, count, transpose, (nint)value);
			#endif
		}

		public static void UniformMatrix3dv(int location, int count, byte transpose, double* value)
		{
			UniformMatrix3dvNative(location, count, transpose, value);
		}

		public static void UniformMatrix3dv(int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				UniformMatrix3dvNative(location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformMatrix3fvARBNative(int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)funcTable[625])(location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, byte, nint, void>)funcTable[625])(location, count, transpose, (nint)value);
			#endif
		}

		public static void UniformMatrix3fvARB(int location, int count, byte transpose, float* value)
		{
			UniformMatrix3fvARBNative(location, count, transpose, value);
		}

		public static void UniformMatrix3fvARB(int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				UniformMatrix3fvARBNative(location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformMatrix3x2dvNative(int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)funcTable[626])(location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, byte, nint, void>)funcTable[626])(location, count, transpose, (nint)value);
			#endif
		}

		public static void UniformMatrix3x2dv(int location, int count, byte transpose, double* value)
		{
			UniformMatrix3x2dvNative(location, count, transpose, value);
		}

		public static void UniformMatrix3x2dv(int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				UniformMatrix3x2dvNative(location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformMatrix3x4dvNative(int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)funcTable[627])(location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, byte, nint, void>)funcTable[627])(location, count, transpose, (nint)value);
			#endif
		}

		public static void UniformMatrix3x4dv(int location, int count, byte transpose, double* value)
		{
			UniformMatrix3x4dvNative(location, count, transpose, value);
		}

		public static void UniformMatrix3x4dv(int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				UniformMatrix3x4dvNative(location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformMatrix4dvNative(int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)funcTable[628])(location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, byte, nint, void>)funcTable[628])(location, count, transpose, (nint)value);
			#endif
		}

		public static void UniformMatrix4dv(int location, int count, byte transpose, double* value)
		{
			UniformMatrix4dvNative(location, count, transpose, value);
		}

		public static void UniformMatrix4dv(int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				UniformMatrix4dvNative(location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformMatrix4fvARBNative(int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, byte, float*, void>)funcTable[629])(location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, byte, nint, void>)funcTable[629])(location, count, transpose, (nint)value);
			#endif
		}

		public static void UniformMatrix4fvARB(int location, int count, byte transpose, float* value)
		{
			UniformMatrix4fvARBNative(location, count, transpose, value);
		}

		public static void UniformMatrix4fvARB(int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				UniformMatrix4fvARBNative(location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformMatrix4x2dvNative(int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)funcTable[630])(location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, byte, nint, void>)funcTable[630])(location, count, transpose, (nint)value);
			#endif
		}

		public static void UniformMatrix4x2dv(int location, int count, byte transpose, double* value)
		{
			UniformMatrix4x2dvNative(location, count, transpose, value);
		}

		public static void UniformMatrix4x2dv(int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				UniformMatrix4x2dvNative(location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformMatrix4x3dvNative(int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, byte, double*, void>)funcTable[631])(location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, byte, nint, void>)funcTable[631])(location, count, transpose, (nint)value);
			#endif
		}

		public static void UniformMatrix4x3dv(int location, int count, byte transpose, double* value)
		{
			UniformMatrix4x3dvNative(location, count, transpose, value);
		}

		public static void UniformMatrix4x3dv(int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				UniformMatrix4x3dvNative(location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformSubroutinesuivNative(GLShaderType shadertype, int count, uint* indices)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLShaderType, int, uint*, void>)funcTable[632])(shadertype, count, indices);
			#else
			((delegate* unmanaged[Cdecl]<GLShaderType, int, nint, void>)funcTable[632])(shadertype, count, (nint)indices);
			#endif
		}

		public static void UniformSubroutinesuiv(GLShaderType shadertype, int count, uint* indices)
		{
			UniformSubroutinesuivNative(shadertype, count, indices);
		}

		public static void UniformSubroutinesuiv(GLShaderType shadertype, int count, ref uint indices)
		{
			fixed (uint* pindices0 = &indices)
			{
				UniformSubroutinesuivNative(shadertype, count, pindices0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte UnmapBufferARBNative(GLBufferTargetARB target)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLBufferTargetARB, byte>)funcTable[633])(target);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<GLBufferTargetARB, byte>)funcTable[633])(target);
			#endif
		}

		public static bool UnmapBufferARB(GLBufferTargetARB target)
		{
			byte ret = UnmapBufferARBNative(target);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte UnmapNamedBufferNative(uint buffer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[634])(buffer);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[634])(buffer);
			#endif
		}

		public static bool UnmapNamedBuffer(uint buffer)
		{
			byte ret = UnmapNamedBufferNative(buffer);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UseProgramObjectARBNative(uint programObj)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[635])(programObj);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[635])(programObj);
			#endif
		}

		public static void UseProgramObjectARB(uint programObj)
		{
			UseProgramObjectARBNative(programObj);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UseProgramStagesNative(uint pipeline, GLUseProgramStageMask stages, uint program)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLUseProgramStageMask, uint, void>)funcTable[636])(pipeline, stages, program);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLUseProgramStageMask, uint, void>)funcTable[636])(pipeline, stages, program);
			#endif
		}

		public static void UseProgramStages(uint pipeline, GLUseProgramStageMask stages, uint program)
		{
			UseProgramStagesNative(pipeline, stages, program);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ValidateProgramARBNative(uint programObj)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[637])(programObj);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[637])(programObj);
			#endif
		}

		public static void ValidateProgramARB(uint programObj)
		{
			ValidateProgramARBNative(programObj);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ValidateProgramPipelineNative(uint pipeline)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[638])(pipeline);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[638])(pipeline);
			#endif
		}

		public static void ValidateProgramPipeline(uint pipeline)
		{
			ValidateProgramPipelineNative(pipeline);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexArrayAttribBindingNative(uint vaobj, uint attribindex, uint bindingindex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[639])(vaobj, attribindex, bindingindex);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[639])(vaobj, attribindex, bindingindex);
			#endif
		}

		public static void VertexArrayAttribBinding(uint vaobj, uint attribindex, uint bindingindex)
		{
			VertexArrayAttribBindingNative(vaobj, attribindex, bindingindex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexArrayAttribFormatNative(uint vaobj, uint attribindex, int size, GLVertexAttribType type, byte normalized, uint relativeoffset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, GLVertexAttribType, byte, uint, void>)funcTable[640])(vaobj, attribindex, size, type, normalized, relativeoffset);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, GLVertexAttribType, byte, uint, void>)funcTable[640])(vaobj, attribindex, size, type, normalized, relativeoffset);
			#endif
		}

		public static void VertexArrayAttribFormat(uint vaobj, uint attribindex, int size, GLVertexAttribType type, byte normalized, uint relativeoffset)
		{
			VertexArrayAttribFormatNative(vaobj, attribindex, size, type, normalized, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexArrayAttribIFormatNative(uint vaobj, uint attribindex, int size, GLVertexAttribIType type, uint relativeoffset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, GLVertexAttribIType, uint, void>)funcTable[641])(vaobj, attribindex, size, type, relativeoffset);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, GLVertexAttribIType, uint, void>)funcTable[641])(vaobj, attribindex, size, type, relativeoffset);
			#endif
		}

		public static void VertexArrayAttribIFormat(uint vaobj, uint attribindex, int size, GLVertexAttribIType type, uint relativeoffset)
		{
			VertexArrayAttribIFormatNative(vaobj, attribindex, size, type, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexArrayAttribLFormatNative(uint vaobj, uint attribindex, int size, GLVertexAttribLType type, uint relativeoffset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, GLVertexAttribLType, uint, void>)funcTable[642])(vaobj, attribindex, size, type, relativeoffset);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, GLVertexAttribLType, uint, void>)funcTable[642])(vaobj, attribindex, size, type, relativeoffset);
			#endif
		}

		public static void VertexArrayAttribLFormat(uint vaobj, uint attribindex, int size, GLVertexAttribLType type, uint relativeoffset)
		{
			VertexArrayAttribLFormatNative(vaobj, attribindex, size, type, relativeoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexArrayBindingDivisorNative(uint vaobj, uint bindingindex, uint divisor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[643])(vaobj, bindingindex, divisor);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[643])(vaobj, bindingindex, divisor);
			#endif
		}

		public static void VertexArrayBindingDivisor(uint vaobj, uint bindingindex, uint divisor)
		{
			VertexArrayBindingDivisorNative(vaobj, bindingindex, divisor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexArrayElementBufferNative(uint vaobj, uint buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[644])(vaobj, buffer);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[644])(vaobj, buffer);
			#endif
		}

		public static void VertexArrayElementBuffer(uint vaobj, uint buffer)
		{
			VertexArrayElementBufferNative(vaobj, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexArrayVertexBufferNative(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, int, void>)funcTable[645])(vaobj, bindingindex, buffer, offset, stride);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, int, void>)funcTable[645])(vaobj, bindingindex, buffer, offset, stride);
			#endif
		}

		public static void VertexArrayVertexBuffer(uint vaobj, uint bindingindex, uint buffer, nint offset, int stride)
		{
			VertexArrayVertexBufferNative(vaobj, bindingindex, buffer, offset, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexArrayVertexBuffersNative(uint vaobj, uint first, int count, uint* buffers, nint* offsets, int* strides)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, uint*, nint*, int*, void>)funcTable[646])(vaobj, first, count, buffers, offsets, strides);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, nint, nint, nint, void>)funcTable[646])(vaobj, first, count, (nint)buffers, (nint)offsets, (nint)strides);
			#endif
		}

		public static void VertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, nint* offsets, int* strides)
		{
			VertexArrayVertexBuffersNative(vaobj, first, count, buffers, offsets, strides);
		}

		public static void VertexArrayVertexBuffers(uint vaobj, uint first, int count, ref uint buffers, nint* offsets, int* strides)
		{
			fixed (uint* pbuffers0 = &buffers)
			{
				VertexArrayVertexBuffersNative(vaobj, first, count, pbuffers0, offsets, strides);
			}
		}

		public static void VertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, ref nint offsets, int* strides)
		{
			fixed (nint* poffsets0 = &offsets)
			{
				VertexArrayVertexBuffersNative(vaobj, first, count, buffers, poffsets0, strides);
			}
		}

		public static void VertexArrayVertexBuffers(uint vaobj, uint first, int count, ref uint buffers, ref nint offsets, int* strides)
		{
			fixed (uint* pbuffers0 = &buffers)
			{
				fixed (nint* poffsets1 = &offsets)
				{
					VertexArrayVertexBuffersNative(vaobj, first, count, pbuffers0, poffsets1, strides);
				}
			}
		}

		public static void VertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, nint* offsets, ref int strides)
		{
			fixed (int* pstrides0 = &strides)
			{
				VertexArrayVertexBuffersNative(vaobj, first, count, buffers, offsets, pstrides0);
			}
		}

		public static void VertexArrayVertexBuffers(uint vaobj, uint first, int count, ref uint buffers, nint* offsets, ref int strides)
		{
			fixed (uint* pbuffers0 = &buffers)
			{
				fixed (int* pstrides1 = &strides)
				{
					VertexArrayVertexBuffersNative(vaobj, first, count, pbuffers0, offsets, pstrides1);
				}
			}
		}

		public static void VertexArrayVertexBuffers(uint vaobj, uint first, int count, uint* buffers, ref nint offsets, ref int strides)
		{
			fixed (nint* poffsets0 = &offsets)
			{
				fixed (int* pstrides1 = &strides)
				{
					VertexArrayVertexBuffersNative(vaobj, first, count, buffers, poffsets0, pstrides1);
				}
			}
		}

		public static void VertexArrayVertexBuffers(uint vaobj, uint first, int count, ref uint buffers, ref nint offsets, ref int strides)
		{
			fixed (uint* pbuffers0 = &buffers)
			{
				fixed (nint* poffsets1 = &offsets)
				{
					fixed (int* pstrides2 = &strides)
					{
						VertexArrayVertexBuffersNative(vaobj, first, count, pbuffers0, poffsets1, pstrides2);
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1dARBNative(uint index, double x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[647])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[647])(index, x);
			#endif
		}

		public static void VertexAttrib1dARB(uint index, double x)
		{
			VertexAttrib1dARBNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1dvARBNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[648])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[648])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib1dvARB(uint index, double* v)
		{
			VertexAttrib1dvARBNative(index, v);
		}

		public static void VertexAttrib1dvARB(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib1dvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1fARBNative(uint index, float x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[649])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[649])(index, x);
			#endif
		}

		public static void VertexAttrib1fARB(uint index, float x)
		{
			VertexAttrib1fARBNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1fvARBNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[650])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[650])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib1fvARB(uint index, float* v)
		{
			VertexAttrib1fvARBNative(index, v);
		}

		public static void VertexAttrib1fvARB(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib1fvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1sARBNative(uint index, short x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[651])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[651])(index, x);
			#endif
		}

		public static void VertexAttrib1sARB(uint index, short x)
		{
			VertexAttrib1sARBNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1svARBNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[652])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[652])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib1svARB(uint index, short* v)
		{
			VertexAttrib1svARBNative(index, v);
		}

		public static void VertexAttrib1svARB(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib1svARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2dARBNative(uint index, double x, double y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[653])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[653])(index, x, y);
			#endif
		}

		public static void VertexAttrib2dARB(uint index, double x, double y)
		{
			VertexAttrib2dARBNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2dvARBNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[654])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[654])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib2dvARB(uint index, double* v)
		{
			VertexAttrib2dvARBNative(index, v);
		}

		public static void VertexAttrib2dvARB(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib2dvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2fARBNative(uint index, float x, float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[655])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[655])(index, x, y);
			#endif
		}

		public static void VertexAttrib2fARB(uint index, float x, float y)
		{
			VertexAttrib2fARBNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2fvARBNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[656])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[656])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib2fvARB(uint index, float* v)
		{
			VertexAttrib2fvARBNative(index, v);
		}

		public static void VertexAttrib2fvARB(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib2fvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2sARBNative(uint index, short x, short y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[657])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[657])(index, x, y);
			#endif
		}

		public static void VertexAttrib2sARB(uint index, short x, short y)
		{
			VertexAttrib2sARBNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2svARBNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[658])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[658])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib2svARB(uint index, short* v)
		{
			VertexAttrib2svARBNative(index, v);
		}

		public static void VertexAttrib2svARB(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib2svARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3dARBNative(uint index, double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[659])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[659])(index, x, y, z);
			#endif
		}

		public static void VertexAttrib3dARB(uint index, double x, double y, double z)
		{
			VertexAttrib3dARBNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3dvARBNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[660])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[660])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib3dvARB(uint index, double* v)
		{
			VertexAttrib3dvARBNative(index, v);
		}

		public static void VertexAttrib3dvARB(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib3dvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3fARBNative(uint index, float x, float y, float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[661])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[661])(index, x, y, z);
			#endif
		}

		public static void VertexAttrib3fARB(uint index, float x, float y, float z)
		{
			VertexAttrib3fARBNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3fvARBNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[662])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[662])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib3fvARB(uint index, float* v)
		{
			VertexAttrib3fvARBNative(index, v);
		}

		public static void VertexAttrib3fvARB(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib3fvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3sARBNative(uint index, short x, short y, short z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[663])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[663])(index, x, y, z);
			#endif
		}

		public static void VertexAttrib3sARB(uint index, short x, short y, short z)
		{
			VertexAttrib3sARBNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3svARBNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[664])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[664])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib3svARB(uint index, short* v)
		{
			VertexAttrib3svARBNative(index, v);
		}

		public static void VertexAttrib3svARB(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib3svARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NbvARBNative(uint index, sbyte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)funcTable[665])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[665])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4NbvARB(uint index, sbyte* v)
		{
			VertexAttrib4NbvARBNative(index, v);
		}

		public static void VertexAttrib4NbvARB(uint index, ref sbyte v)
		{
			fixed (sbyte* pv0 = &v)
			{
				VertexAttrib4NbvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NivARBNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[666])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[666])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4NivARB(uint index, int* v)
		{
			VertexAttrib4NivARBNative(index, v);
		}

		public static void VertexAttrib4NivARB(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				VertexAttrib4NivARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NsvARBNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[667])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[667])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4NsvARB(uint index, short* v)
		{
			VertexAttrib4NsvARBNative(index, v);
		}

		public static void VertexAttrib4NsvARB(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib4NsvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NubARBNative(uint index, byte x, byte y, byte z, byte w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)funcTable[668])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)funcTable[668])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4NubARB(uint index, byte x, byte y, byte z, byte w)
		{
			VertexAttrib4NubARBNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NubvARBNative(uint index, byte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte*, void>)funcTable[669])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[669])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4NubvARB(uint index, byte* v)
		{
			VertexAttrib4NubvARBNative(index, v);
		}

		public static void VertexAttrib4NubvARB(uint index, string v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (v != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(v);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(v, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VertexAttrib4NubvARBNative(index, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void VertexAttrib4NubvARB(uint index, ReadOnlySpan<byte> v)
		{
			fixed (byte* pv0 = v)
			{
				VertexAttrib4NubvARBNative(index, pv0);
			}
		}

		public static void VertexAttrib4NubvARB(uint index, ref byte v)
		{
			fixed (byte* pv0 = &v)
			{
				VertexAttrib4NubvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NuivARBNative(uint index, uint* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[670])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[670])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4NuivARB(uint index, uint* v)
		{
			VertexAttrib4NuivARBNative(index, v);
		}

		public static void VertexAttrib4NuivARB(uint index, ref uint v)
		{
			fixed (uint* pv0 = &v)
			{
				VertexAttrib4NuivARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4NusvARBNative(uint index, ushort* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ushort*, void>)funcTable[671])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[671])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4NusvARB(uint index, ushort* v)
		{
			VertexAttrib4NusvARBNative(index, v);
		}

		public static void VertexAttrib4NusvARB(uint index, ref ushort v)
		{
			fixed (ushort* pv0 = &v)
			{
				VertexAttrib4NusvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4bvARBNative(uint index, sbyte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)funcTable[672])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[672])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4bvARB(uint index, sbyte* v)
		{
			VertexAttrib4bvARBNative(index, v);
		}

		public static void VertexAttrib4bvARB(uint index, ref sbyte v)
		{
			fixed (sbyte* pv0 = &v)
			{
				VertexAttrib4bvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4dARBNative(uint index, double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[673])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[673])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4dARB(uint index, double x, double y, double z, double w)
		{
			VertexAttrib4dARBNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4dvARBNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[674])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[674])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4dvARB(uint index, double* v)
		{
			VertexAttrib4dvARBNative(index, v);
		}

		public static void VertexAttrib4dvARB(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib4dvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4fARBNative(uint index, float x, float y, float z, float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[675])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[675])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4fARB(uint index, float x, float y, float z, float w)
		{
			VertexAttrib4fARBNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4fvARBNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[676])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[676])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4fvARB(uint index, float* v)
		{
			VertexAttrib4fvARBNative(index, v);
		}

		public static void VertexAttrib4fvARB(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib4fvARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4ivARBNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[677])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[677])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4ivARB(uint index, int* v)
		{
			VertexAttrib4ivARBNative(index, v);
		}

		public static void VertexAttrib4ivARB(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				VertexAttrib4ivARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4sARBNative(uint index, short x, short y, short z, short w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[678])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[678])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4sARB(uint index, short x, short y, short z, short w)
		{
			VertexAttrib4sARBNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4svARBNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[679])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[679])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4svARB(uint index, short* v)
		{
			VertexAttrib4svARBNative(index, v);
		}

		public static void VertexAttrib4svARB(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib4svARBNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4ubvARBNative(uint index, byte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte*, void>)funcTable[680])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[680])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4ubvARB(uint index, byte* v)
		{
			VertexAttrib4ubvARBNative(index, v);
		}

		public static void VertexAttrib4ubvARB(uint index, string v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (v != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(v);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(v, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VertexAttrib4ubvARBNative(index, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void VertexAttrib4ubvARB(uint index, ReadOnlySpan<byte> v)
		{
			fixed (byte* pv0 = v)
			{
				VertexAttrib4ubvARBNative(index, pv0);
			}
		}

		public static void VertexAttrib4ubvARB(uint index, ref byte v)
		{
			fixed (byte* pv0 = &v)
			{
				VertexAttrib4ubvARBNative(index, pv0);
			}
		}
	}
}
