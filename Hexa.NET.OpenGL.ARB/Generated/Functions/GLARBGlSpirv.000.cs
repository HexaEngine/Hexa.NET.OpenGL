// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.ARB
{
	public unsafe partial class GLARBGlSpirv
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void SpecializeShaderARBNative(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte*, uint, uint*, uint*, void>)funcTable[0])(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, uint, nint, nint, void>)funcTable[0])(shader, (nint)pEntryPoint, numSpecializationConstants, (nint)pConstantIndex, (nint)pConstantValue);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
		{
			SpecializeShaderARBNative(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, pConstantValue);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, string pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pEntryPoint != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pEntryPoint);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pEntryPoint, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SpecializeShaderARBNative(shader, pStr0, numSpecializationConstants, pConstantIndex, pConstantValue);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, Span<byte> pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
		{
			fixed (byte* ppEntryPoint0 = pEntryPoint)
			{
				SpecializeShaderARBNative(shader, ppEntryPoint0, numSpecializationConstants, pConstantIndex, pConstantValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, ref byte pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, uint* pConstantValue)
		{
			fixed (byte* ppEntryPoint0 = &pEntryPoint)
			{
				SpecializeShaderARBNative(shader, ppEntryPoint0, numSpecializationConstants, pConstantIndex, pConstantValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, Span<uint> pConstantIndex, uint* pConstantValue)
		{
			fixed (uint* ppConstantIndex0 = pConstantIndex)
			{
				SpecializeShaderARBNative(shader, pEntryPoint, numSpecializationConstants, ppConstantIndex0, pConstantValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, ref uint pConstantIndex, uint* pConstantValue)
		{
			fixed (uint* ppConstantIndex0 = &pConstantIndex)
			{
				SpecializeShaderARBNative(shader, pEntryPoint, numSpecializationConstants, ppConstantIndex0, pConstantValue);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, Span<byte> pEntryPoint, uint numSpecializationConstants, Span<uint> pConstantIndex, uint* pConstantValue)
		{
			fixed (byte* ppEntryPoint0 = pEntryPoint)
			{
				fixed (uint* ppConstantIndex1 = pConstantIndex)
				{
					SpecializeShaderARBNative(shader, ppEntryPoint0, numSpecializationConstants, ppConstantIndex1, pConstantValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, ref byte pEntryPoint, uint numSpecializationConstants, ref uint pConstantIndex, uint* pConstantValue)
		{
			fixed (byte* ppEntryPoint0 = &pEntryPoint)
			{
				fixed (uint* ppConstantIndex1 = &pConstantIndex)
				{
					SpecializeShaderARBNative(shader, ppEntryPoint0, numSpecializationConstants, ppConstantIndex1, pConstantValue);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, Span<uint> pConstantValue)
		{
			fixed (uint* ppConstantValue0 = pConstantValue)
			{
				SpecializeShaderARBNative(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, ppConstantValue0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, ref uint pConstantValue)
		{
			fixed (uint* ppConstantValue0 = &pConstantValue)
			{
				SpecializeShaderARBNative(shader, pEntryPoint, numSpecializationConstants, pConstantIndex, ppConstantValue0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, Span<byte> pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, Span<uint> pConstantValue)
		{
			fixed (byte* ppEntryPoint0 = pEntryPoint)
			{
				fixed (uint* ppConstantValue1 = pConstantValue)
				{
					SpecializeShaderARBNative(shader, ppEntryPoint0, numSpecializationConstants, pConstantIndex, ppConstantValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, ref byte pEntryPoint, uint numSpecializationConstants, uint* pConstantIndex, ref uint pConstantValue)
		{
			fixed (byte* ppEntryPoint0 = &pEntryPoint)
			{
				fixed (uint* ppConstantValue1 = &pConstantValue)
				{
					SpecializeShaderARBNative(shader, ppEntryPoint0, numSpecializationConstants, pConstantIndex, ppConstantValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, Span<uint> pConstantIndex, Span<uint> pConstantValue)
		{
			fixed (uint* ppConstantIndex0 = pConstantIndex)
			{
				fixed (uint* ppConstantValue1 = pConstantValue)
				{
					SpecializeShaderARBNative(shader, pEntryPoint, numSpecializationConstants, ppConstantIndex0, ppConstantValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, byte* pEntryPoint, uint numSpecializationConstants, ref uint pConstantIndex, ref uint pConstantValue)
		{
			fixed (uint* ppConstantIndex0 = &pConstantIndex)
			{
				fixed (uint* ppConstantValue1 = &pConstantValue)
				{
					SpecializeShaderARBNative(shader, pEntryPoint, numSpecializationConstants, ppConstantIndex0, ppConstantValue1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, Span<byte> pEntryPoint, uint numSpecializationConstants, Span<uint> pConstantIndex, Span<uint> pConstantValue)
		{
			fixed (byte* ppEntryPoint0 = pEntryPoint)
			{
				fixed (uint* ppConstantIndex1 = pConstantIndex)
				{
					fixed (uint* ppConstantValue2 = pConstantValue)
					{
						SpecializeShaderARBNative(shader, ppEntryPoint0, numSpecializationConstants, ppConstantIndex1, ppConstantValue2);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_gl_spirv</remarks>
		public void SpecializeShaderARB(uint shader, ref byte pEntryPoint, uint numSpecializationConstants, ref uint pConstantIndex, ref uint pConstantValue)
		{
			fixed (byte* ppEntryPoint0 = &pEntryPoint)
			{
				fixed (uint* ppConstantIndex1 = &pConstantIndex)
				{
					fixed (uint* ppConstantValue2 = &pConstantValue)
					{
						SpecializeShaderARBNative(shader, ppEntryPoint0, numSpecializationConstants, ppConstantIndex1, ppConstantValue2);
					}
				}
			}
		}

	}
}
