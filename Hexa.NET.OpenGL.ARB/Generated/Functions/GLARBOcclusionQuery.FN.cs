// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.OpenGL;

namespace Hexa.NET.OpenGL.ARB
{
	public unsafe partial class GLARBOcclusionQuery
	{
		internal static FunctionTable funcTable;

		public static bool Initialized => funcTable != null;

		/// <summary>
		/// Initializes the function table of the extension, call before you access any function.
		/// </summary>
		public static void InitExtension()
		{
			if (funcTable != null) return;
			if (GLBase.NativeContext == null) throw new InvalidOperationException("OpenGL is not initialized, call GL.InitApi.");
			funcTable = new FunctionTable(GLBase.NativeContext, 8);
			funcTable.Load(0, "glBeginQueryARB");
			funcTable.Load(1, "glDeleteQueriesARB");
			funcTable.Load(2, "glEndQueryARB");
			funcTable.Load(3, "glGenQueriesARB");
			funcTable.Load(4, "glGetQueryObjectivARB");
			funcTable.Load(5, "glGetQueryObjectuivARB");
			funcTable.Load(6, "glGetQueryivARB");
			funcTable.Load(7, "glIsQueryARB");
		}

		public static void FreeExtension()
		{
			if (funcTable == null) return;
			funcTable.Free();
			funcTable = null;
		}
	}
}
