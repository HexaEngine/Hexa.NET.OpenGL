// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.ARB
{
	public static unsafe partial class GLARBTransposeMatrix
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LoadTransposeMatrixdARBNative(double* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[0])(m);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[0])((nint)m);
			#endif
		}

		public static void LoadTransposeMatrixdARB(double* m)
		{
			LoadTransposeMatrixdARBNative(m);
		}

		public static void LoadTransposeMatrixdARB(Span<double> m)
		{
			fixed (double* pm0 = m)
			{
				LoadTransposeMatrixdARBNative(pm0);
			}
		}

		public static void LoadTransposeMatrixdARB(ref double m)
		{
			fixed (double* pm0 = &m)
			{
				LoadTransposeMatrixdARBNative(pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LoadTransposeMatrixfARBNative(float* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[1])(m);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[1])((nint)m);
			#endif
		}

		public static void LoadTransposeMatrixfARB(float* m)
		{
			LoadTransposeMatrixfARBNative(m);
		}

		public static void LoadTransposeMatrixfARB(Span<float> m)
		{
			fixed (float* pm0 = m)
			{
				LoadTransposeMatrixfARBNative(pm0);
			}
		}

		public static void LoadTransposeMatrixfARB(ref float m)
		{
			fixed (float* pm0 = &m)
			{
				LoadTransposeMatrixfARBNative(pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultTransposeMatrixdARBNative(double* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[2])(m);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[2])((nint)m);
			#endif
		}

		public static void MultTransposeMatrixdARB(double* m)
		{
			MultTransposeMatrixdARBNative(m);
		}

		public static void MultTransposeMatrixdARB(Span<double> m)
		{
			fixed (double* pm0 = m)
			{
				MultTransposeMatrixdARBNative(pm0);
			}
		}

		public static void MultTransposeMatrixdARB(ref double m)
		{
			fixed (double* pm0 = &m)
			{
				MultTransposeMatrixdARBNative(pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultTransposeMatrixfARBNative(float* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[3])(m);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[3])((nint)m);
			#endif
		}

		public static void MultTransposeMatrixfARB(float* m)
		{
			MultTransposeMatrixfARBNative(m);
		}

		public static void MultTransposeMatrixfARB(Span<float> m)
		{
			fixed (float* pm0 = m)
			{
				MultTransposeMatrixfARBNative(pm0);
			}
		}

		public static void MultTransposeMatrixfARB(ref float m)
		{
			fixed (float* pm0 = &m)
			{
				MultTransposeMatrixfARBNative(pm0);
			}
		}

	}
}
