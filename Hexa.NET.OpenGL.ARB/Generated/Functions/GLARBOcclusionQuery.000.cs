// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.ARB
{
	public unsafe partial class GLARBOcclusionQuery
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void BeginQueryARBNative(GLQueryTarget target, uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLQueryTarget, uint, void>)funcTable[0])(target, id);
			#else
			((delegate* unmanaged[Cdecl]<GLQueryTarget, uint, void>)funcTable[0])(target, id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void BeginQueryARB(GLQueryTarget target, uint id)
		{
			BeginQueryARBNative(target, id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DeleteQueriesARBNative(int n, uint* ids)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[1])(n, ids);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[1])(n, (nint)ids);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void DeleteQueriesARB(int n, uint* ids)
		{
			DeleteQueriesARBNative(n, ids);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void DeleteQueriesAR(uint id)
		{
			DeleteQueriesARBNative(1, &id);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void DeleteQueriesARB(int n, Span<uint> ids)
		{
			fixed (uint* pids0 = ids)
			{
				DeleteQueriesARBNative(n, pids0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void DeleteQueriesARB(int n, ref uint ids)
		{
			fixed (uint* pids0 = &ids)
			{
				DeleteQueriesARBNative(n, pids0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void EndQueryARBNative(GLQueryTarget target)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLQueryTarget, void>)funcTable[2])(target);
			#else
			((delegate* unmanaged[Cdecl]<GLQueryTarget, void>)funcTable[2])(target);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void EndQueryARB(GLQueryTarget target)
		{
			EndQueryARBNative(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GenQueriesARBNative(int n, uint* ids)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[3])(n, ids);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[3])(n, (nint)ids);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void GenQueriesARB(int n, uint* ids)
		{
			GenQueriesARBNative(n, ids);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public uint GenQueriesAR()
		{
			uint result;
			GenQueriesARBNative(1, &result);
			return result;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void GenQueriesARB(int n, Span<uint> ids)
		{
			fixed (uint* pids0 = ids)
			{
				GenQueriesARBNative(n, pids0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void GenQueriesARB(int n, ref uint ids)
		{
			fixed (uint* pids0 = &ids)
			{
				GenQueriesARBNative(n, pids0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetQueryObjectivARBNative(uint id, GLQueryObjectParameterName pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLQueryObjectParameterName, int*, void>)funcTable[4])(id, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLQueryObjectParameterName, nint, void>)funcTable[4])(id, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void GetQueryObjectivARB(uint id, GLQueryObjectParameterName pname, int* @params)
		{
			GetQueryObjectivARBNative(id, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void GetQueryObjectivARB(uint id, GLQueryObjectParameterName pname, Span<int> @params)
		{
			fixed (int* pparams0 = @params)
			{
				GetQueryObjectivARBNative(id, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void GetQueryObjectivARB(uint id, GLQueryObjectParameterName pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetQueryObjectivARBNative(id, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetQueryObjectuivARBNative(uint id, GLQueryObjectParameterName pname, uint* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLQueryObjectParameterName, uint*, void>)funcTable[5])(id, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLQueryObjectParameterName, nint, void>)funcTable[5])(id, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void GetQueryObjectuivARB(uint id, GLQueryObjectParameterName pname, uint* @params)
		{
			GetQueryObjectuivARBNative(id, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void GetQueryObjectuivARB(uint id, GLQueryObjectParameterName pname, Span<uint> @params)
		{
			fixed (uint* pparams0 = @params)
			{
				GetQueryObjectuivARBNative(id, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void GetQueryObjectuivARB(uint id, GLQueryObjectParameterName pname, ref uint @params)
		{
			fixed (uint* pparams0 = &@params)
			{
				GetQueryObjectuivARBNative(id, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetQueryivARBNative(GLQueryTarget target, GLQueryParameterName pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLQueryTarget, GLQueryParameterName, int*, void>)funcTable[6])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLQueryTarget, GLQueryParameterName, nint, void>)funcTable[6])(target, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void GetQueryivARB(GLQueryTarget target, GLQueryParameterName pname, int* @params)
		{
			GetQueryivARBNative(target, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void GetQueryivARB(GLQueryTarget target, GLQueryParameterName pname, Span<int> @params)
		{
			fixed (int* pparams0 = @params)
			{
				GetQueryivARBNative(target, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public void GetQueryivARB(GLQueryTarget target, GLQueryParameterName pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetQueryivARBNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal byte IsQueryARBNative(uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[7])(id);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[7])(id);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_occlusion_query</remarks>
		public bool IsQueryARB(uint id)
		{
			byte ret = IsQueryARBNative(id);
			return ret != 0;
		}

	}
}
