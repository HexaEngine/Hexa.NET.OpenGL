// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.ARB
{
	public static unsafe partial class GLARBBindlessTexture
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ulong GetImageHandleARBNative(uint texture, int level, byte layered, int layer, GLPixelFormat format)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, int, byte, int, GLPixelFormat, ulong>)funcTable[0])(texture, level, layered, layer, format);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<uint, int, byte, int, GLPixelFormat, ulong>)funcTable[0])(texture, level, layered, layer, format);
			#endif
		}

		public static ulong GetImageHandleARB(uint texture, int level, byte layered, int layer, GLPixelFormat format)
		{
			ulong ret = GetImageHandleARBNative(texture, level, layered, layer, format);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ulong GetTextureHandleARBNative(uint texture)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ulong>)funcTable[1])(texture);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<uint, ulong>)funcTable[1])(texture);
			#endif
		}

		public static ulong GetTextureHandleARB(uint texture)
		{
			ulong ret = GetTextureHandleARBNative(texture);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static ulong GetTextureSamplerHandleARBNative(uint texture, uint sampler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint, ulong>)funcTable[2])(texture, sampler);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<uint, uint, ulong>)funcTable[2])(texture, sampler);
			#endif
		}

		public static ulong GetTextureSamplerHandleARB(uint texture, uint sampler)
		{
			ulong ret = GetTextureSamplerHandleARBNative(texture, sampler);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribLui64vARBNative(uint index, GLVertexAttribEnum pname, ulong* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, ulong*, void>)funcTable[3])(index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, nint, void>)funcTable[3])(index, pname, (nint)@params);
			#endif
		}

		public static void GetVertexAttribLui64vARB(uint index, GLVertexAttribEnum pname, ulong* @params)
		{
			GetVertexAttribLui64vARBNative(index, pname, @params);
		}

		public static void GetVertexAttribLui64vARB(uint index, GLVertexAttribEnum pname, out ulong @params)
		{
			ulong pparams;
			GetVertexAttribLui64vARBNative(index, pname, &pparams);
			@params = pparams;
		}

		public static void GetVertexAttribLui64vARB(uint index, GLVertexAttribEnum pname, Span<ulong> @params)
		{
			fixed (ulong* pparams = @params)
			{
				GetVertexAttribLui64vARBNative(index, pname, pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsImageHandleResidentARBNative(ulong handle)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ulong, byte>)funcTable[4])(handle);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ulong, byte>)funcTable[4])(handle);
			#endif
		}

		public static bool IsImageHandleResidentARB(ulong handle)
		{
			byte ret = IsImageHandleResidentARBNative(handle);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsTextureHandleResidentARBNative(ulong handle)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<ulong, byte>)funcTable[5])(handle);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<ulong, byte>)funcTable[5])(handle);
			#endif
		}

		public static bool IsTextureHandleResidentARB(ulong handle)
		{
			byte ret = IsTextureHandleResidentARBNative(handle);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MakeImageHandleNonResidentARBNative(ulong handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[6])(handle);
			#else
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[6])(handle);
			#endif
		}

		public static void MakeImageHandleNonResidentARB(ulong handle)
		{
			MakeImageHandleNonResidentARBNative(handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MakeImageHandleResidentARBNative(ulong handle, GLEnum access)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, GLEnum, void>)funcTable[7])(handle, access);
			#else
			((delegate* unmanaged[Cdecl]<ulong, GLEnum, void>)funcTable[7])(handle, access);
			#endif
		}

		public static void MakeImageHandleResidentARB(ulong handle, GLEnum access)
		{
			MakeImageHandleResidentARBNative(handle, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MakeTextureHandleNonResidentARBNative(ulong handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[8])(handle);
			#else
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[8])(handle);
			#endif
		}

		public static void MakeTextureHandleNonResidentARB(ulong handle)
		{
			MakeTextureHandleNonResidentARBNative(handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MakeTextureHandleResidentARBNative(ulong handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[9])(handle);
			#else
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[9])(handle);
			#endif
		}

		public static void MakeTextureHandleResidentARB(ulong handle)
		{
			MakeTextureHandleResidentARBNative(handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformHandleui64ARBNative(uint program, int location, ulong value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, ulong, void>)funcTable[10])(program, location, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, ulong, void>)funcTable[10])(program, location, value);
			#endif
		}

		public static void ProgramUniformHandleui64ARB(uint program, int location, ulong value)
		{
			ProgramUniformHandleui64ARBNative(program, location, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformHandleui64vARBNative(uint program, int location, int count, ulong* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)funcTable[11])(program, location, count, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[11])(program, location, count, (nint)values);
			#endif
		}

		public static void ProgramUniformHandleui64vARB(uint program, int location, int count, ulong* values)
		{
			ProgramUniformHandleui64vARBNative(program, location, count, values);
		}

		public static void ProgramUniformHandleui64vARB(uint program, int location, int count, ref ulong values)
		{
			fixed (ulong* pvalues0 = &values)
			{
				ProgramUniformHandleui64vARBNative(program, location, count, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformHandleui64ARBNative(int location, ulong value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ulong, void>)funcTable[12])(location, value);
			#else
			((delegate* unmanaged[Cdecl]<int, ulong, void>)funcTable[12])(location, value);
			#endif
		}

		public static void UniformHandleui64ARB(int location, ulong value)
		{
			UniformHandleui64ARBNative(location, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void UniformHandleui64vARBNative(int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)funcTable[13])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[13])(location, count, (nint)value);
			#endif
		}

		public static void UniformHandleui64vARB(int location, int count, ulong* value)
		{
			UniformHandleui64vARBNative(location, count, value);
		}

		public static void UniformHandleui64vARB(int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				UniformHandleui64vARBNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL1ui64ARBNative(uint index, ulong x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong, void>)funcTable[14])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, ulong, void>)funcTable[14])(index, x);
			#endif
		}

		public static void VertexAttribL1ui64ARB(uint index, ulong x)
		{
			VertexAttribL1ui64ARBNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL1ui64vARBNative(uint index, ulong* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong*, void>)funcTable[15])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[15])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL1ui64vARB(uint index, ulong* v)
		{
			VertexAttribL1ui64vARBNative(index, v);
		}

		public static void VertexAttribL1ui64vARB(uint index, ref ulong v)
		{
			fixed (ulong* pv0 = &v)
			{
				VertexAttribL1ui64vARBNative(index, pv0);
			}
		}

	}
}
