// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.ARB
{
	public static unsafe partial class GLARBVertexBlend
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexBlendARBNative(int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[0])(count);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[0])(count);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void VertexBlendARB(int count)
		{
			VertexBlendARBNative(count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightPointerARBNative(int size, GLWeightPointerTypeARB type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, GLWeightPointerTypeARB, int, void*, void>)funcTable[1])(size, type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, GLWeightPointerTypeARB, int, nint, void>)funcTable[1])(size, type, stride, (nint)pointer);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightPointerARB(int size, GLWeightPointerTypeARB type, int stride, void* pointer)
		{
			WeightPointerARBNative(size, type, stride, pointer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightPointerARB(int size, GLWeightPointerTypeARB type, int stride, nint pointer)
		{
			WeightPointerARBNative(size, type, stride, (void*)pointer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightPointerARB<TPointer>(int size, GLWeightPointerTypeARB type, int stride, Span<TPointer> pointer) where TPointer : unmanaged
		{
			fixed (TPointer* ppointer0 = pointer)
			{
				WeightPointerARBNative(size, type, stride, ppointer0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightbvARBNative(int size, sbyte* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, sbyte*, void>)funcTable[2])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[2])(size, (nint)weights);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightbvARB(int size, sbyte* weights)
		{
			WeightbvARBNative(size, weights);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightbvARB(int size, Span<sbyte> weights)
		{
			fixed (sbyte* pweights0 = weights)
			{
				WeightbvARBNative(size, pweights0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightbvARB(int size, ref sbyte weights)
		{
			fixed (sbyte* pweights0 = &weights)
			{
				WeightbvARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightdvARBNative(int size, double* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, double*, void>)funcTable[3])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[3])(size, (nint)weights);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightdvARB(int size, double* weights)
		{
			WeightdvARBNative(size, weights);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightdvARB(int size, Span<double> weights)
		{
			fixed (double* pweights0 = weights)
			{
				WeightdvARBNative(size, pweights0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightdvARB(int size, ref double weights)
		{
			fixed (double* pweights0 = &weights)
			{
				WeightdvARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightfvARBNative(int size, float* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, float*, void>)funcTable[4])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[4])(size, (nint)weights);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightfvARB(int size, float* weights)
		{
			WeightfvARBNative(size, weights);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightfvARB(int size, Span<float> weights)
		{
			fixed (float* pweights0 = weights)
			{
				WeightfvARBNative(size, pweights0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightfvARB(int size, ref float weights)
		{
			fixed (float* pweights0 = &weights)
			{
				WeightfvARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightivARBNative(int size, int* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int*, void>)funcTable[5])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[5])(size, (nint)weights);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightivARB(int size, int* weights)
		{
			WeightivARBNative(size, weights);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightivARB(int size, Span<int> weights)
		{
			fixed (int* pweights0 = weights)
			{
				WeightivARBNative(size, pweights0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightivARB(int size, ref int weights)
		{
			fixed (int* pweights0 = &weights)
			{
				WeightivARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightsvARBNative(int size, short* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, short*, void>)funcTable[6])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[6])(size, (nint)weights);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightsvARB(int size, short* weights)
		{
			WeightsvARBNative(size, weights);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightsvARB(int size, Span<short> weights)
		{
			fixed (short* pweights0 = weights)
			{
				WeightsvARBNative(size, pweights0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightsvARB(int size, ref short weights)
		{
			fixed (short* pweights0 = &weights)
			{
				WeightsvARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightubvARBNative(int size, byte* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, byte*, void>)funcTable[7])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[7])(size, (nint)weights);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightubvARB(int size, byte* weights)
		{
			WeightubvARBNative(size, weights);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightubvARB(int size, string weights)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (weights != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(weights);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(weights, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			WeightubvARBNative(size, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightubvARB(int size, Span<byte> weights)
		{
			fixed (byte* pweights0 = weights)
			{
				WeightubvARBNative(size, pweights0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightubvARB(int size, ref byte weights)
		{
			fixed (byte* pweights0 = &weights)
			{
				WeightubvARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightuivARBNative(int size, uint* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[8])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[8])(size, (nint)weights);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightuivARB(int size, uint* weights)
		{
			WeightuivARBNative(size, weights);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightuivARB(int size, Span<uint> weights)
		{
			fixed (uint* pweights0 = weights)
			{
				WeightuivARBNative(size, pweights0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightuivARB(int size, ref uint weights)
		{
			fixed (uint* pweights0 = &weights)
			{
				WeightuivARBNative(size, pweights0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightusvARBNative(int size, ushort* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ushort*, void>)funcTable[9])(size, weights);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[9])(size, (nint)weights);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightusvARB(int size, ushort* weights)
		{
			WeightusvARBNative(size, weights);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightusvARB(int size, Span<ushort> weights)
		{
			fixed (ushort* pweights0 = weights)
			{
				WeightusvARBNative(size, pweights0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_ARB_vertex_blend</remarks>
		public static void WeightusvARB(int size, ref ushort weights)
		{
			fixed (ushort* pweights0 = &weights)
			{
				WeightusvARBNative(size, pweights0);
			}
		}

	}
}
