// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.MESA
{
	public static unsafe partial class GLMESA
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ResizeBuffersMESANative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[0])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[0])();
			#endif
		}

		public static void ResizeBuffersMESA()
		{
			ResizeBuffersMESANative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2dMESANative(double x, double y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[1])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[1])(x, y);
			#endif
		}

		public static void WindowPos2dMESA(double x, double y)
		{
			WindowPos2dMESANative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2dvMESANative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[2])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[2])((nint)v);
			#endif
		}

		public static void WindowPos2dvMESA(double* v)
		{
			WindowPos2dvMESANative(v);
		}

		public static void WindowPos2dvMESA(ref double v)
		{
			fixed (double* pv0 = &v)
			{
				WindowPos2dvMESANative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2fMESANative(float x, float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[3])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[3])(x, y);
			#endif
		}

		public static void WindowPos2fMESA(float x, float y)
		{
			WindowPos2fMESANative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2fvMESANative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[4])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[4])((nint)v);
			#endif
		}

		public static void WindowPos2fvMESA(float* v)
		{
			WindowPos2fvMESANative(v);
		}

		public static void WindowPos2fvMESA(ref float v)
		{
			fixed (float* pv0 = &v)
			{
				WindowPos2fvMESANative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2iMESANative(int x, int y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[5])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[5])(x, y);
			#endif
		}

		public static void WindowPos2iMESA(int x, int y)
		{
			WindowPos2iMESANative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2ivMESANative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[6])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[6])((nint)v);
			#endif
		}

		public static void WindowPos2ivMESA(int* v)
		{
			WindowPos2ivMESANative(v);
		}

		public static void WindowPos2ivMESA(ref int v)
		{
			fixed (int* pv0 = &v)
			{
				WindowPos2ivMESANative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2sMESANative(short x, short y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[7])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[7])(x, y);
			#endif
		}

		public static void WindowPos2sMESA(short x, short y)
		{
			WindowPos2sMESANative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos2svMESANative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[8])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[8])((nint)v);
			#endif
		}

		public static void WindowPos2svMESA(short* v)
		{
			WindowPos2svMESANative(v);
		}

		public static void WindowPos2svMESA(ref short v)
		{
			fixed (short* pv0 = &v)
			{
				WindowPos2svMESANative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3dMESANative(double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[9])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[9])(x, y, z);
			#endif
		}

		public static void WindowPos3dMESA(double x, double y, double z)
		{
			WindowPos3dMESANative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3dvMESANative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[10])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[10])((nint)v);
			#endif
		}

		public static void WindowPos3dvMESA(double* v)
		{
			WindowPos3dvMESANative(v);
		}

		public static void WindowPos3dvMESA(ref double v)
		{
			fixed (double* pv0 = &v)
			{
				WindowPos3dvMESANative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3fMESANative(float x, float y, float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[11])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[11])(x, y, z);
			#endif
		}

		public static void WindowPos3fMESA(float x, float y, float z)
		{
			WindowPos3fMESANative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3fvMESANative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[12])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[12])((nint)v);
			#endif
		}

		public static void WindowPos3fvMESA(float* v)
		{
			WindowPos3fvMESANative(v);
		}

		public static void WindowPos3fvMESA(ref float v)
		{
			fixed (float* pv0 = &v)
			{
				WindowPos3fvMESANative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3iMESANative(int x, int y, int z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[13])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[13])(x, y, z);
			#endif
		}

		public static void WindowPos3iMESA(int x, int y, int z)
		{
			WindowPos3iMESANative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3ivMESANative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[14])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[14])((nint)v);
			#endif
		}

		public static void WindowPos3ivMESA(int* v)
		{
			WindowPos3ivMESANative(v);
		}

		public static void WindowPos3ivMESA(ref int v)
		{
			fixed (int* pv0 = &v)
			{
				WindowPos3ivMESANative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3sMESANative(short x, short y, short z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[15])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[15])(x, y, z);
			#endif
		}

		public static void WindowPos3sMESA(short x, short y, short z)
		{
			WindowPos3sMESANative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos3svMESANative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[16])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[16])((nint)v);
			#endif
		}

		public static void WindowPos3svMESA(short* v)
		{
			WindowPos3svMESANative(v);
		}

		public static void WindowPos3svMESA(ref short v)
		{
			fixed (short* pv0 = &v)
			{
				WindowPos3svMESANative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos4dMESANative(double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[17])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[17])(x, y, z, w);
			#endif
		}

		public static void WindowPos4dMESA(double x, double y, double z, double w)
		{
			WindowPos4dMESANative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos4dvMESANative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[18])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[18])((nint)v);
			#endif
		}

		public static void WindowPos4dvMESA(double* v)
		{
			WindowPos4dvMESANative(v);
		}

		public static void WindowPos4dvMESA(ref double v)
		{
			fixed (double* pv0 = &v)
			{
				WindowPos4dvMESANative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos4fMESANative(float x, float y, float z, float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[19])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[19])(x, y, z, w);
			#endif
		}

		public static void WindowPos4fMESA(float x, float y, float z, float w)
		{
			WindowPos4fMESANative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos4fvMESANative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[20])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[20])((nint)v);
			#endif
		}

		public static void WindowPos4fvMESA(float* v)
		{
			WindowPos4fvMESANative(v);
		}

		public static void WindowPos4fvMESA(ref float v)
		{
			fixed (float* pv0 = &v)
			{
				WindowPos4fvMESANative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos4iMESANative(int x, int y, int z, int w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[21])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[21])(x, y, z, w);
			#endif
		}

		public static void WindowPos4iMESA(int x, int y, int z, int w)
		{
			WindowPos4iMESANative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos4ivMESANative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[22])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[22])((nint)v);
			#endif
		}

		public static void WindowPos4ivMESA(int* v)
		{
			WindowPos4ivMESANative(v);
		}

		public static void WindowPos4ivMESA(ref int v)
		{
			fixed (int* pv0 = &v)
			{
				WindowPos4ivMESANative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos4sMESANative(short x, short y, short z, short w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[23])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[23])(x, y, z, w);
			#endif
		}

		public static void WindowPos4sMESA(short x, short y, short z, short w)
		{
			WindowPos4sMESANative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WindowPos4svMESANative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[24])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[24])((nint)v);
			#endif
		}

		public static void WindowPos4svMESA(short* v)
		{
			WindowPos4svMESANative(v);
		}

		public static void WindowPos4svMESA(ref short v)
		{
			fixed (short* pv0 = &v)
			{
				WindowPos4svMESANative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FramebufferParameteriMESANative(GLFramebufferTarget target, GLFramebufferParameterName pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferParameterName, int, void>)funcTable[25])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferParameterName, int, void>)funcTable[25])(target, pname, param);
			#endif
		}

		public static void FramebufferParameteriMESA(GLFramebufferTarget target, GLFramebufferParameterName pname, int param)
		{
			FramebufferParameteriMESANative(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetFramebufferParameterivMESANative(GLFramebufferTarget target, GLFramebufferAttachmentParameterName pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachmentParameterName, int*, void>)funcTable[26])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachmentParameterName, nint, void>)funcTable[26])(target, pname, (nint)@params);
			#endif
		}

		public static void GetFramebufferParameterivMESA(GLFramebufferTarget target, GLFramebufferAttachmentParameterName pname, int* @params)
		{
			GetFramebufferParameterivMESANative(target, pname, @params);
		}

		public static void GetFramebufferParameterivMESA(GLFramebufferTarget target, GLFramebufferAttachmentParameterName pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetFramebufferParameterivMESANative(target, pname, pparams0);
			}
		}

	}
}
