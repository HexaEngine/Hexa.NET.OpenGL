// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.OpenGL;

namespace Hexa.NET.OpenGL.EXT
{
	public unsafe partial class GLEXTFramebufferObject : GLExtension, IDisposable
	{
		public const string ExtensionName = "GL_EXT_framebuffer_object";

		public GLEXTFramebufferObject() : base(17)
		{
		}

		public override bool IsSupported(IGLContext context)
		{
			return context.IsExtensionSupported(ExtensionName);
		}

		protected override void InitTable(FunctionTable funcTable)
		{
			funcTable.Load(0, "glBindFramebufferEXT");
			funcTable.Load(1, "glBindRenderbufferEXT");
			funcTable.Load(2, "glCheckFramebufferStatusEXT");
			funcTable.Load(3, "glDeleteFramebuffersEXT");
			funcTable.Load(4, "glDeleteRenderbuffersEXT");
			funcTable.Load(5, "glFramebufferRenderbufferEXT");
			funcTable.Load(6, "glFramebufferTexture1DEXT");
			funcTable.Load(7, "glFramebufferTexture2DEXT");
			funcTable.Load(8, "glFramebufferTexture3DEXT");
			funcTable.Load(9, "glGenFramebuffersEXT");
			funcTable.Load(10, "glGenRenderbuffersEXT");
			funcTable.Load(11, "glGenerateMipmapEXT");
			funcTable.Load(12, "glGetFramebufferAttachmentParameterivEXT");
			funcTable.Load(13, "glGetRenderbufferParameterivEXT");
			funcTable.Load(14, "glIsFramebufferEXT");
			funcTable.Load(15, "glIsRenderbufferEXT");
			funcTable.Load(16, "glRenderbufferStorageEXT");
		}

		public void Dispose()
		{
			funcTable.Dispose();
		}
	}
}
