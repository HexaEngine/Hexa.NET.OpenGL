// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.EXT
{
	public static unsafe partial class GLEXTShaderImageLoadStore
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BindImageTextureEXTNative(uint index, uint texture, int level, bool layered, int layer, GLBufferAccessARB access, int format)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, byte, int, GLBufferAccessARB, int, void>)funcTable[0])(index, texture, level, *((byte*)(&layered)), layer, access, format);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, byte, int, GLBufferAccessARB, int, void>)funcTable[0])(index, texture, level, *((byte*)(&layered)), layer, access, format);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_shader_image_load_store</remarks>
		public static void BindImageTextureEXT(uint index, uint texture, int level, bool layered, int layer, GLBufferAccessARB access, int format)
		{
			BindImageTextureEXTNative(index, texture, level, layered, layer, access, format);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MemoryBarrierEXTNative(GLMemoryBarrierMask barriers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMemoryBarrierMask, void>)funcTable[1])(barriers);
			#else
			((delegate* unmanaged[Cdecl]<GLMemoryBarrierMask, void>)funcTable[1])(barriers);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_shader_image_load_store</remarks>
		public static void MemoryBarrierEXT(GLMemoryBarrierMask barriers)
		{
			MemoryBarrierEXTNative(barriers);
		}

	}
}
