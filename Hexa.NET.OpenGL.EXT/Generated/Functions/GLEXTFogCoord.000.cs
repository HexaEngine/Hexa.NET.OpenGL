// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.EXT
{
	public unsafe partial class GLEXTFogCoord
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void FogCoordPointerEXTNative(GLFogPointerTypeEXT type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFogPointerTypeEXT, int, void*, void>)funcTable[0])(type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<GLFogPointerTypeEXT, int, nint, void>)funcTable[0])(type, stride, (nint)pointer);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_fog_coord</remarks>
		public void FogCoordPointerEXT(GLFogPointerTypeEXT type, int stride, void* pointer)
		{
			FogCoordPointerEXTNative(type, stride, pointer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_fog_coord</remarks>
		public void FogCoordPointerEXT(GLFogPointerTypeEXT type, int stride, nint pointer)
		{
			FogCoordPointerEXTNative(type, stride, (void*)pointer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_fog_coord</remarks>
		public void FogCoordPointerEXT<TPointer>(GLFogPointerTypeEXT type, int stride, Span<TPointer> pointer) where TPointer : unmanaged
		{
			fixed (TPointer* ppointer0 = pointer)
			{
				FogCoordPointerEXTNative(type, stride, ppointer0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void FogCoorddEXTNative(double coord)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, void>)funcTable[1])(coord);
			#else
			((delegate* unmanaged[Cdecl]<double, void>)funcTable[1])(coord);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_fog_coord</remarks>
		public void FogCoorddEXT(double coord)
		{
			FogCoorddEXTNative(coord);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void FogCoorddvEXTNative(double* coord)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[2])(coord);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[2])((nint)coord);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_fog_coord</remarks>
		public void FogCoorddvEXT(double* coord)
		{
			FogCoorddvEXTNative(coord);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_fog_coord</remarks>
		public void FogCoorddvEXT(Span<double> coord)
		{
			fixed (double* pcoord0 = coord)
			{
				FogCoorddvEXTNative(pcoord0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_fog_coord</remarks>
		public void FogCoorddvEXT(ref double coord)
		{
			fixed (double* pcoord0 = &coord)
			{
				FogCoorddvEXTNative(pcoord0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void FogCoordfEXTNative(float coord)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[3])(coord);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[3])(coord);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_fog_coord</remarks>
		public void FogCoordfEXT(float coord)
		{
			FogCoordfEXTNative(coord);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void FogCoordfvEXTNative(float* coord)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[4])(coord);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[4])((nint)coord);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_fog_coord</remarks>
		public void FogCoordfvEXT(float* coord)
		{
			FogCoordfvEXTNative(coord);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_fog_coord</remarks>
		public void FogCoordfvEXT(Span<float> coord)
		{
			fixed (float* pcoord0 = coord)
			{
				FogCoordfvEXTNative(pcoord0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_fog_coord</remarks>
		public void FogCoordfvEXT(ref float coord)
		{
			fixed (float* pcoord0 = &coord)
			{
				FogCoordfvEXTNative(pcoord0);
			}
		}

	}
}
