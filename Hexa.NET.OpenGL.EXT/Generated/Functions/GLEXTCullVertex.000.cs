// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.EXT
{
	public unsafe partial class GLEXTCullVertex
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CullParameterdvEXTNative(GLCullParameterEXT pname, double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCullParameterEXT, double*, void>)funcTable[0])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLCullParameterEXT, nint, void>)funcTable[0])(pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_cull_vertex</remarks>
		public void CullParameterdvEXT(GLCullParameterEXT pname, double* @params)
		{
			CullParameterdvEXTNative(pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_cull_vertex</remarks>
		public void CullParameterdvEXT(GLCullParameterEXT pname, Span<double> @params)
		{
			fixed (double* pparams0 = @params)
			{
				CullParameterdvEXTNative(pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_cull_vertex</remarks>
		public void CullParameterdvEXT(GLCullParameterEXT pname, ref double @params)
		{
			fixed (double* pparams0 = &@params)
			{
				CullParameterdvEXTNative(pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CullParameterfvEXTNative(GLCullParameterEXT pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCullParameterEXT, float*, void>)funcTable[1])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLCullParameterEXT, nint, void>)funcTable[1])(pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_cull_vertex</remarks>
		public void CullParameterfvEXT(GLCullParameterEXT pname, float* @params)
		{
			CullParameterfvEXTNative(pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_cull_vertex</remarks>
		public void CullParameterfvEXT(GLCullParameterEXT pname, Span<float> @params)
		{
			fixed (float* pparams0 = @params)
			{
				CullParameterfvEXTNative(pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_cull_vertex</remarks>
		public void CullParameterfvEXT(GLCullParameterEXT pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				CullParameterfvEXTNative(pname, pparams0);
			}
		}

	}
}
