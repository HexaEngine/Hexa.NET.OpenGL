// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.EXT
{
	public static unsafe partial class GLEXTHistogram
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetHistogramEXTNative(GLHistogramTargetEXT target, byte reset, GLPixelFormat format, GLPixelType type, void* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, byte, GLPixelFormat, GLPixelType, void*, void>)funcTable[0])(target, reset, format, type, values);
			#else
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, byte, GLPixelFormat, GLPixelType, nint, void>)funcTable[0])(target, reset, format, type, (nint)values);
			#endif
		}

		public static void GetHistogramEXT(GLHistogramTargetEXT target, byte reset, GLPixelFormat format, GLPixelType type, void* values)
		{
			GetHistogramEXTNative(target, reset, format, type, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetHistogramParameterfvEXTNative(GLHistogramTargetEXT target, GLGetHistogramParameterPNameEXT pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, GLGetHistogramParameterPNameEXT, float*, void>)funcTable[1])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, GLGetHistogramParameterPNameEXT, nint, void>)funcTable[1])(target, pname, (nint)@params);
			#endif
		}

		public static void GetHistogramParameterfvEXT(GLHistogramTargetEXT target, GLGetHistogramParameterPNameEXT pname, float* @params)
		{
			GetHistogramParameterfvEXTNative(target, pname, @params);
		}

		public static void GetHistogramParameterfvEXT(GLHistogramTargetEXT target, GLGetHistogramParameterPNameEXT pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				GetHistogramParameterfvEXTNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetHistogramParameterivEXTNative(GLHistogramTargetEXT target, GLGetHistogramParameterPNameEXT pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, GLGetHistogramParameterPNameEXT, int*, void>)funcTable[2])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, GLGetHistogramParameterPNameEXT, nint, void>)funcTable[2])(target, pname, (nint)@params);
			#endif
		}

		public static void GetHistogramParameterivEXT(GLHistogramTargetEXT target, GLGetHistogramParameterPNameEXT pname, int* @params)
		{
			GetHistogramParameterivEXTNative(target, pname, @params);
		}

		public static void GetHistogramParameterivEXT(GLHistogramTargetEXT target, GLGetHistogramParameterPNameEXT pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetHistogramParameterivEXTNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetMinmaxEXTNative(GLMinmaxTargetEXT target, byte reset, GLPixelFormat format, GLPixelType type, void* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, byte, GLPixelFormat, GLPixelType, void*, void>)funcTable[3])(target, reset, format, type, values);
			#else
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, byte, GLPixelFormat, GLPixelType, nint, void>)funcTable[3])(target, reset, format, type, (nint)values);
			#endif
		}

		public static void GetMinmaxEXT(GLMinmaxTargetEXT target, byte reset, GLPixelFormat format, GLPixelType type, void* values)
		{
			GetMinmaxEXTNative(target, reset, format, type, values);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetMinmaxParameterfvEXTNative(GLMinmaxTargetEXT target, GLGetMinmaxParameterPNameEXT pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, GLGetMinmaxParameterPNameEXT, float*, void>)funcTable[4])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, GLGetMinmaxParameterPNameEXT, nint, void>)funcTable[4])(target, pname, (nint)@params);
			#endif
		}

		public static void GetMinmaxParameterfvEXT(GLMinmaxTargetEXT target, GLGetMinmaxParameterPNameEXT pname, float* @params)
		{
			GetMinmaxParameterfvEXTNative(target, pname, @params);
		}

		public static void GetMinmaxParameterfvEXT(GLMinmaxTargetEXT target, GLGetMinmaxParameterPNameEXT pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				GetMinmaxParameterfvEXTNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetMinmaxParameterivEXTNative(GLMinmaxTargetEXT target, GLGetMinmaxParameterPNameEXT pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, GLGetMinmaxParameterPNameEXT, int*, void>)funcTable[5])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, GLGetMinmaxParameterPNameEXT, nint, void>)funcTable[5])(target, pname, (nint)@params);
			#endif
		}

		public static void GetMinmaxParameterivEXT(GLMinmaxTargetEXT target, GLGetMinmaxParameterPNameEXT pname, int* @params)
		{
			GetMinmaxParameterivEXTNative(target, pname, @params);
		}

		public static void GetMinmaxParameterivEXT(GLMinmaxTargetEXT target, GLGetMinmaxParameterPNameEXT pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetMinmaxParameterivEXTNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void HistogramEXTNative(GLHistogramTargetEXT target, int width, GLInternalFormat internalformat, byte sink)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, int, GLInternalFormat, byte, void>)funcTable[6])(target, width, internalformat, sink);
			#else
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, int, GLInternalFormat, byte, void>)funcTable[6])(target, width, internalformat, sink);
			#endif
		}

		public static void HistogramEXT(GLHistogramTargetEXT target, int width, GLInternalFormat internalformat, byte sink)
		{
			HistogramEXTNative(target, width, internalformat, sink);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MinmaxEXTNative(GLMinmaxTargetEXT target, GLInternalFormat internalformat, byte sink)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, GLInternalFormat, byte, void>)funcTable[7])(target, internalformat, sink);
			#else
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, GLInternalFormat, byte, void>)funcTable[7])(target, internalformat, sink);
			#endif
		}

		public static void MinmaxEXT(GLMinmaxTargetEXT target, GLInternalFormat internalformat, byte sink)
		{
			MinmaxEXTNative(target, internalformat, sink);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ResetHistogramEXTNative(GLHistogramTargetEXT target)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, void>)funcTable[8])(target);
			#else
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, void>)funcTable[8])(target);
			#endif
		}

		public static void ResetHistogramEXT(GLHistogramTargetEXT target)
		{
			ResetHistogramEXTNative(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ResetMinmaxEXTNative(GLMinmaxTargetEXT target)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, void>)funcTable[9])(target);
			#else
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, void>)funcTable[9])(target);
			#endif
		}

		public static void ResetMinmaxEXT(GLMinmaxTargetEXT target)
		{
			ResetMinmaxEXTNative(target);
		}

	}
}
