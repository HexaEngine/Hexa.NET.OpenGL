// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.EXT
{
	public static unsafe partial class GLEXTGpuProgramParameters
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramEnvParameters4fvEXTNative(GLProgramTarget target, uint index, int count, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, int, float*, void>)funcTable[0])(target, index, count, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, int, nint, void>)funcTable[0])(target, index, count, (nint)@params);
			#endif
		}

		public static void ProgramEnvParameters4fvEXT(GLProgramTarget target, uint index, int count, float* @params)
		{
			ProgramEnvParameters4fvEXTNative(target, index, count, @params);
		}

		public static void ProgramEnvParameters4fvEXT(GLProgramTarget target, uint index, int count, out float @params)
		{
			float pparams;
			ProgramEnvParameters4fvEXTNative(target, index, count, &pparams);
			@params = pparams;
		}

		public static void ProgramEnvParameters4fvEXT(GLProgramTarget target, uint index, int count, Span<float> @params)
		{
			fixed (float* pparams = @params)
			{
				ProgramEnvParameters4fvEXTNative(target, index, count, pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramLocalParameters4fvEXTNative(GLProgramTarget target, uint index, int count, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, int, float*, void>)funcTable[1])(target, index, count, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, int, nint, void>)funcTable[1])(target, index, count, (nint)@params);
			#endif
		}

		public static void ProgramLocalParameters4fvEXT(GLProgramTarget target, uint index, int count, float* @params)
		{
			ProgramLocalParameters4fvEXTNative(target, index, count, @params);
		}

		public static void ProgramLocalParameters4fvEXT(GLProgramTarget target, uint index, int count, out float @params)
		{
			float pparams;
			ProgramLocalParameters4fvEXTNative(target, index, count, &pparams);
			@params = pparams;
		}

		public static void ProgramLocalParameters4fvEXT(GLProgramTarget target, uint index, int count, Span<float> @params)
		{
			fixed (float* pparams = @params)
			{
				ProgramLocalParameters4fvEXTNative(target, index, count, pparams);
			}
		}

	}
}
