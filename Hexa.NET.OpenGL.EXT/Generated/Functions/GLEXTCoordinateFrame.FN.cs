// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.OpenGL;

namespace Hexa.NET.OpenGL.EXT
{
	public unsafe partial class GLEXTCoordinateFrame
	{
		internal static FunctionTable funcTable;

		public static bool Initialized => funcTable != null;

		public static bool IsSupported => GLBase.NativeContext.IsExtensionSupported(ExtensionName);

		public const string ExtensionName = "GL_EXT_coordinate_frame";

		/// <summary>
		/// Tries to initialize the function table of the extension, call before you access any function.
		/// </summary>
		/// <returns>Returns <c>true</c> if successful, <c>false</c> if extension is not supported.</returns>
		public static bool TryInitExtension()
		{
			if (!IsSupported) return false;
			InitExtension();
			return true;
		}

		/// <summary>
		/// Initializes the function table of the extension, call before you access any function.
		/// </summary>
		public static void InitExtension()
		{
			if (funcTable != null) return;
			if (GLBase.NativeContext == null) throw new InvalidOperationException("OpenGL is not initialized, call GL.InitApi.");
			funcTable = new FunctionTable(GLBase.NativeContext, 22);
			funcTable.Load(0, "glBinormal3bEXT");
			funcTable.Load(1, "glBinormal3bvEXT");
			funcTable.Load(2, "glBinormal3dEXT");
			funcTable.Load(3, "glBinormal3dvEXT");
			funcTable.Load(4, "glBinormal3fEXT");
			funcTable.Load(5, "glBinormal3fvEXT");
			funcTable.Load(6, "glBinormal3iEXT");
			funcTable.Load(7, "glBinormal3ivEXT");
			funcTable.Load(8, "glBinormal3sEXT");
			funcTable.Load(9, "glBinormal3svEXT");
			funcTable.Load(10, "glBinormalPointerEXT");
			funcTable.Load(11, "glTangent3bEXT");
			funcTable.Load(12, "glTangent3bvEXT");
			funcTable.Load(13, "glTangent3dEXT");
			funcTable.Load(14, "glTangent3dvEXT");
			funcTable.Load(15, "glTangent3fEXT");
			funcTable.Load(16, "glTangent3fvEXT");
			funcTable.Load(17, "glTangent3iEXT");
			funcTable.Load(18, "glTangent3ivEXT");
			funcTable.Load(19, "glTangent3sEXT");
			funcTable.Load(20, "glTangent3svEXT");
			funcTable.Load(21, "glTangentPointerEXT");
		}

		public static void FreeExtension()
		{
			if (funcTable == null) return;
			funcTable.Free();
			funcTable = null;
		}
	}
}
