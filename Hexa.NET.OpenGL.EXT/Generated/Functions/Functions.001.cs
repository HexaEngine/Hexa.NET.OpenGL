// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.EXT
{
	public static unsafe partial class GLExt
	{

		public static void GetVertexArrayIntegervEXT(uint vaobj, GLVertexArrayPName pname, int* param)
		{
			GetVertexArrayIntegervEXTNative(vaobj, pname, param);
		}

		public static void GetVertexArrayIntegervEXT(uint vaobj, GLVertexArrayPName pname, ref int param)
		{
			fixed (int* pparam0 = &param)
			{
				GetVertexArrayIntegervEXTNative(vaobj, pname, pparam0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexArrayPointeri_vEXTNative(uint vaobj, uint index, GLVertexArrayPName pname, void** param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, GLVertexArrayPName, void**, void>)funcTable[240])(vaobj, index, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, GLVertexArrayPName, nint, void>)funcTable[240])(vaobj, index, pname, (nint)param);
			#endif
		}

		public static void GetVertexArrayPointeri_vEXT(uint vaobj, uint index, GLVertexArrayPName pname, void** param)
		{
			GetVertexArrayPointeri_vEXTNative(vaobj, index, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexArrayPointervEXTNative(uint vaobj, GLVertexArrayPName pname, void** param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexArrayPName, void**, void>)funcTable[241])(vaobj, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexArrayPName, nint, void>)funcTable[241])(vaobj, pname, (nint)param);
			#endif
		}

		public static void GetVertexArrayPointervEXT(uint vaobj, GLVertexArrayPName pname, void** param)
		{
			GetVertexArrayPointervEXTNative(vaobj, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribIivEXTNative(uint index, GLVertexAttribEnum pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, int*, void>)funcTable[242])(index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, nint, void>)funcTable[242])(index, pname, (nint)@params);
			#endif
		}

		public static void GetVertexAttribIivEXT(uint index, GLVertexAttribEnum pname, int* @params)
		{
			GetVertexAttribIivEXTNative(index, pname, @params);
		}

		public static void GetVertexAttribIivEXT(uint index, GLVertexAttribEnum pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetVertexAttribIivEXTNative(index, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribIuivEXTNative(uint index, GLVertexAttribEnum pname, uint* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, uint*, void>)funcTable[243])(index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, nint, void>)funcTable[243])(index, pname, (nint)@params);
			#endif
		}

		public static void GetVertexAttribIuivEXT(uint index, GLVertexAttribEnum pname, uint* @params)
		{
			GetVertexAttribIuivEXTNative(index, pname, @params);
		}

		public static void GetVertexAttribIuivEXT(uint index, GLVertexAttribEnum pname, ref uint @params)
		{
			fixed (uint* pparams0 = &@params)
			{
				GetVertexAttribIuivEXTNative(index, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribLdvEXTNative(uint index, GLVertexAttribEnum pname, double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, double*, void>)funcTable[244])(index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, nint, void>)funcTable[244])(index, pname, (nint)@params);
			#endif
		}

		public static void GetVertexAttribLdvEXT(uint index, GLVertexAttribEnum pname, double* @params)
		{
			GetVertexAttribLdvEXTNative(index, pname, @params);
		}

		public static void GetVertexAttribLdvEXT(uint index, GLVertexAttribEnum pname, ref double @params)
		{
			fixed (double* pparams0 = &@params)
			{
				GetVertexAttribLdvEXTNative(index, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void HistogramEXTNative(GLHistogramTargetEXT target, int width, GLInternalFormat internalformat, byte sink)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, int, GLInternalFormat, byte, void>)funcTable[245])(target, width, internalformat, sink);
			#else
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, int, GLInternalFormat, byte, void>)funcTable[245])(target, width, internalformat, sink);
			#endif
		}

		public static void HistogramEXT(GLHistogramTargetEXT target, int width, GLInternalFormat internalformat, byte sink)
		{
			HistogramEXTNative(target, width, internalformat, sink);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImportMemoryFdEXTNative(uint memory, ulong size, GLExternalHandleType handleType, int fd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong, GLExternalHandleType, int, void>)funcTable[246])(memory, size, handleType, fd);
			#else
			((delegate* unmanaged[Cdecl]<uint, ulong, GLExternalHandleType, int, void>)funcTable[246])(memory, size, handleType, fd);
			#endif
		}

		public static void ImportMemoryFdEXT(uint memory, ulong size, GLExternalHandleType handleType, int fd)
		{
			ImportMemoryFdEXTNative(memory, size, handleType, fd);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImportMemoryWin32HandleEXTNative(uint memory, ulong size, GLExternalHandleType handleType, void* handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong, GLExternalHandleType, void*, void>)funcTable[247])(memory, size, handleType, handle);
			#else
			((delegate* unmanaged[Cdecl]<uint, ulong, GLExternalHandleType, nint, void>)funcTable[247])(memory, size, handleType, (nint)handle);
			#endif
		}

		public static void ImportMemoryWin32HandleEXT(uint memory, ulong size, GLExternalHandleType handleType, void* handle)
		{
			ImportMemoryWin32HandleEXTNative(memory, size, handleType, handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImportMemoryWin32NameEXTNative(uint memory, ulong size, GLExternalHandleType handleType, void* name)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong, GLExternalHandleType, void*, void>)funcTable[248])(memory, size, handleType, name);
			#else
			((delegate* unmanaged[Cdecl]<uint, ulong, GLExternalHandleType, nint, void>)funcTable[248])(memory, size, handleType, (nint)name);
			#endif
		}

		public static void ImportMemoryWin32NameEXT(uint memory, ulong size, GLExternalHandleType handleType, void* name)
		{
			ImportMemoryWin32NameEXTNative(memory, size, handleType, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImportSemaphoreFdEXTNative(uint semaphore, GLExternalHandleType handleType, int fd)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLExternalHandleType, int, void>)funcTable[249])(semaphore, handleType, fd);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLExternalHandleType, int, void>)funcTable[249])(semaphore, handleType, fd);
			#endif
		}

		public static void ImportSemaphoreFdEXT(uint semaphore, GLExternalHandleType handleType, int fd)
		{
			ImportSemaphoreFdEXTNative(semaphore, handleType, fd);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImportSemaphoreWin32HandleEXTNative(uint semaphore, GLExternalHandleType handleType, void* handle)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLExternalHandleType, void*, void>)funcTable[250])(semaphore, handleType, handle);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLExternalHandleType, nint, void>)funcTable[250])(semaphore, handleType, (nint)handle);
			#endif
		}

		public static void ImportSemaphoreWin32HandleEXT(uint semaphore, GLExternalHandleType handleType, void* handle)
		{
			ImportSemaphoreWin32HandleEXTNative(semaphore, handleType, handle);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ImportSemaphoreWin32NameEXTNative(uint semaphore, GLExternalHandleType handleType, void* name)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLExternalHandleType, void*, void>)funcTable[251])(semaphore, handleType, name);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLExternalHandleType, nint, void>)funcTable[251])(semaphore, handleType, (nint)name);
			#endif
		}

		public static void ImportSemaphoreWin32NameEXT(uint semaphore, GLExternalHandleType handleType, void* name)
		{
			ImportSemaphoreWin32NameEXTNative(semaphore, handleType, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static GLSync ImportSyncEXTNative(GLEnum externalSyncType, nint externalSync, uint flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLEnum, nint, uint, GLSync>)funcTable[252])(externalSyncType, externalSync, flags);
			#else
			return (GLSync)((delegate* unmanaged[Cdecl]<GLEnum, nint, uint, GLSync>)funcTable[252])(externalSyncType, externalSync, flags);
			#endif
		}

		public static GLSync ImportSyncEXT(GLEnum externalSyncType, nint externalSync, uint flags)
		{
			GLSync ret = ImportSyncEXTNative(externalSyncType, externalSync, flags);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void IndexFuncEXTNative(GLIndexFunctionEXT func, float reference)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLIndexFunctionEXT, float, void>)funcTable[253])(func, reference);
			#else
			((delegate* unmanaged[Cdecl]<GLIndexFunctionEXT, float, void>)funcTable[253])(func, reference);
			#endif
		}

		public static void IndexFuncEXT(GLIndexFunctionEXT func, float reference)
		{
			IndexFuncEXTNative(func, reference);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void IndexMaterialEXTNative(GLTriangleFace face, GLIndexMaterialParameterEXT mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLIndexMaterialParameterEXT, void>)funcTable[254])(face, mode);
			#else
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLIndexMaterialParameterEXT, void>)funcTable[254])(face, mode);
			#endif
		}

		public static void IndexMaterialEXT(GLTriangleFace face, GLIndexMaterialParameterEXT mode)
		{
			IndexMaterialEXTNative(face, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void IndexPointerEXTNative(GLIndexPointerType type, int stride, int count, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLIndexPointerType, int, int, void*, void>)funcTable[255])(type, stride, count, pointer);
			#else
			((delegate* unmanaged[Cdecl]<GLIndexPointerType, int, int, nint, void>)funcTable[255])(type, stride, count, (nint)pointer);
			#endif
		}

		public static void IndexPointerEXT(GLIndexPointerType type, int stride, int count, void* pointer)
		{
			IndexPointerEXTNative(type, stride, count, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void InsertComponentEXTNative(uint res, uint src, uint num)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[256])(res, src, num);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[256])(res, src, num);
			#endif
		}

		public static void InsertComponentEXT(uint res, uint src, uint num)
		{
			InsertComponentEXTNative(res, src, num);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void InsertEventMarkerEXTNative(int length, byte* marker)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, byte*, void>)funcTable[257])(length, marker);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[257])(length, (nint)marker);
			#endif
		}

		public static void InsertEventMarkerEXT(int length, byte* marker)
		{
			InsertEventMarkerEXTNative(length, marker);
		}

		public static void InsertEventMarkerEXT(int length, string marker)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (marker != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(marker);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(marker, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			InsertEventMarkerEXTNative(length, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void InsertEventMarkerEXT(int length, ReadOnlySpan<byte> marker)
		{
			fixed (byte* pmarker0 = marker)
			{
				InsertEventMarkerEXTNative(length, pmarker0);
			}
		}

		public static void InsertEventMarkerEXT(int length, ref byte marker)
		{
			fixed (byte* pmarker0 = &marker)
			{
				InsertEventMarkerEXTNative(length, pmarker0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsEnabledIndexedEXTNative(GLEnableCap target, uint index)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLEnableCap, uint, byte>)funcTable[258])(target, index);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<GLEnableCap, uint, byte>)funcTable[258])(target, index);
			#endif
		}

		public static bool IsEnabledIndexedEXT(GLEnableCap target, uint index)
		{
			byte ret = IsEnabledIndexedEXTNative(target, index);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsFramebufferEXTNative(uint framebuffer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[259])(framebuffer);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[259])(framebuffer);
			#endif
		}

		public static bool IsFramebufferEXT(uint framebuffer)
		{
			byte ret = IsFramebufferEXTNative(framebuffer);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsMemoryObjectEXTNative(uint memoryObject)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[260])(memoryObject);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[260])(memoryObject);
			#endif
		}

		public static bool IsMemoryObjectEXT(uint memoryObject)
		{
			byte ret = IsMemoryObjectEXTNative(memoryObject);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsProgramPipelineEXTNative(uint pipeline)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[261])(pipeline);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[261])(pipeline);
			#endif
		}

		public static bool IsProgramPipelineEXT(uint pipeline)
		{
			byte ret = IsProgramPipelineEXTNative(pipeline);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsRenderbufferEXTNative(uint renderbuffer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[262])(renderbuffer);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[262])(renderbuffer);
			#endif
		}

		public static bool IsRenderbufferEXT(uint renderbuffer)
		{
			byte ret = IsRenderbufferEXTNative(renderbuffer);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsSemaphoreEXTNative(uint semaphore)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[263])(semaphore);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[263])(semaphore);
			#endif
		}

		public static bool IsSemaphoreEXT(uint semaphore)
		{
			byte ret = IsSemaphoreEXTNative(semaphore);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsTextureEXTNative(uint texture)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[264])(texture);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[264])(texture);
			#endif
		}

		public static bool IsTextureEXT(uint texture)
		{
			byte ret = IsTextureEXTNative(texture);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsVariantEnabledEXTNative(uint id, GLVariantCapEXT cap)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, GLVariantCapEXT, byte>)funcTable[265])(id, cap);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, GLVariantCapEXT, byte>)funcTable[265])(id, cap);
			#endif
		}

		public static bool IsVariantEnabledEXT(uint id, GLVariantCapEXT cap)
		{
			byte ret = IsVariantEnabledEXTNative(id, cap);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LabelObjectEXTNative(GLEnum type, uint @object, int length, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, uint, int, byte*, void>)funcTable[266])(type, @object, length, label);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, uint, int, nint, void>)funcTable[266])(type, @object, length, (nint)label);
			#endif
		}

		public static void LabelObjectEXT(GLEnum type, uint @object, int length, byte* label)
		{
			LabelObjectEXTNative(type, @object, length, label);
		}

		public static void LabelObjectEXT(GLEnum type, uint @object, int length, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LabelObjectEXTNative(type, @object, length, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LabelObjectEXT(GLEnum type, uint @object, int length, ReadOnlySpan<byte> label)
		{
			fixed (byte* plabel0 = label)
			{
				LabelObjectEXTNative(type, @object, length, plabel0);
			}
		}

		public static void LabelObjectEXT(GLEnum type, uint @object, int length, ref byte label)
		{
			fixed (byte* plabel0 = &label)
			{
				LabelObjectEXTNative(type, @object, length, plabel0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LockArraysEXTNative(int first, int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[267])(first, count);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[267])(first, count);
			#endif
		}

		public static void LockArraysEXT(int first, int count)
		{
			LockArraysEXTNative(first, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* MapNamedBufferEXTNative(uint buffer, GLBufferAccessARB access)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, GLBufferAccessARB, void*>)funcTable[268])(buffer, access);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<uint, GLBufferAccessARB, nint>)funcTable[268])(buffer, access);
			#endif
		}

		public static void* MapNamedBufferEXT(uint buffer, GLBufferAccessARB access)
		{
			void* ret = MapNamedBufferEXTNative(buffer, access);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* MapNamedBufferRangeEXTNative(uint buffer, nint offset, nint length, GLMapBufferAccessMask access)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, nint, nint, GLMapBufferAccessMask, void*>)funcTable[269])(buffer, offset, length, access);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<uint, nint, nint, GLMapBufferAccessMask, nint>)funcTable[269])(buffer, offset, length, access);
			#endif
		}

		public static void* MapNamedBufferRangeEXT(uint buffer, nint offset, nint length, GLMapBufferAccessMask access)
		{
			void* ret = MapNamedBufferRangeEXTNative(buffer, offset, length, access);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixFrustumEXTNative(GLMatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, double, double, double, double, double, double, void>)funcTable[270])(mode, left, right, bottom, top, zNear, zFar);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, double, double, double, double, double, double, void>)funcTable[270])(mode, left, right, bottom, top, zNear, zFar);
			#endif
		}

		public static void MatrixFrustumEXT(GLMatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar)
		{
			MatrixFrustumEXTNative(mode, left, right, bottom, top, zNear, zFar);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixLoadIdentityEXTNative(GLMatrixMode mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, void>)funcTable[271])(mode);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, void>)funcTable[271])(mode);
			#endif
		}

		public static void MatrixLoadIdentityEXT(GLMatrixMode mode)
		{
			MatrixLoadIdentityEXTNative(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixLoadTransposedEXTNative(GLMatrixMode mode, double* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, double*, void>)funcTable[272])(mode, m);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, nint, void>)funcTable[272])(mode, (nint)m);
			#endif
		}

		public static void MatrixLoadTransposedEXT(GLMatrixMode mode, double* m)
		{
			MatrixLoadTransposedEXTNative(mode, m);
		}

		public static void MatrixLoadTransposedEXT(GLMatrixMode mode, ref double m)
		{
			fixed (double* pm0 = &m)
			{
				MatrixLoadTransposedEXTNative(mode, pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixLoadTransposefEXTNative(GLMatrixMode mode, float* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, float*, void>)funcTable[273])(mode, m);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, nint, void>)funcTable[273])(mode, (nint)m);
			#endif
		}

		public static void MatrixLoadTransposefEXT(GLMatrixMode mode, float* m)
		{
			MatrixLoadTransposefEXTNative(mode, m);
		}

		public static void MatrixLoadTransposefEXT(GLMatrixMode mode, ref float m)
		{
			fixed (float* pm0 = &m)
			{
				MatrixLoadTransposefEXTNative(mode, pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixLoaddEXTNative(GLMatrixMode mode, double* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, double*, void>)funcTable[274])(mode, m);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, nint, void>)funcTable[274])(mode, (nint)m);
			#endif
		}

		public static void MatrixLoaddEXT(GLMatrixMode mode, double* m)
		{
			MatrixLoaddEXTNative(mode, m);
		}

		public static void MatrixLoaddEXT(GLMatrixMode mode, ref double m)
		{
			fixed (double* pm0 = &m)
			{
				MatrixLoaddEXTNative(mode, pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixLoadfEXTNative(GLMatrixMode mode, float* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, float*, void>)funcTable[275])(mode, m);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, nint, void>)funcTable[275])(mode, (nint)m);
			#endif
		}

		public static void MatrixLoadfEXT(GLMatrixMode mode, float* m)
		{
			MatrixLoadfEXTNative(mode, m);
		}

		public static void MatrixLoadfEXT(GLMatrixMode mode, ref float m)
		{
			fixed (float* pm0 = &m)
			{
				MatrixLoadfEXTNative(mode, pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixMultTransposedEXTNative(GLMatrixMode mode, double* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, double*, void>)funcTable[276])(mode, m);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, nint, void>)funcTable[276])(mode, (nint)m);
			#endif
		}

		public static void MatrixMultTransposedEXT(GLMatrixMode mode, double* m)
		{
			MatrixMultTransposedEXTNative(mode, m);
		}

		public static void MatrixMultTransposedEXT(GLMatrixMode mode, ref double m)
		{
			fixed (double* pm0 = &m)
			{
				MatrixMultTransposedEXTNative(mode, pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixMultTransposefEXTNative(GLMatrixMode mode, float* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, float*, void>)funcTable[277])(mode, m);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, nint, void>)funcTable[277])(mode, (nint)m);
			#endif
		}

		public static void MatrixMultTransposefEXT(GLMatrixMode mode, float* m)
		{
			MatrixMultTransposefEXTNative(mode, m);
		}

		public static void MatrixMultTransposefEXT(GLMatrixMode mode, ref float m)
		{
			fixed (float* pm0 = &m)
			{
				MatrixMultTransposefEXTNative(mode, pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixMultdEXTNative(GLMatrixMode mode, double* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, double*, void>)funcTable[278])(mode, m);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, nint, void>)funcTable[278])(mode, (nint)m);
			#endif
		}

		public static void MatrixMultdEXT(GLMatrixMode mode, double* m)
		{
			MatrixMultdEXTNative(mode, m);
		}

		public static void MatrixMultdEXT(GLMatrixMode mode, ref double m)
		{
			fixed (double* pm0 = &m)
			{
				MatrixMultdEXTNative(mode, pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixMultfEXTNative(GLMatrixMode mode, float* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, float*, void>)funcTable[279])(mode, m);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, nint, void>)funcTable[279])(mode, (nint)m);
			#endif
		}

		public static void MatrixMultfEXT(GLMatrixMode mode, float* m)
		{
			MatrixMultfEXTNative(mode, m);
		}

		public static void MatrixMultfEXT(GLMatrixMode mode, ref float m)
		{
			fixed (float* pm0 = &m)
			{
				MatrixMultfEXTNative(mode, pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixOrthoEXTNative(GLMatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, double, double, double, double, double, double, void>)funcTable[280])(mode, left, right, bottom, top, zNear, zFar);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, double, double, double, double, double, double, void>)funcTable[280])(mode, left, right, bottom, top, zNear, zFar);
			#endif
		}

		public static void MatrixOrthoEXT(GLMatrixMode mode, double left, double right, double bottom, double top, double zNear, double zFar)
		{
			MatrixOrthoEXTNative(mode, left, right, bottom, top, zNear, zFar);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixPopEXTNative(GLMatrixMode mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, void>)funcTable[281])(mode);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, void>)funcTable[281])(mode);
			#endif
		}

		public static void MatrixPopEXT(GLMatrixMode mode)
		{
			MatrixPopEXTNative(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixPushEXTNative(GLMatrixMode mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, void>)funcTable[282])(mode);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, void>)funcTable[282])(mode);
			#endif
		}

		public static void MatrixPushEXT(GLMatrixMode mode)
		{
			MatrixPushEXTNative(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixRotatedEXTNative(GLMatrixMode mode, double angle, double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, double, double, double, double, void>)funcTable[283])(mode, angle, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, double, double, double, double, void>)funcTable[283])(mode, angle, x, y, z);
			#endif
		}

		public static void MatrixRotatedEXT(GLMatrixMode mode, double angle, double x, double y, double z)
		{
			MatrixRotatedEXTNative(mode, angle, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixRotatefEXTNative(GLMatrixMode mode, float angle, float x, float y, float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, float, float, float, float, void>)funcTable[284])(mode, angle, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, float, float, float, float, void>)funcTable[284])(mode, angle, x, y, z);
			#endif
		}

		public static void MatrixRotatefEXT(GLMatrixMode mode, float angle, float x, float y, float z)
		{
			MatrixRotatefEXTNative(mode, angle, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixScaledEXTNative(GLMatrixMode mode, double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, double, double, double, void>)funcTable[285])(mode, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, double, double, double, void>)funcTable[285])(mode, x, y, z);
			#endif
		}

		public static void MatrixScaledEXT(GLMatrixMode mode, double x, double y, double z)
		{
			MatrixScaledEXTNative(mode, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixScalefEXTNative(GLMatrixMode mode, float x, float y, float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, float, float, float, void>)funcTable[286])(mode, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, float, float, float, void>)funcTable[286])(mode, x, y, z);
			#endif
		}

		public static void MatrixScalefEXT(GLMatrixMode mode, float x, float y, float z)
		{
			MatrixScalefEXTNative(mode, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixTranslatedEXTNative(GLMatrixMode mode, double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, double, double, double, void>)funcTable[287])(mode, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, double, double, double, void>)funcTable[287])(mode, x, y, z);
			#endif
		}

		public static void MatrixTranslatedEXT(GLMatrixMode mode, double x, double y, double z)
		{
			MatrixTranslatedEXTNative(mode, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixTranslatefEXTNative(GLMatrixMode mode, float x, float y, float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMatrixMode, float, float, float, void>)funcTable[288])(mode, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<GLMatrixMode, float, float, float, void>)funcTable[288])(mode, x, y, z);
			#endif
		}

		public static void MatrixTranslatefEXT(GLMatrixMode mode, float x, float y, float z)
		{
			MatrixTranslatefEXTNative(mode, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MemoryBarrierEXTNative(GLMemoryBarrierMask barriers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMemoryBarrierMask, void>)funcTable[289])(barriers);
			#else
			((delegate* unmanaged[Cdecl]<GLMemoryBarrierMask, void>)funcTable[289])(barriers);
			#endif
		}

		public static void MemoryBarrierEXT(GLMemoryBarrierMask barriers)
		{
			MemoryBarrierEXTNative(barriers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MemoryObjectParameterivEXTNative(uint memoryObject, GLMemoryObjectParameterName pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLMemoryObjectParameterName, int*, void>)funcTable[290])(memoryObject, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLMemoryObjectParameterName, nint, void>)funcTable[290])(memoryObject, pname, (nint)@params);
			#endif
		}

		public static void MemoryObjectParameterivEXT(uint memoryObject, GLMemoryObjectParameterName pname, int* @params)
		{
			MemoryObjectParameterivEXTNative(memoryObject, pname, @params);
		}

		public static void MemoryObjectParameterivEXT(uint memoryObject, GLMemoryObjectParameterName pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				MemoryObjectParameterivEXTNative(memoryObject, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MinmaxEXTNative(GLMinmaxTargetEXT target, GLInternalFormat internalformat, byte sink)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, GLInternalFormat, byte, void>)funcTable[291])(target, internalformat, sink);
			#else
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, GLInternalFormat, byte, void>)funcTable[291])(target, internalformat, sink);
			#endif
		}

		public static void MinmaxEXT(GLMinmaxTargetEXT target, GLInternalFormat internalformat, byte sink)
		{
			MinmaxEXTNative(target, internalformat, sink);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiDrawArraysEXTNative(GLPrimitiveType mode, int* first, int* count, int primcount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int*, int*, int, void>)funcTable[292])(mode, first, count, primcount);
			#else
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, nint, nint, int, void>)funcTable[292])(mode, (nint)first, (nint)count, primcount);
			#endif
		}

		public static void MultiDrawArraysEXT(GLPrimitiveType mode, int* first, int* count, int primcount)
		{
			MultiDrawArraysEXTNative(mode, first, count, primcount);
		}

		public static void MultiDrawArraysEXT(GLPrimitiveType mode, ref int first, int* count, int primcount)
		{
			fixed (int* pfirst0 = &first)
			{
				MultiDrawArraysEXTNative(mode, pfirst0, count, primcount);
			}
		}

		public static void MultiDrawArraysEXT(GLPrimitiveType mode, int* first, ref int count, int primcount)
		{
			fixed (int* pcount0 = &count)
			{
				MultiDrawArraysEXTNative(mode, first, pcount0, primcount);
			}
		}

		public static void MultiDrawArraysEXT(GLPrimitiveType mode, ref int first, ref int count, int primcount)
		{
			fixed (int* pfirst0 = &first)
			{
				fixed (int* pcount1 = &count)
				{
					MultiDrawArraysEXTNative(mode, pfirst0, pcount1, primcount);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiDrawElementsEXTNative(GLPrimitiveType mode, int* count, GLDrawElementsType type, void** indices, int primcount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int*, GLDrawElementsType, void**, int, void>)funcTable[293])(mode, count, type, indices, primcount);
			#else
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, nint, GLDrawElementsType, nint, int, void>)funcTable[293])(mode, (nint)count, type, (nint)indices, primcount);
			#endif
		}

		public static void MultiDrawElementsEXT(GLPrimitiveType mode, int* count, GLDrawElementsType type, void** indices, int primcount)
		{
			MultiDrawElementsEXTNative(mode, count, type, indices, primcount);
		}

		public static void MultiDrawElementsEXT(GLPrimitiveType mode, ref int count, GLDrawElementsType type, void** indices, int primcount)
		{
			fixed (int* pcount0 = &count)
			{
				MultiDrawElementsEXTNative(mode, pcount0, type, indices, primcount);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexBufferEXTNative(GLTextureUnit texunit, GLTextureTarget target, GLInternalFormat internalformat, uint buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, GLInternalFormat, uint, void>)funcTable[294])(texunit, target, internalformat, buffer);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, GLInternalFormat, uint, void>)funcTable[294])(texunit, target, internalformat, buffer);
			#endif
		}

		public static void MultiTexBufferEXT(GLTextureUnit texunit, GLTextureTarget target, GLInternalFormat internalformat, uint buffer)
		{
			MultiTexBufferEXTNative(texunit, target, internalformat, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoordPointerEXTNative(GLTextureUnit texunit, int size, GLTexCoordPointerType type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, GLTexCoordPointerType, int, void*, void>)funcTable[295])(texunit, size, type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, GLTexCoordPointerType, int, nint, void>)funcTable[295])(texunit, size, type, stride, (nint)pointer);
			#endif
		}

		public static void MultiTexCoordPointerEXT(GLTextureUnit texunit, int size, GLTexCoordPointerType type, int stride, void* pointer)
		{
			MultiTexCoordPointerEXTNative(texunit, size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexEnvfEXTNative(GLTextureUnit texunit, GLTextureEnvTarget target, GLTextureEnvParameter pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureEnvTarget, GLTextureEnvParameter, float, void>)funcTable[296])(texunit, target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureEnvTarget, GLTextureEnvParameter, float, void>)funcTable[296])(texunit, target, pname, param);
			#endif
		}

		public static void MultiTexEnvfEXT(GLTextureUnit texunit, GLTextureEnvTarget target, GLTextureEnvParameter pname, float param)
		{
			MultiTexEnvfEXTNative(texunit, target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexEnvfvEXTNative(GLTextureUnit texunit, GLTextureEnvTarget target, GLTextureEnvParameter pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureEnvTarget, GLTextureEnvParameter, float*, void>)funcTable[297])(texunit, target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureEnvTarget, GLTextureEnvParameter, nint, void>)funcTable[297])(texunit, target, pname, (nint)@params);
			#endif
		}

		public static void MultiTexEnvfvEXT(GLTextureUnit texunit, GLTextureEnvTarget target, GLTextureEnvParameter pname, float* @params)
		{
			MultiTexEnvfvEXTNative(texunit, target, pname, @params);
		}

		public static void MultiTexEnvfvEXT(GLTextureUnit texunit, GLTextureEnvTarget target, GLTextureEnvParameter pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				MultiTexEnvfvEXTNative(texunit, target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexEnviEXTNative(GLTextureUnit texunit, GLTextureEnvTarget target, GLTextureEnvParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureEnvTarget, GLTextureEnvParameter, int, void>)funcTable[298])(texunit, target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureEnvTarget, GLTextureEnvParameter, int, void>)funcTable[298])(texunit, target, pname, param);
			#endif
		}

		public static void MultiTexEnviEXT(GLTextureUnit texunit, GLTextureEnvTarget target, GLTextureEnvParameter pname, int param)
		{
			MultiTexEnviEXTNative(texunit, target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexEnvivEXTNative(GLTextureUnit texunit, GLTextureEnvTarget target, GLTextureEnvParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureEnvTarget, GLTextureEnvParameter, int*, void>)funcTable[299])(texunit, target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureEnvTarget, GLTextureEnvParameter, nint, void>)funcTable[299])(texunit, target, pname, (nint)@params);
			#endif
		}

		public static void MultiTexEnvivEXT(GLTextureUnit texunit, GLTextureEnvTarget target, GLTextureEnvParameter pname, int* @params)
		{
			MultiTexEnvivEXTNative(texunit, target, pname, @params);
		}

		public static void MultiTexEnvivEXT(GLTextureUnit texunit, GLTextureEnvTarget target, GLTextureEnvParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				MultiTexEnvivEXTNative(texunit, target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexGendEXTNative(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, double param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureCoordName, GLTextureGenParameter, double, void>)funcTable[300])(texunit, coord, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureCoordName, GLTextureGenParameter, double, void>)funcTable[300])(texunit, coord, pname, param);
			#endif
		}

		public static void MultiTexGendEXT(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, double param)
		{
			MultiTexGendEXTNative(texunit, coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexGendvEXTNative(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureCoordName, GLTextureGenParameter, double*, void>)funcTable[301])(texunit, coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureCoordName, GLTextureGenParameter, nint, void>)funcTable[301])(texunit, coord, pname, (nint)@params);
			#endif
		}

		public static void MultiTexGendvEXT(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, double* @params)
		{
			MultiTexGendvEXTNative(texunit, coord, pname, @params);
		}

		public static void MultiTexGendvEXT(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, ref double @params)
		{
			fixed (double* pparams0 = &@params)
			{
				MultiTexGendvEXTNative(texunit, coord, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexGenfEXTNative(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureCoordName, GLTextureGenParameter, float, void>)funcTable[302])(texunit, coord, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureCoordName, GLTextureGenParameter, float, void>)funcTable[302])(texunit, coord, pname, param);
			#endif
		}

		public static void MultiTexGenfEXT(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, float param)
		{
			MultiTexGenfEXTNative(texunit, coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexGenfvEXTNative(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureCoordName, GLTextureGenParameter, float*, void>)funcTable[303])(texunit, coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureCoordName, GLTextureGenParameter, nint, void>)funcTable[303])(texunit, coord, pname, (nint)@params);
			#endif
		}

		public static void MultiTexGenfvEXT(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, float* @params)
		{
			MultiTexGenfvEXTNative(texunit, coord, pname, @params);
		}

		public static void MultiTexGenfvEXT(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				MultiTexGenfvEXTNative(texunit, coord, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexGeniEXTNative(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureCoordName, GLTextureGenParameter, int, void>)funcTable[304])(texunit, coord, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureCoordName, GLTextureGenParameter, int, void>)funcTable[304])(texunit, coord, pname, param);
			#endif
		}

		public static void MultiTexGeniEXT(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, int param)
		{
			MultiTexGeniEXTNative(texunit, coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexGenivEXTNative(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureCoordName, GLTextureGenParameter, int*, void>)funcTable[305])(texunit, coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureCoordName, GLTextureGenParameter, nint, void>)funcTable[305])(texunit, coord, pname, (nint)@params);
			#endif
		}

		public static void MultiTexGenivEXT(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, int* @params)
		{
			MultiTexGenivEXTNative(texunit, coord, pname, @params);
		}

		public static void MultiTexGenivEXT(GLTextureUnit texunit, GLTextureCoordName coord, GLTextureGenParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				MultiTexGenivEXTNative(texunit, coord, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexImage1DEXTNative(GLTextureUnit texunit, GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, int, GLInternalFormat, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[306])(texunit, target, level, internalformat, width, border, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, int, GLInternalFormat, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[306])(texunit, target, level, internalformat, width, border, format, type, (nint)pixels);
			#endif
		}

		public static void MultiTexImage1DEXT(GLTextureUnit texunit, GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			MultiTexImage1DEXTNative(texunit, target, level, internalformat, width, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexImage2DEXTNative(GLTextureUnit texunit, GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int height, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, int, GLInternalFormat, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[307])(texunit, target, level, internalformat, width, height, border, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, int, GLInternalFormat, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[307])(texunit, target, level, internalformat, width, height, border, format, type, (nint)pixels);
			#endif
		}

		public static void MultiTexImage2DEXT(GLTextureUnit texunit, GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int height, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			MultiTexImage2DEXTNative(texunit, target, level, internalformat, width, height, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexImage3DEXTNative(GLTextureUnit texunit, GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int height, int depth, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, int, GLInternalFormat, int, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[308])(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, int, GLInternalFormat, int, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[308])(texunit, target, level, internalformat, width, height, depth, border, format, type, (nint)pixels);
			#endif
		}

		public static void MultiTexImage3DEXT(GLTextureUnit texunit, GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int height, int depth, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			MultiTexImage3DEXTNative(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexParameterIivEXTNative(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, GLTextureParameterName, int*, void>)funcTable[309])(texunit, target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, GLTextureParameterName, nint, void>)funcTable[309])(texunit, target, pname, (nint)@params);
			#endif
		}

		public static void MultiTexParameterIivEXT(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, int* @params)
		{
			MultiTexParameterIivEXTNative(texunit, target, pname, @params);
		}

		public static void MultiTexParameterIivEXT(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				MultiTexParameterIivEXTNative(texunit, target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexParameterIuivEXTNative(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, uint* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, GLTextureParameterName, uint*, void>)funcTable[310])(texunit, target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, GLTextureParameterName, nint, void>)funcTable[310])(texunit, target, pname, (nint)@params);
			#endif
		}

		public static void MultiTexParameterIuivEXT(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, uint* @params)
		{
			MultiTexParameterIuivEXTNative(texunit, target, pname, @params);
		}

		public static void MultiTexParameterIuivEXT(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, ref uint @params)
		{
			fixed (uint* pparams0 = &@params)
			{
				MultiTexParameterIuivEXTNative(texunit, target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexParameterfEXTNative(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, GLTextureParameterName, float, void>)funcTable[311])(texunit, target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, GLTextureParameterName, float, void>)funcTable[311])(texunit, target, pname, param);
			#endif
		}

		public static void MultiTexParameterfEXT(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, float param)
		{
			MultiTexParameterfEXTNative(texunit, target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexParameterfvEXTNative(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, GLTextureParameterName, float*, void>)funcTable[312])(texunit, target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, GLTextureParameterName, nint, void>)funcTable[312])(texunit, target, pname, (nint)@params);
			#endif
		}

		public static void MultiTexParameterfvEXT(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, float* @params)
		{
			MultiTexParameterfvEXTNative(texunit, target, pname, @params);
		}

		public static void MultiTexParameterfvEXT(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				MultiTexParameterfvEXTNative(texunit, target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexParameteriEXTNative(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, GLTextureParameterName, int, void>)funcTable[313])(texunit, target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, GLTextureParameterName, int, void>)funcTable[313])(texunit, target, pname, param);
			#endif
		}

		public static void MultiTexParameteriEXT(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, int param)
		{
			MultiTexParameteriEXTNative(texunit, target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexParameterivEXTNative(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, GLTextureParameterName, int*, void>)funcTable[314])(texunit, target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, GLTextureParameterName, nint, void>)funcTable[314])(texunit, target, pname, (nint)@params);
			#endif
		}

		public static void MultiTexParameterivEXT(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, int* @params)
		{
			MultiTexParameterivEXTNative(texunit, target, pname, @params);
		}

		public static void MultiTexParameterivEXT(GLTextureUnit texunit, GLTextureTarget target, GLTextureParameterName pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				MultiTexParameterivEXTNative(texunit, target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexRenderbufferEXTNative(GLTextureUnit texunit, GLTextureTarget target, uint renderbuffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, uint, void>)funcTable[315])(texunit, target, renderbuffer);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, uint, void>)funcTable[315])(texunit, target, renderbuffer);
			#endif
		}

		public static void MultiTexRenderbufferEXT(GLTextureUnit texunit, GLTextureTarget target, uint renderbuffer)
		{
			MultiTexRenderbufferEXTNative(texunit, target, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexSubImage1DEXTNative(GLTextureUnit texunit, GLTextureTarget target, int level, int xoffset, int width, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[316])(texunit, target, level, xoffset, width, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[316])(texunit, target, level, xoffset, width, format, type, (nint)pixels);
			#endif
		}

		public static void MultiTexSubImage1DEXT(GLTextureUnit texunit, GLTextureTarget target, int level, int xoffset, int width, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			MultiTexSubImage1DEXTNative(texunit, target, level, xoffset, width, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexSubImage2DEXTNative(GLTextureUnit texunit, GLTextureTarget target, int level, int xoffset, int yoffset, int width, int height, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, int, int, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[317])(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, int, int, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[317])(texunit, target, level, xoffset, yoffset, width, height, format, type, (nint)pixels);
			#endif
		}

		public static void MultiTexSubImage2DEXT(GLTextureUnit texunit, GLTextureTarget target, int level, int xoffset, int yoffset, int width, int height, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			MultiTexSubImage2DEXTNative(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexSubImage3DEXTNative(GLTextureUnit texunit, GLTextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, int, int, int, int, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[318])(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTextureTarget, int, int, int, int, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[318])(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (nint)pixels);
			#endif
		}

		public static void MultiTexSubImage3DEXT(GLTextureUnit texunit, GLTextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			MultiTexSubImage3DEXTNative(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedBufferDataEXTNative(uint buffer, nint size, void* data, GLVertexBufferObjectUsage usage)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, nint, void*, GLVertexBufferObjectUsage, void>)funcTable[319])(buffer, size, data, usage);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, nint, GLVertexBufferObjectUsage, void>)funcTable[319])(buffer, size, (nint)data, usage);
			#endif
		}

		public static void NamedBufferDataEXT(uint buffer, nint size, void* data, GLVertexBufferObjectUsage usage)
		{
			NamedBufferDataEXTNative(buffer, size, data, usage);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedBufferStorageExternalEXTNative(uint buffer, nint offset, nint size, GLeglClientBufferEXT clientBuffer, GLBufferStorageMask flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, nint, nint, GLeglClientBufferEXT, GLBufferStorageMask, void>)funcTable[320])(buffer, offset, size, clientBuffer, flags);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, nint, GLeglClientBufferEXT, GLBufferStorageMask, void>)funcTable[320])(buffer, offset, size, clientBuffer, flags);
			#endif
		}

		public static void NamedBufferStorageExternalEXT(uint buffer, nint offset, nint size, GLeglClientBufferEXT clientBuffer, GLBufferStorageMask flags)
		{
			NamedBufferStorageExternalEXTNative(buffer, offset, size, clientBuffer, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedBufferStorageEXTNative(uint buffer, nint size, void* data, GLBufferStorageMask flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, nint, void*, GLBufferStorageMask, void>)funcTable[321])(buffer, size, data, flags);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, nint, GLBufferStorageMask, void>)funcTable[321])(buffer, size, (nint)data, flags);
			#endif
		}

		public static void NamedBufferStorageEXT(uint buffer, nint size, void* data, GLBufferStorageMask flags)
		{
			NamedBufferStorageEXTNative(buffer, size, data, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedBufferStorageMemEXTNative(uint buffer, nint size, uint memory, ulong offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, nint, uint, ulong, void>)funcTable[322])(buffer, size, memory, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, uint, ulong, void>)funcTable[322])(buffer, size, memory, offset);
			#endif
		}

		public static void NamedBufferStorageMemEXT(uint buffer, nint size, uint memory, ulong offset)
		{
			NamedBufferStorageMemEXTNative(buffer, size, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedBufferSubDataEXTNative(uint buffer, nint offset, nint size, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, nint, nint, void*, void>)funcTable[323])(buffer, offset, size, data);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, nint, nint, void>)funcTable[323])(buffer, offset, size, (nint)data);
			#endif
		}

		public static void NamedBufferSubDataEXT(uint buffer, nint offset, nint size, void* data)
		{
			NamedBufferSubDataEXTNative(buffer, offset, size, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedCopyBufferSubDataEXTNative(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, nint, nint, nint, void>)funcTable[324])(readBuffer, writeBuffer, readOffset, writeOffset, size);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, nint, nint, void>)funcTable[324])(readBuffer, writeBuffer, readOffset, writeOffset, size);
			#endif
		}

		public static void NamedCopyBufferSubDataEXT(uint readBuffer, uint writeBuffer, nint readOffset, nint writeOffset, nint size)
		{
			NamedCopyBufferSubDataEXTNative(readBuffer, writeBuffer, readOffset, writeOffset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferParameteriEXTNative(uint framebuffer, GLFramebufferParameterName pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferParameterName, int, void>)funcTable[325])(framebuffer, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferParameterName, int, void>)funcTable[325])(framebuffer, pname, param);
			#endif
		}

		public static void NamedFramebufferParameteriEXT(uint framebuffer, GLFramebufferParameterName pname, int param)
		{
			NamedFramebufferParameteriEXTNative(framebuffer, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferRenderbufferEXTNative(uint framebuffer, GLFramebufferAttachment attachment, GLRenderbufferTarget renderbuffertarget, uint renderbuffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, GLRenderbufferTarget, uint, void>)funcTable[326])(framebuffer, attachment, renderbuffertarget, renderbuffer);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, GLRenderbufferTarget, uint, void>)funcTable[326])(framebuffer, attachment, renderbuffertarget, renderbuffer);
			#endif
		}

		public static void NamedFramebufferRenderbufferEXT(uint framebuffer, GLFramebufferAttachment attachment, GLRenderbufferTarget renderbuffertarget, uint renderbuffer)
		{
			NamedFramebufferRenderbufferEXTNative(framebuffer, attachment, renderbuffertarget, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferTexture1DEXTNative(uint framebuffer, GLFramebufferAttachment attachment, GLTextureTarget textarget, uint texture, int level)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, GLTextureTarget, uint, int, void>)funcTable[327])(framebuffer, attachment, textarget, texture, level);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, GLTextureTarget, uint, int, void>)funcTable[327])(framebuffer, attachment, textarget, texture, level);
			#endif
		}

		public static void NamedFramebufferTexture1DEXT(uint framebuffer, GLFramebufferAttachment attachment, GLTextureTarget textarget, uint texture, int level)
		{
			NamedFramebufferTexture1DEXTNative(framebuffer, attachment, textarget, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferTexture2DEXTNative(uint framebuffer, GLFramebufferAttachment attachment, GLTextureTarget textarget, uint texture, int level)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, GLTextureTarget, uint, int, void>)funcTable[328])(framebuffer, attachment, textarget, texture, level);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, GLTextureTarget, uint, int, void>)funcTable[328])(framebuffer, attachment, textarget, texture, level);
			#endif
		}

		public static void NamedFramebufferTexture2DEXT(uint framebuffer, GLFramebufferAttachment attachment, GLTextureTarget textarget, uint texture, int level)
		{
			NamedFramebufferTexture2DEXTNative(framebuffer, attachment, textarget, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferTexture3DEXTNative(uint framebuffer, GLFramebufferAttachment attachment, GLTextureTarget textarget, uint texture, int level, int zoffset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, GLTextureTarget, uint, int, int, void>)funcTable[329])(framebuffer, attachment, textarget, texture, level, zoffset);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, GLTextureTarget, uint, int, int, void>)funcTable[329])(framebuffer, attachment, textarget, texture, level, zoffset);
			#endif
		}

		public static void NamedFramebufferTexture3DEXT(uint framebuffer, GLFramebufferAttachment attachment, GLTextureTarget textarget, uint texture, int level, int zoffset)
		{
			NamedFramebufferTexture3DEXTNative(framebuffer, attachment, textarget, texture, level, zoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferTextureEXTNative(uint framebuffer, GLFramebufferAttachment attachment, uint texture, int level)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, uint, int, void>)funcTable[330])(framebuffer, attachment, texture, level);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, uint, int, void>)funcTable[330])(framebuffer, attachment, texture, level);
			#endif
		}

		public static void NamedFramebufferTextureEXT(uint framebuffer, GLFramebufferAttachment attachment, uint texture, int level)
		{
			NamedFramebufferTextureEXTNative(framebuffer, attachment, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferTextureFaceEXTNative(uint framebuffer, GLFramebufferAttachment attachment, uint texture, int level, GLTextureTarget face)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, uint, int, GLTextureTarget, void>)funcTable[331])(framebuffer, attachment, texture, level, face);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, uint, int, GLTextureTarget, void>)funcTable[331])(framebuffer, attachment, texture, level, face);
			#endif
		}

		public static void NamedFramebufferTextureFaceEXT(uint framebuffer, GLFramebufferAttachment attachment, uint texture, int level, GLTextureTarget face)
		{
			NamedFramebufferTextureFaceEXTNative(framebuffer, attachment, texture, level, face);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferTextureLayerEXTNative(uint framebuffer, GLFramebufferAttachment attachment, uint texture, int level, int layer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, uint, int, int, void>)funcTable[332])(framebuffer, attachment, texture, level, layer);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, uint, int, int, void>)funcTable[332])(framebuffer, attachment, texture, level, layer);
			#endif
		}

		public static void NamedFramebufferTextureLayerEXT(uint framebuffer, GLFramebufferAttachment attachment, uint texture, int level, int layer)
		{
			NamedFramebufferTextureLayerEXTNative(framebuffer, attachment, texture, level, layer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedProgramLocalParameter4dEXTNative(uint program, GLProgramTarget target, uint index, double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, double, double, double, double, void>)funcTable[333])(program, target, index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, double, double, double, double, void>)funcTable[333])(program, target, index, x, y, z, w);
			#endif
		}

		public static void NamedProgramLocalParameter4dEXT(uint program, GLProgramTarget target, uint index, double x, double y, double z, double w)
		{
			NamedProgramLocalParameter4dEXTNative(program, target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedProgramLocalParameter4dvEXTNative(uint program, GLProgramTarget target, uint index, double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, double*, void>)funcTable[334])(program, target, index, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, nint, void>)funcTable[334])(program, target, index, (nint)@params);
			#endif
		}

		public static void NamedProgramLocalParameter4dvEXT(uint program, GLProgramTarget target, uint index, double* @params)
		{
			NamedProgramLocalParameter4dvEXTNative(program, target, index, @params);
		}

		public static void NamedProgramLocalParameter4dvEXT(uint program, GLProgramTarget target, uint index, ref double @params)
		{
			fixed (double* pparams0 = &@params)
			{
				NamedProgramLocalParameter4dvEXTNative(program, target, index, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedProgramLocalParameter4fEXTNative(uint program, GLProgramTarget target, uint index, float x, float y, float z, float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, float, float, float, float, void>)funcTable[335])(program, target, index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, float, float, float, float, void>)funcTable[335])(program, target, index, x, y, z, w);
			#endif
		}

		public static void NamedProgramLocalParameter4fEXT(uint program, GLProgramTarget target, uint index, float x, float y, float z, float w)
		{
			NamedProgramLocalParameter4fEXTNative(program, target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedProgramLocalParameter4fvEXTNative(uint program, GLProgramTarget target, uint index, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, float*, void>)funcTable[336])(program, target, index, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, nint, void>)funcTable[336])(program, target, index, (nint)@params);
			#endif
		}

		public static void NamedProgramLocalParameter4fvEXT(uint program, GLProgramTarget target, uint index, float* @params)
		{
			NamedProgramLocalParameter4fvEXTNative(program, target, index, @params);
		}

		public static void NamedProgramLocalParameter4fvEXT(uint program, GLProgramTarget target, uint index, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				NamedProgramLocalParameter4fvEXTNative(program, target, index, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedProgramLocalParameterI4iEXTNative(uint program, GLProgramTarget target, uint index, int x, int y, int z, int w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, int, int, int, int, void>)funcTable[337])(program, target, index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, int, int, int, int, void>)funcTable[337])(program, target, index, x, y, z, w);
			#endif
		}

		public static void NamedProgramLocalParameterI4iEXT(uint program, GLProgramTarget target, uint index, int x, int y, int z, int w)
		{
			NamedProgramLocalParameterI4iEXTNative(program, target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedProgramLocalParameterI4ivEXTNative(uint program, GLProgramTarget target, uint index, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, int*, void>)funcTable[338])(program, target, index, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, nint, void>)funcTable[338])(program, target, index, (nint)@params);
			#endif
		}

		public static void NamedProgramLocalParameterI4ivEXT(uint program, GLProgramTarget target, uint index, int* @params)
		{
			NamedProgramLocalParameterI4ivEXTNative(program, target, index, @params);
		}

		public static void NamedProgramLocalParameterI4ivEXT(uint program, GLProgramTarget target, uint index, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				NamedProgramLocalParameterI4ivEXTNative(program, target, index, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedProgramLocalParameterI4uiEXTNative(uint program, GLProgramTarget target, uint index, uint x, uint y, uint z, uint w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, uint, uint, uint, uint, void>)funcTable[339])(program, target, index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, uint, uint, uint, uint, void>)funcTable[339])(program, target, index, x, y, z, w);
			#endif
		}

		public static void NamedProgramLocalParameterI4uiEXT(uint program, GLProgramTarget target, uint index, uint x, uint y, uint z, uint w)
		{
			NamedProgramLocalParameterI4uiEXTNative(program, target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedProgramLocalParameterI4uivEXTNative(uint program, GLProgramTarget target, uint index, uint* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, uint*, void>)funcTable[340])(program, target, index, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, nint, void>)funcTable[340])(program, target, index, (nint)@params);
			#endif
		}

		public static void NamedProgramLocalParameterI4uivEXT(uint program, GLProgramTarget target, uint index, uint* @params)
		{
			NamedProgramLocalParameterI4uivEXTNative(program, target, index, @params);
		}

		public static void NamedProgramLocalParameterI4uivEXT(uint program, GLProgramTarget target, uint index, ref uint @params)
		{
			fixed (uint* pparams0 = &@params)
			{
				NamedProgramLocalParameterI4uivEXTNative(program, target, index, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedProgramLocalParameters4fvEXTNative(uint program, GLProgramTarget target, uint index, int count, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, int, float*, void>)funcTable[341])(program, target, index, count, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, int, nint, void>)funcTable[341])(program, target, index, count, (nint)@params);
			#endif
		}

		public static void NamedProgramLocalParameters4fvEXT(uint program, GLProgramTarget target, uint index, int count, float* @params)
		{
			NamedProgramLocalParameters4fvEXTNative(program, target, index, count, @params);
		}

		public static void NamedProgramLocalParameters4fvEXT(uint program, GLProgramTarget target, uint index, int count, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				NamedProgramLocalParameters4fvEXTNative(program, target, index, count, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedProgramLocalParametersI4ivEXTNative(uint program, GLProgramTarget target, uint index, int count, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, int, int*, void>)funcTable[342])(program, target, index, count, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, int, nint, void>)funcTable[342])(program, target, index, count, (nint)@params);
			#endif
		}

		public static void NamedProgramLocalParametersI4ivEXT(uint program, GLProgramTarget target, uint index, int count, int* @params)
		{
			NamedProgramLocalParametersI4ivEXTNative(program, target, index, count, @params);
		}

		public static void NamedProgramLocalParametersI4ivEXT(uint program, GLProgramTarget target, uint index, int count, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				NamedProgramLocalParametersI4ivEXTNative(program, target, index, count, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedProgramLocalParametersI4uivEXTNative(uint program, GLProgramTarget target, uint index, int count, uint* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, int, uint*, void>)funcTable[343])(program, target, index, count, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, uint, int, nint, void>)funcTable[343])(program, target, index, count, (nint)@params);
			#endif
		}

		public static void NamedProgramLocalParametersI4uivEXT(uint program, GLProgramTarget target, uint index, int count, uint* @params)
		{
			NamedProgramLocalParametersI4uivEXTNative(program, target, index, count, @params);
		}

		public static void NamedProgramLocalParametersI4uivEXT(uint program, GLProgramTarget target, uint index, int count, ref uint @params)
		{
			fixed (uint* pparams0 = &@params)
			{
				NamedProgramLocalParametersI4uivEXTNative(program, target, index, count, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedProgramStringEXTNative(uint program, GLProgramTarget target, GLProgramFormat format, int len, void* str)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, GLProgramFormat, int, void*, void>)funcTable[344])(program, target, format, len, str);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramTarget, GLProgramFormat, int, nint, void>)funcTable[344])(program, target, format, len, (nint)str);
			#endif
		}

		public static void NamedProgramStringEXT(uint program, GLProgramTarget target, GLProgramFormat format, int len, void* str)
		{
			NamedProgramStringEXTNative(program, target, format, len, str);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedRenderbufferStorageEXTNative(uint renderbuffer, GLInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLInternalFormat, int, int, void>)funcTable[345])(renderbuffer, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLInternalFormat, int, int, void>)funcTable[345])(renderbuffer, internalformat, width, height);
			#endif
		}

		public static void NamedRenderbufferStorageEXT(uint renderbuffer, GLInternalFormat internalformat, int width, int height)
		{
			NamedRenderbufferStorageEXTNative(renderbuffer, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedRenderbufferStorageMultisampleCoverageEXTNative(uint renderbuffer, int coverageSamples, int colorSamples, GLInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, GLInternalFormat, int, int, void>)funcTable[346])(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, GLInternalFormat, int, int, void>)funcTable[346])(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
			#endif
		}

		public static void NamedRenderbufferStorageMultisampleCoverageEXT(uint renderbuffer, int coverageSamples, int colorSamples, GLInternalFormat internalformat, int width, int height)
		{
			NamedRenderbufferStorageMultisampleCoverageEXTNative(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedRenderbufferStorageMultisampleEXTNative(uint renderbuffer, int samples, GLInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLInternalFormat, int, int, void>)funcTable[347])(renderbuffer, samples, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLInternalFormat, int, int, void>)funcTable[347])(renderbuffer, samples, internalformat, width, height);
			#endif
		}

		public static void NamedRenderbufferStorageMultisampleEXT(uint renderbuffer, int samples, GLInternalFormat internalformat, int width, int height)
		{
			NamedRenderbufferStorageMultisampleEXTNative(renderbuffer, samples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NormalPointerEXTNative(GLNormalPointerType type, int stride, int count, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLNormalPointerType, int, int, void*, void>)funcTable[348])(type, stride, count, pointer);
			#else
			((delegate* unmanaged[Cdecl]<GLNormalPointerType, int, int, nint, void>)funcTable[348])(type, stride, count, (nint)pointer);
			#endif
		}

		public static void NormalPointerEXT(GLNormalPointerType type, int stride, int count, void* pointer)
		{
			NormalPointerEXTNative(type, stride, count, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelTransformParameterfEXTNative(GLPixelTransformTargetEXT target, GLPixelTransformPNameEXT pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelTransformTargetEXT, GLPixelTransformPNameEXT, float, void>)funcTable[349])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelTransformTargetEXT, GLPixelTransformPNameEXT, float, void>)funcTable[349])(target, pname, param);
			#endif
		}

		public static void PixelTransformParameterfEXT(GLPixelTransformTargetEXT target, GLPixelTransformPNameEXT pname, float param)
		{
			PixelTransformParameterfEXTNative(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelTransformParameterfvEXTNative(GLPixelTransformTargetEXT target, GLPixelTransformPNameEXT pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelTransformTargetEXT, GLPixelTransformPNameEXT, float*, void>)funcTable[350])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelTransformTargetEXT, GLPixelTransformPNameEXT, nint, void>)funcTable[350])(target, pname, (nint)@params);
			#endif
		}

		public static void PixelTransformParameterfvEXT(GLPixelTransformTargetEXT target, GLPixelTransformPNameEXT pname, float* @params)
		{
			PixelTransformParameterfvEXTNative(target, pname, @params);
		}

		public static void PixelTransformParameterfvEXT(GLPixelTransformTargetEXT target, GLPixelTransformPNameEXT pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				PixelTransformParameterfvEXTNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelTransformParameteriEXTNative(GLPixelTransformTargetEXT target, GLPixelTransformPNameEXT pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelTransformTargetEXT, GLPixelTransformPNameEXT, int, void>)funcTable[351])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelTransformTargetEXT, GLPixelTransformPNameEXT, int, void>)funcTable[351])(target, pname, param);
			#endif
		}

		public static void PixelTransformParameteriEXT(GLPixelTransformTargetEXT target, GLPixelTransformPNameEXT pname, int param)
		{
			PixelTransformParameteriEXTNative(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelTransformParameterivEXTNative(GLPixelTransformTargetEXT target, GLPixelTransformPNameEXT pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelTransformTargetEXT, GLPixelTransformPNameEXT, int*, void>)funcTable[352])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelTransformTargetEXT, GLPixelTransformPNameEXT, nint, void>)funcTable[352])(target, pname, (nint)@params);
			#endif
		}

		public static void PixelTransformParameterivEXT(GLPixelTransformTargetEXT target, GLPixelTransformPNameEXT pname, int* @params)
		{
			PixelTransformParameterivEXTNative(target, pname, @params);
		}

		public static void PixelTransformParameterivEXT(GLPixelTransformTargetEXT target, GLPixelTransformPNameEXT pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				PixelTransformParameterivEXTNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PointParameterfEXTNative(GLPointParameterNameARB pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, float, void>)funcTable[353])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, float, void>)funcTable[353])(pname, param);
			#endif
		}

		public static void PointParameterfEXT(GLPointParameterNameARB pname, float param)
		{
			PointParameterfEXTNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PointParameterfvEXTNative(GLPointParameterNameARB pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, float*, void>)funcTable[354])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, nint, void>)funcTable[354])(pname, (nint)@params);
			#endif
		}

		public static void PointParameterfvEXT(GLPointParameterNameARB pname, float* @params)
		{
			PointParameterfvEXTNative(pname, @params);
		}

		public static void PointParameterfvEXT(GLPointParameterNameARB pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				PointParameterfvEXTNative(pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PolygonOffsetClampEXTNative(float factor, float units, float clamp)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[355])(factor, units, clamp);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[355])(factor, units, clamp);
			#endif
		}

		public static void PolygonOffsetClampEXT(float factor, float units, float clamp)
		{
			PolygonOffsetClampEXTNative(factor, units, clamp);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PolygonOffsetEXTNative(float factor, float bias)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[356])(factor, bias);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[356])(factor, bias);
			#endif
		}

		public static void PolygonOffsetEXT(float factor, float bias)
		{
			PolygonOffsetEXTNative(factor, bias);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PopGroupMarkerEXTNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[357])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[357])();
			#endif
		}

		public static void PopGroupMarkerEXT()
		{
			PopGroupMarkerEXTNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PrioritizeTexturesEXTNative(int n, uint* textures, float* priorities)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, float*, void>)funcTable[358])(n, textures, priorities);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, nint, void>)funcTable[358])(n, (nint)textures, (nint)priorities);
			#endif
		}

		public static void PrioritizeTexturesEXT(int n, uint* textures, float* priorities)
		{
			PrioritizeTexturesEXTNative(n, textures, priorities);
		}

		public static void PrioritizeTexturesEXT(int n, ref uint textures, float* priorities)
		{
			fixed (uint* ptextures0 = &textures)
			{
				PrioritizeTexturesEXTNative(n, ptextures0, priorities);
			}
		}

		public static void PrioritizeTexturesEXT(int n, uint* textures, ref float priorities)
		{
			fixed (float* ppriorities0 = &priorities)
			{
				PrioritizeTexturesEXTNative(n, textures, ppriorities0);
			}
		}

		public static void PrioritizeTexturesEXT(int n, ref uint textures, ref float priorities)
		{
			fixed (uint* ptextures0 = &textures)
			{
				fixed (float* ppriorities1 = &priorities)
				{
					PrioritizeTexturesEXTNative(n, ptextures0, ppriorities1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramEnvParameters4fvEXTNative(GLProgramTarget target, uint index, int count, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, int, float*, void>)funcTable[359])(target, index, count, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, int, nint, void>)funcTable[359])(target, index, count, (nint)@params);
			#endif
		}

		public static void ProgramEnvParameters4fvEXT(GLProgramTarget target, uint index, int count, float* @params)
		{
			ProgramEnvParameters4fvEXTNative(target, index, count, @params);
		}

		public static void ProgramEnvParameters4fvEXT(GLProgramTarget target, uint index, int count, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				ProgramEnvParameters4fvEXTNative(target, index, count, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramLocalParameters4fvEXTNative(GLProgramTarget target, uint index, int count, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, int, float*, void>)funcTable[360])(target, index, count, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, int, nint, void>)funcTable[360])(target, index, count, (nint)@params);
			#endif
		}

		public static void ProgramLocalParameters4fvEXT(GLProgramTarget target, uint index, int count, float* @params)
		{
			ProgramLocalParameters4fvEXTNative(target, index, count, @params);
		}

		public static void ProgramLocalParameters4fvEXT(GLProgramTarget target, uint index, int count, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				ProgramLocalParameters4fvEXTNative(target, index, count, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramParameteriEXTNative(uint program, GLProgramParameterPName pname, int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramParameterPName, int, void>)funcTable[361])(program, pname, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramParameterPName, int, void>)funcTable[361])(program, pname, value);
			#endif
		}

		public static void ProgramParameteriEXT(uint program, GLProgramParameterPName pname, int value)
		{
			ProgramParameteriEXTNative(program, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1dEXTNative(uint program, int location, double x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double, void>)funcTable[362])(program, location, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, double, void>)funcTable[362])(program, location, x);
			#endif
		}

		public static void ProgramUniform1dEXT(uint program, int location, double x)
		{
			ProgramUniform1dEXTNative(program, location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1dvEXTNative(uint program, int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)funcTable[363])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[363])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1dvEXT(uint program, int location, int count, double* value)
		{
			ProgramUniform1dvEXTNative(program, location, count, value);
		}

		public static void ProgramUniform1dvEXT(uint program, int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniform1dvEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1fEXTNative(uint program, int location, float v0)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, void>)funcTable[364])(program, location, v0);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, void>)funcTable[364])(program, location, v0);
			#endif
		}

		public static void ProgramUniform1fEXT(uint program, int location, float v0)
		{
			ProgramUniform1fEXTNative(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1fvEXTNative(uint program, int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)funcTable[365])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[365])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1fvEXT(uint program, int location, int count, float* value)
		{
			ProgramUniform1fvEXTNative(program, location, count, value);
		}

		public static void ProgramUniform1fvEXT(uint program, int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniform1fvEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1iEXTNative(uint program, int location, int v0)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[366])(program, location, v0);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[366])(program, location, v0);
			#endif
		}

		public static void ProgramUniform1iEXT(uint program, int location, int v0)
		{
			ProgramUniform1iEXTNative(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1ivEXTNative(uint program, int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)funcTable[367])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[367])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1ivEXT(uint program, int location, int count, int* value)
		{
			ProgramUniform1ivEXTNative(program, location, count, value);
		}

		public static void ProgramUniform1ivEXT(uint program, int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				ProgramUniform1ivEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1uiEXTNative(uint program, int location, uint v0)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, void>)funcTable[368])(program, location, v0);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, void>)funcTable[368])(program, location, v0);
			#endif
		}

		public static void ProgramUniform1uiEXT(uint program, int location, uint v0)
		{
			ProgramUniform1uiEXTNative(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1uivEXTNative(uint program, int location, int count, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)funcTable[369])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[369])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1uivEXT(uint program, int location, int count, uint* value)
		{
			ProgramUniform1uivEXTNative(program, location, count, value);
		}

		public static void ProgramUniform1uivEXT(uint program, int location, int count, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				ProgramUniform1uivEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2dEXTNative(uint program, int location, double x, double y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double, double, void>)funcTable[370])(program, location, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, double, double, void>)funcTable[370])(program, location, x, y);
			#endif
		}

		public static void ProgramUniform2dEXT(uint program, int location, double x, double y)
		{
			ProgramUniform2dEXTNative(program, location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2dvEXTNative(uint program, int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)funcTable[371])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[371])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2dvEXT(uint program, int location, int count, double* value)
		{
			ProgramUniform2dvEXTNative(program, location, count, value);
		}

		public static void ProgramUniform2dvEXT(uint program, int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniform2dvEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2fEXTNative(uint program, int location, float v0, float v1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, float, void>)funcTable[372])(program, location, v0, v1);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, float, void>)funcTable[372])(program, location, v0, v1);
			#endif
		}

		public static void ProgramUniform2fEXT(uint program, int location, float v0, float v1)
		{
			ProgramUniform2fEXTNative(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2fvEXTNative(uint program, int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)funcTable[373])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[373])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2fvEXT(uint program, int location, int count, float* value)
		{
			ProgramUniform2fvEXTNative(program, location, count, value);
		}

		public static void ProgramUniform2fvEXT(uint program, int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniform2fvEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2iEXTNative(uint program, int location, int v0, int v1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[374])(program, location, v0, v1);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[374])(program, location, v0, v1);
			#endif
		}

		public static void ProgramUniform2iEXT(uint program, int location, int v0, int v1)
		{
			ProgramUniform2iEXTNative(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2ivEXTNative(uint program, int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)funcTable[375])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[375])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2ivEXT(uint program, int location, int count, int* value)
		{
			ProgramUniform2ivEXTNative(program, location, count, value);
		}

		public static void ProgramUniform2ivEXT(uint program, int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				ProgramUniform2ivEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2uiEXTNative(uint program, int location, uint v0, uint v1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void>)funcTable[376])(program, location, v0, v1);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void>)funcTable[376])(program, location, v0, v1);
			#endif
		}

		public static void ProgramUniform2uiEXT(uint program, int location, uint v0, uint v1)
		{
			ProgramUniform2uiEXTNative(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2uivEXTNative(uint program, int location, int count, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)funcTable[377])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[377])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2uivEXT(uint program, int location, int count, uint* value)
		{
			ProgramUniform2uivEXTNative(program, location, count, value);
		}

		public static void ProgramUniform2uivEXT(uint program, int location, int count, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				ProgramUniform2uivEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3dEXTNative(uint program, int location, double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double, double, double, void>)funcTable[378])(program, location, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, double, double, double, void>)funcTable[378])(program, location, x, y, z);
			#endif
		}

		public static void ProgramUniform3dEXT(uint program, int location, double x, double y, double z)
		{
			ProgramUniform3dEXTNative(program, location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3dvEXTNative(uint program, int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)funcTable[379])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[379])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3dvEXT(uint program, int location, int count, double* value)
		{
			ProgramUniform3dvEXTNative(program, location, count, value);
		}

		public static void ProgramUniform3dvEXT(uint program, int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniform3dvEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3fEXTNative(uint program, int location, float v0, float v1, float v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, void>)funcTable[380])(program, location, v0, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, void>)funcTable[380])(program, location, v0, v1, v2);
			#endif
		}

		public static void ProgramUniform3fEXT(uint program, int location, float v0, float v1, float v2)
		{
			ProgramUniform3fEXTNative(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3fvEXTNative(uint program, int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)funcTable[381])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[381])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3fvEXT(uint program, int location, int count, float* value)
		{
			ProgramUniform3fvEXTNative(program, location, count, value);
		}

		public static void ProgramUniform3fvEXT(uint program, int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniform3fvEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3iEXTNative(uint program, int location, int v0, int v1, int v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[382])(program, location, v0, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[382])(program, location, v0, v1, v2);
			#endif
		}

		public static void ProgramUniform3iEXT(uint program, int location, int v0, int v1, int v2)
		{
			ProgramUniform3iEXTNative(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3ivEXTNative(uint program, int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)funcTable[383])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[383])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3ivEXT(uint program, int location, int count, int* value)
		{
			ProgramUniform3ivEXTNative(program, location, count, value);
		}

		public static void ProgramUniform3ivEXT(uint program, int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				ProgramUniform3ivEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3uiEXTNative(uint program, int location, uint v0, uint v1, uint v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, void>)funcTable[384])(program, location, v0, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, void>)funcTable[384])(program, location, v0, v1, v2);
			#endif
		}

		public static void ProgramUniform3uiEXT(uint program, int location, uint v0, uint v1, uint v2)
		{
			ProgramUniform3uiEXTNative(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3uivEXTNative(uint program, int location, int count, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)funcTable[385])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[385])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3uivEXT(uint program, int location, int count, uint* value)
		{
			ProgramUniform3uivEXTNative(program, location, count, value);
		}

		public static void ProgramUniform3uivEXT(uint program, int location, int count, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				ProgramUniform3uivEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4dEXTNative(uint program, int location, double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double, double, double, double, void>)funcTable[386])(program, location, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, double, double, double, double, void>)funcTable[386])(program, location, x, y, z, w);
			#endif
		}

		public static void ProgramUniform4dEXT(uint program, int location, double x, double y, double z, double w)
		{
			ProgramUniform4dEXTNative(program, location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4dvEXTNative(uint program, int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)funcTable[387])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[387])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4dvEXT(uint program, int location, int count, double* value)
		{
			ProgramUniform4dvEXTNative(program, location, count, value);
		}

		public static void ProgramUniform4dvEXT(uint program, int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniform4dvEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4fEXTNative(uint program, int location, float v0, float v1, float v2, float v3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, float, void>)funcTable[388])(program, location, v0, v1, v2, v3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, float, void>)funcTable[388])(program, location, v0, v1, v2, v3);
			#endif
		}

		public static void ProgramUniform4fEXT(uint program, int location, float v0, float v1, float v2, float v3)
		{
			ProgramUniform4fEXTNative(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4fvEXTNative(uint program, int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)funcTable[389])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[389])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4fvEXT(uint program, int location, int count, float* value)
		{
			ProgramUniform4fvEXTNative(program, location, count, value);
		}

		public static void ProgramUniform4fvEXT(uint program, int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniform4fvEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4iEXTNative(uint program, int location, int v0, int v1, int v2, int v3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void>)funcTable[390])(program, location, v0, v1, v2, v3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void>)funcTable[390])(program, location, v0, v1, v2, v3);
			#endif
		}

		public static void ProgramUniform4iEXT(uint program, int location, int v0, int v1, int v2, int v3)
		{
			ProgramUniform4iEXTNative(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4ivEXTNative(uint program, int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)funcTable[391])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[391])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4ivEXT(uint program, int location, int count, int* value)
		{
			ProgramUniform4ivEXTNative(program, location, count, value);
		}

		public static void ProgramUniform4ivEXT(uint program, int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				ProgramUniform4ivEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4uiEXTNative(uint program, int location, uint v0, uint v1, uint v2, uint v3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, uint, void>)funcTable[392])(program, location, v0, v1, v2, v3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, uint, void>)funcTable[392])(program, location, v0, v1, v2, v3);
			#endif
		}

		public static void ProgramUniform4uiEXT(uint program, int location, uint v0, uint v1, uint v2, uint v3)
		{
			ProgramUniform4uiEXTNative(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4uivEXTNative(uint program, int location, int count, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)funcTable[393])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[393])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4uivEXT(uint program, int location, int count, uint* value)
		{
			ProgramUniform4uivEXTNative(program, location, count, value);
		}

		public static void ProgramUniform4uivEXT(uint program, int location, int count, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				ProgramUniform4uivEXTNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2dvEXTNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[394])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[394])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2dvEXT(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix2dvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2dvEXT(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix2dvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2fvEXTNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[395])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[395])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2fvEXT(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix2fvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2fvEXT(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix2fvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2x3dvEXTNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[396])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[396])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2x3dvEXT(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix2x3dvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2x3dvEXT(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix2x3dvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2x3fvEXTNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[397])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[397])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2x3fvEXT(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix2x3fvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2x3fvEXT(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix2x3fvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2x4dvEXTNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[398])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[398])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2x4dvEXT(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix2x4dvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2x4dvEXT(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix2x4dvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2x4fvEXTNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[399])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[399])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2x4fvEXT(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix2x4fvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2x4fvEXT(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix2x4fvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3dvEXTNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[400])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[400])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3dvEXT(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix3dvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3dvEXT(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix3dvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3fvEXTNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[401])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[401])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3fvEXT(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix3fvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3fvEXT(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix3fvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3x2dvEXTNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[402])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[402])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3x2dvEXT(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix3x2dvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3x2dvEXT(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix3x2dvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3x2fvEXTNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[403])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[403])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3x2fvEXT(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix3x2fvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3x2fvEXT(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix3x2fvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3x4dvEXTNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[404])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[404])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3x4dvEXT(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix3x4dvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3x4dvEXT(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix3x4dvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3x4fvEXTNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[405])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[405])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3x4fvEXT(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix3x4fvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3x4fvEXT(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix3x4fvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4dvEXTNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[406])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[406])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4dvEXT(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix4dvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4dvEXT(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix4dvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4fvEXTNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[407])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[407])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4fvEXT(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix4fvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4fvEXT(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix4fvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4x2dvEXTNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[408])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[408])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4x2dvEXT(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix4x2dvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4x2dvEXT(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix4x2dvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4x2fvEXTNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[409])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[409])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4x2fvEXT(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix4x2fvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4x2fvEXT(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix4x2fvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4x3dvEXTNative(uint program, int location, int count, byte transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[410])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[410])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4x3dvEXT(uint program, int location, int count, byte transpose, double* value)
		{
			ProgramUniformMatrix4x3dvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4x3dvEXT(uint program, int location, int count, byte transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix4x3dvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4x3fvEXTNative(uint program, int location, int count, byte transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[411])(program, location, count, transpose, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[411])(program, location, count, transpose, (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4x3fvEXT(uint program, int location, int count, byte transpose, float* value)
		{
			ProgramUniformMatrix4x3fvEXTNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4x3fvEXT(uint program, int location, int count, byte transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix4x3fvEXTNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProvokingVertexEXTNative(GLVertexProvokingMode mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexProvokingMode, void>)funcTable[412])(mode);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexProvokingMode, void>)funcTable[412])(mode);
			#endif
		}

		public static void ProvokingVertexEXT(GLVertexProvokingMode mode)
		{
			ProvokingVertexEXTNative(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PushClientAttribDefaultEXTNative(GLClientAttribMask mask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLClientAttribMask, void>)funcTable[413])(mask);
			#else
			((delegate* unmanaged[Cdecl]<GLClientAttribMask, void>)funcTable[413])(mask);
			#endif
		}

		public static void PushClientAttribDefaultEXT(GLClientAttribMask mask)
		{
			PushClientAttribDefaultEXTNative(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PushGroupMarkerEXTNative(int length, byte* marker)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, byte*, void>)funcTable[414])(length, marker);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[414])(length, (nint)marker);
			#endif
		}

		public static void PushGroupMarkerEXT(int length, byte* marker)
		{
			PushGroupMarkerEXTNative(length, marker);
		}

		public static void PushGroupMarkerEXT(int length, string marker)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (marker != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(marker);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(marker, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PushGroupMarkerEXTNative(length, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PushGroupMarkerEXT(int length, ReadOnlySpan<byte> marker)
		{
			fixed (byte* pmarker0 = marker)
			{
				PushGroupMarkerEXTNative(length, pmarker0);
			}
		}

		public static void PushGroupMarkerEXT(int length, ref byte marker)
		{
			fixed (byte* pmarker0 = &marker)
			{
				PushGroupMarkerEXTNative(length, pmarker0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterSamplesEXTNative(uint samples, byte fixedsamplelocations)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte, void>)funcTable[415])(samples, fixedsamplelocations);
			#else
			((delegate* unmanaged[Cdecl]<uint, byte, void>)funcTable[415])(samples, fixedsamplelocations);
			#endif
		}

		public static void RasterSamplesEXT(uint samples, byte fixedsamplelocations)
		{
			RasterSamplesEXTNative(samples, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ReleaseKeyedMutexWin32EXTNative(uint memory, ulong key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ulong, byte>)funcTable[416])(memory, key);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, ulong, byte>)funcTable[416])(memory, key);
			#endif
		}

		public static bool ReleaseKeyedMutexWin32EXT(uint memory, ulong key)
		{
			byte ret = ReleaseKeyedMutexWin32EXTNative(memory, key);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RenderbufferStorageEXTNative(GLRenderbufferTarget target, GLInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, GLInternalFormat, int, int, void>)funcTable[417])(target, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, GLInternalFormat, int, int, void>)funcTable[417])(target, internalformat, width, height);
			#endif
		}

		public static void RenderbufferStorageEXT(GLRenderbufferTarget target, GLInternalFormat internalformat, int width, int height)
		{
			RenderbufferStorageEXTNative(target, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RenderbufferStorageMultisampleEXTNative(GLRenderbufferTarget target, int samples, GLInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, int, GLInternalFormat, int, int, void>)funcTable[418])(target, samples, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, int, GLInternalFormat, int, int, void>)funcTable[418])(target, samples, internalformat, width, height);
			#endif
		}

		public static void RenderbufferStorageMultisampleEXT(GLRenderbufferTarget target, int samples, GLInternalFormat internalformat, int width, int height)
		{
			RenderbufferStorageMultisampleEXTNative(target, samples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ResetHistogramEXTNative(GLHistogramTargetEXT target)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, void>)funcTable[419])(target);
			#else
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, void>)funcTable[419])(target);
			#endif
		}

		public static void ResetHistogramEXT(GLHistogramTargetEXT target)
		{
			ResetHistogramEXTNative(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ResetMinmaxEXTNative(GLMinmaxTargetEXT target)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, void>)funcTable[420])(target);
			#else
			((delegate* unmanaged[Cdecl]<GLMinmaxTargetEXT, void>)funcTable[420])(target);
			#endif
		}

		public static void ResetMinmaxEXT(GLMinmaxTargetEXT target)
		{
			ResetMinmaxEXTNative(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SampleMaskEXTNative(float value, byte invert)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, byte, void>)funcTable[421])(value, invert);
			#else
			((delegate* unmanaged[Cdecl]<float, byte, void>)funcTable[421])(value, invert);
			#endif
		}

		public static void SampleMaskEXT(float value, byte invert)
		{
			SampleMaskEXTNative(value, invert);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplePatternEXTNative(GLSamplePatternEXT pattern)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLSamplePatternEXT, void>)funcTable[422])(pattern);
			#else
			((delegate* unmanaged[Cdecl]<GLSamplePatternEXT, void>)funcTable[422])(pattern);
			#endif
		}

		public static void SamplePatternEXT(GLSamplePatternEXT pattern)
		{
			SamplePatternEXTNative(pattern);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3bEXTNative(sbyte red, sbyte green, sbyte blue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)funcTable[423])(red, green, blue);
			#else
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)funcTable[423])(red, green, blue);
			#endif
		}

		public static void SecondaryColor3bEXT(sbyte red, sbyte green, sbyte blue)
		{
			SecondaryColor3bEXTNative(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3bvEXTNative(sbyte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte*, void>)funcTable[424])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[424])((nint)v);
			#endif
		}

		public static void SecondaryColor3bvEXT(sbyte* v)
		{
			SecondaryColor3bvEXTNative(v);
		}

		public static void SecondaryColor3bvEXT(ref sbyte v)
		{
			fixed (sbyte* pv0 = &v)
			{
				SecondaryColor3bvEXTNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3dEXTNative(double red, double green, double blue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[425])(red, green, blue);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[425])(red, green, blue);
			#endif
		}

		public static void SecondaryColor3dEXT(double red, double green, double blue)
		{
			SecondaryColor3dEXTNative(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3dvEXTNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[426])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[426])((nint)v);
			#endif
		}

		public static void SecondaryColor3dvEXT(double* v)
		{
			SecondaryColor3dvEXTNative(v);
		}

		public static void SecondaryColor3dvEXT(ref double v)
		{
			fixed (double* pv0 = &v)
			{
				SecondaryColor3dvEXTNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3fEXTNative(float red, float green, float blue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[427])(red, green, blue);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[427])(red, green, blue);
			#endif
		}

		public static void SecondaryColor3fEXT(float red, float green, float blue)
		{
			SecondaryColor3fEXTNative(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3fvEXTNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[428])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[428])((nint)v);
			#endif
		}

		public static void SecondaryColor3fvEXT(float* v)
		{
			SecondaryColor3fvEXTNative(v);
		}

		public static void SecondaryColor3fvEXT(ref float v)
		{
			fixed (float* pv0 = &v)
			{
				SecondaryColor3fvEXTNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3iEXTNative(int red, int green, int blue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[429])(red, green, blue);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[429])(red, green, blue);
			#endif
		}

		public static void SecondaryColor3iEXT(int red, int green, int blue)
		{
			SecondaryColor3iEXTNative(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3ivEXTNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[430])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[430])((nint)v);
			#endif
		}

		public static void SecondaryColor3ivEXT(int* v)
		{
			SecondaryColor3ivEXTNative(v);
		}

		public static void SecondaryColor3ivEXT(ref int v)
		{
			fixed (int* pv0 = &v)
			{
				SecondaryColor3ivEXTNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3sEXTNative(short red, short green, short blue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[431])(red, green, blue);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[431])(red, green, blue);
			#endif
		}

		public static void SecondaryColor3sEXT(short red, short green, short blue)
		{
			SecondaryColor3sEXTNative(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3svEXTNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[432])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[432])((nint)v);
			#endif
		}

		public static void SecondaryColor3svEXT(short* v)
		{
			SecondaryColor3svEXTNative(v);
		}

		public static void SecondaryColor3svEXT(ref short v)
		{
			fixed (short* pv0 = &v)
			{
				SecondaryColor3svEXTNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3ubEXTNative(byte red, byte green, byte blue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte, byte, byte, void>)funcTable[433])(red, green, blue);
			#else
			((delegate* unmanaged[Cdecl]<byte, byte, byte, void>)funcTable[433])(red, green, blue);
			#endif
		}

		public static void SecondaryColor3ubEXT(byte red, byte green, byte blue)
		{
			SecondaryColor3ubEXTNative(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3ubvEXTNative(byte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)funcTable[434])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[434])((nint)v);
			#endif
		}

		public static void SecondaryColor3ubvEXT(byte* v)
		{
			SecondaryColor3ubvEXTNative(v);
		}

		public static void SecondaryColor3ubvEXT(string v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (v != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(v);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(v, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			SecondaryColor3ubvEXTNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void SecondaryColor3ubvEXT(ReadOnlySpan<byte> v)
		{
			fixed (byte* pv0 = v)
			{
				SecondaryColor3ubvEXTNative(pv0);
			}
		}

		public static void SecondaryColor3ubvEXT(ref byte v)
		{
			fixed (byte* pv0 = &v)
			{
				SecondaryColor3ubvEXTNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3uiEXTNative(uint red, uint green, uint blue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[435])(red, green, blue);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[435])(red, green, blue);
			#endif
		}

		public static void SecondaryColor3uiEXT(uint red, uint green, uint blue)
		{
			SecondaryColor3uiEXTNative(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3uivEXTNative(uint* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint*, void>)funcTable[436])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[436])((nint)v);
			#endif
		}

		public static void SecondaryColor3uivEXT(uint* v)
		{
			SecondaryColor3uivEXTNative(v);
		}

		public static void SecondaryColor3uivEXT(ref uint v)
		{
			fixed (uint* pv0 = &v)
			{
				SecondaryColor3uivEXTNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3usEXTNative(ushort red, ushort green, ushort blue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, void>)funcTable[437])(red, green, blue);
			#else
			((delegate* unmanaged[Cdecl]<ushort, ushort, ushort, void>)funcTable[437])(red, green, blue);
			#endif
		}

		public static void SecondaryColor3usEXT(ushort red, ushort green, ushort blue)
		{
			SecondaryColor3usEXTNative(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3usvEXTNative(ushort* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ushort*, void>)funcTable[438])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[438])((nint)v);
			#endif
		}

		public static void SecondaryColor3usvEXT(ushort* v)
		{
			SecondaryColor3usvEXTNative(v);
		}

		public static void SecondaryColor3usvEXT(ref ushort v)
		{
			fixed (ushort* pv0 = &v)
			{
				SecondaryColor3usvEXTNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColorPointerEXTNative(int size, GLColorPointerType type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, GLColorPointerType, int, void*, void>)funcTable[439])(size, type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, GLColorPointerType, int, nint, void>)funcTable[439])(size, type, stride, (nint)pointer);
			#endif
		}

		public static void SecondaryColorPointerEXT(int size, GLColorPointerType type, int stride, void* pointer)
		{
			SecondaryColorPointerEXTNative(size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SemaphoreParameterui64vEXTNative(uint semaphore, GLSemaphoreParameterName pname, ulong* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSemaphoreParameterName, ulong*, void>)funcTable[440])(semaphore, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSemaphoreParameterName, nint, void>)funcTable[440])(semaphore, pname, (nint)@params);
			#endif
		}

		public static void SemaphoreParameterui64vEXT(uint semaphore, GLSemaphoreParameterName pname, ulong* @params)
		{
			SemaphoreParameterui64vEXTNative(semaphore, pname, @params);
		}

		public static void SemaphoreParameterui64vEXT(uint semaphore, GLSemaphoreParameterName pname, ref ulong @params)
		{
			fixed (ulong* pparams0 = &@params)
			{
				SemaphoreParameterui64vEXTNative(semaphore, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SeparableFilter2DEXTNative(GLSeparableTargetEXT target, GLInternalFormat internalformat, int width, int height, GLPixelFormat format, GLPixelType type, void* row, void* column)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLSeparableTargetEXT, GLInternalFormat, int, int, GLPixelFormat, GLPixelType, void*, void*, void>)funcTable[441])(target, internalformat, width, height, format, type, row, column);
			#else
			((delegate* unmanaged[Cdecl]<GLSeparableTargetEXT, GLInternalFormat, int, int, GLPixelFormat, GLPixelType, nint, nint, void>)funcTable[441])(target, internalformat, width, height, format, type, (nint)row, (nint)column);
			#endif
		}

		public static void SeparableFilter2DEXT(GLSeparableTargetEXT target, GLInternalFormat internalformat, int width, int height, GLPixelFormat format, GLPixelType type, void* row, void* column)
		{
			SeparableFilter2DEXTNative(target, internalformat, width, height, format, type, row, column);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetInvariantEXTNative(uint id, GLScalarType type, void* addr)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLScalarType, void*, void>)funcTable[442])(id, type, addr);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLScalarType, nint, void>)funcTable[442])(id, type, (nint)addr);
			#endif
		}

		public static void SetInvariantEXT(uint id, GLScalarType type, void* addr)
		{
			SetInvariantEXTNative(id, type, addr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetLocalConstantEXTNative(uint id, GLScalarType type, void* addr)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLScalarType, void*, void>)funcTable[443])(id, type, addr);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLScalarType, nint, void>)funcTable[443])(id, type, (nint)addr);
			#endif
		}

		public static void SetLocalConstantEXT(uint id, GLScalarType type, void* addr)
		{
			SetLocalConstantEXTNative(id, type, addr);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ShaderOp1EXTNative(GLVertexShaderOpEXT op, uint res, uint arg1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexShaderOpEXT, uint, uint, void>)funcTable[444])(op, res, arg1);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexShaderOpEXT, uint, uint, void>)funcTable[444])(op, res, arg1);
			#endif
		}

		public static void ShaderOp1EXT(GLVertexShaderOpEXT op, uint res, uint arg1)
		{
			ShaderOp1EXTNative(op, res, arg1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ShaderOp2EXTNative(GLVertexShaderOpEXT op, uint res, uint arg1, uint arg2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexShaderOpEXT, uint, uint, uint, void>)funcTable[445])(op, res, arg1, arg2);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexShaderOpEXT, uint, uint, uint, void>)funcTable[445])(op, res, arg1, arg2);
			#endif
		}

		public static void ShaderOp2EXT(GLVertexShaderOpEXT op, uint res, uint arg1, uint arg2)
		{
			ShaderOp2EXTNative(op, res, arg1, arg2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ShaderOp3EXTNative(GLVertexShaderOpEXT op, uint res, uint arg1, uint arg2, uint arg3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexShaderOpEXT, uint, uint, uint, uint, void>)funcTable[446])(op, res, arg1, arg2, arg3);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexShaderOpEXT, uint, uint, uint, uint, void>)funcTable[446])(op, res, arg1, arg2, arg3);
			#endif
		}

		public static void ShaderOp3EXT(GLVertexShaderOpEXT op, uint res, uint arg1, uint arg2, uint arg3)
		{
			ShaderOp3EXTNative(op, res, arg1, arg2, arg3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SignalSemaphoreEXTNative(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, GLTextureLayout dstLayouts)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint*, uint, uint*, GLTextureLayout, void>)funcTable[447])(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, uint, nint, GLTextureLayout, void>)funcTable[447])(semaphore, numBufferBarriers, (nint)buffers, numTextureBarriers, (nint)textures, dstLayouts);
			#endif
		}

		public static void SignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, uint* textures, GLTextureLayout dstLayouts)
		{
			SignalSemaphoreEXTNative(semaphore, numBufferBarriers, buffers, numTextureBarriers, textures, dstLayouts);
		}

		public static void SignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, ref uint buffers, uint numTextureBarriers, uint* textures, GLTextureLayout dstLayouts)
		{
			fixed (uint* pbuffers0 = &buffers)
			{
				SignalSemaphoreEXTNative(semaphore, numBufferBarriers, pbuffers0, numTextureBarriers, textures, dstLayouts);
			}
		}

		public static void SignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, uint* buffers, uint numTextureBarriers, ref uint textures, GLTextureLayout dstLayouts)
		{
			fixed (uint* ptextures0 = &textures)
			{
				SignalSemaphoreEXTNative(semaphore, numBufferBarriers, buffers, numTextureBarriers, ptextures0, dstLayouts);
			}
		}

		public static void SignalSemaphoreEXT(uint semaphore, uint numBufferBarriers, ref uint buffers, uint numTextureBarriers, ref uint textures, GLTextureLayout dstLayouts)
		{
			fixed (uint* pbuffers0 = &buffers)
			{
				fixed (uint* ptextures1 = &textures)
				{
					SignalSemaphoreEXTNative(semaphore, numBufferBarriers, pbuffers0, numTextureBarriers, ptextures1, dstLayouts);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void StencilClearTagEXTNative(int stencilTagBits, uint stencilClearTag)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[448])(stencilTagBits, stencilClearTag);
			#else
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[448])(stencilTagBits, stencilClearTag);
			#endif
		}

		public static void StencilClearTagEXT(int stencilTagBits, uint stencilClearTag)
		{
			StencilClearTagEXTNative(stencilTagBits, stencilClearTag);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SwizzleEXTNative(uint res, uint input, GLVertexShaderCoordOutEXT outX, GLVertexShaderCoordOutEXT outY, GLVertexShaderCoordOutEXT outZ, GLVertexShaderCoordOutEXT outW)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, GLVertexShaderCoordOutEXT, GLVertexShaderCoordOutEXT, GLVertexShaderCoordOutEXT, GLVertexShaderCoordOutEXT, void>)funcTable[449])(res, input, outX, outY, outZ, outW);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, GLVertexShaderCoordOutEXT, GLVertexShaderCoordOutEXT, GLVertexShaderCoordOutEXT, GLVertexShaderCoordOutEXT, void>)funcTable[449])(res, input, outX, outY, outZ, outW);
			#endif
		}

		public static void SwizzleEXT(uint res, uint input, GLVertexShaderCoordOutEXT outX, GLVertexShaderCoordOutEXT outY, GLVertexShaderCoordOutEXT outZ, GLVertexShaderCoordOutEXT outW)
		{
			SwizzleEXTNative(res, input, outX, outY, outZ, outW);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Tangent3bEXTNative(sbyte tx, sbyte ty, sbyte tz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)funcTable[450])(tx, ty, tz);
			#else
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)funcTable[450])(tx, ty, tz);
			#endif
		}

		public static void Tangent3bEXT(sbyte tx, sbyte ty, sbyte tz)
		{
			Tangent3bEXTNative(tx, ty, tz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Tangent3bvEXTNative(sbyte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte*, void>)funcTable[451])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[451])((nint)v);
			#endif
		}

		public static void Tangent3bvEXT(sbyte* v)
		{
			Tangent3bvEXTNative(v);
		}

		public static void Tangent3bvEXT(ref sbyte v)
		{
			fixed (sbyte* pv0 = &v)
			{
				Tangent3bvEXTNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Tangent3dEXTNative(double tx, double ty, double tz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[452])(tx, ty, tz);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[452])(tx, ty, tz);
			#endif
		}

		public static void Tangent3dEXT(double tx, double ty, double tz)
		{
			Tangent3dEXTNative(tx, ty, tz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Tangent3dvEXTNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[453])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[453])((nint)v);
			#endif
		}

		public static void Tangent3dvEXT(double* v)
		{
			Tangent3dvEXTNative(v);
		}

		public static void Tangent3dvEXT(ref double v)
		{
			fixed (double* pv0 = &v)
			{
				Tangent3dvEXTNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Tangent3fEXTNative(float tx, float ty, float tz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[454])(tx, ty, tz);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[454])(tx, ty, tz);
			#endif
		}

		public static void Tangent3fEXT(float tx, float ty, float tz)
		{
			Tangent3fEXTNative(tx, ty, tz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Tangent3fvEXTNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[455])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[455])((nint)v);
			#endif
		}

		public static void Tangent3fvEXT(float* v)
		{
			Tangent3fvEXTNative(v);
		}

		public static void Tangent3fvEXT(ref float v)
		{
			fixed (float* pv0 = &v)
			{
				Tangent3fvEXTNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Tangent3iEXTNative(int tx, int ty, int tz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[456])(tx, ty, tz);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[456])(tx, ty, tz);
			#endif
		}

		public static void Tangent3iEXT(int tx, int ty, int tz)
		{
			Tangent3iEXTNative(tx, ty, tz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Tangent3ivEXTNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[457])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[457])((nint)v);
			#endif
		}

		public static void Tangent3ivEXT(int* v)
		{
			Tangent3ivEXTNative(v);
		}

		public static void Tangent3ivEXT(ref int v)
		{
			fixed (int* pv0 = &v)
			{
				Tangent3ivEXTNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Tangent3sEXTNative(short tx, short ty, short tz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[458])(tx, ty, tz);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[458])(tx, ty, tz);
			#endif
		}

		public static void Tangent3sEXT(short tx, short ty, short tz)
		{
			Tangent3sEXTNative(tx, ty, tz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Tangent3svEXTNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[459])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[459])((nint)v);
			#endif
		}

		public static void Tangent3svEXT(short* v)
		{
			Tangent3svEXTNative(v);
		}

		public static void Tangent3svEXT(ref short v)
		{
			fixed (short* pv0 = &v)
			{
				Tangent3svEXTNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TangentPointerEXTNative(GLTangentPointerTypeEXT type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTangentPointerTypeEXT, int, void*, void>)funcTable[460])(type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<GLTangentPointerTypeEXT, int, nint, void>)funcTable[460])(type, stride, (nint)pointer);
			#endif
		}

		public static void TangentPointerEXT(GLTangentPointerTypeEXT type, int stride, void* pointer)
		{
			TangentPointerEXTNative(type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexBufferEXTNative(GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, uint, void>)funcTable[461])(target, internalformat, buffer);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, uint, void>)funcTable[461])(target, internalformat, buffer);
			#endif
		}

		public static void TexBufferEXT(GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer)
		{
			TexBufferEXTNative(target, internalformat, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoordPointerEXTNative(int size, GLTexCoordPointerType type, int stride, int count, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, GLTexCoordPointerType, int, int, void*, void>)funcTable[462])(size, type, stride, count, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, GLTexCoordPointerType, int, int, nint, void>)funcTable[462])(size, type, stride, count, (nint)pointer);
			#endif
		}

		public static void TexCoordPointerEXT(int size, GLTexCoordPointerType type, int stride, int count, void* pointer)
		{
			TexCoordPointerEXTNative(size, type, stride, count, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexImage3DEXTNative(GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int height, int depth, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLInternalFormat, int, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[463])(target, level, internalformat, width, height, depth, border, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLInternalFormat, int, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[463])(target, level, internalformat, width, height, depth, border, format, type, (nint)pixels);
			#endif
		}

		public static void TexImage3DEXT(GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int height, int depth, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TexImage3DEXTNative(target, level, internalformat, width, height, depth, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexParameterIivEXTNative(GLTextureTarget target, GLTextureParameterName pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLTextureParameterName, int*, void>)funcTable[464])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLTextureParameterName, nint, void>)funcTable[464])(target, pname, (nint)@params);
			#endif
		}

		public static void TexParameterIivEXT(GLTextureTarget target, GLTextureParameterName pname, int* @params)
		{
			TexParameterIivEXTNative(target, pname, @params);
		}

		public static void TexParameterIivEXT(GLTextureTarget target, GLTextureParameterName pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				TexParameterIivEXTNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexParameterIuivEXTNative(GLTextureTarget target, GLTextureParameterName pname, uint* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLTextureParameterName, uint*, void>)funcTable[465])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLTextureParameterName, nint, void>)funcTable[465])(target, pname, (nint)@params);
			#endif
		}

		public static void TexParameterIuivEXT(GLTextureTarget target, GLTextureParameterName pname, uint* @params)
		{
			TexParameterIuivEXTNative(target, pname, @params);
		}

		public static void TexParameterIuivEXT(GLTextureTarget target, GLTextureParameterName pname, ref uint @params)
		{
			fixed (uint* pparams0 = &@params)
			{
				TexParameterIuivEXTNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorage1DEXTNative(GLTextureTarget target, int levels, GLSizedInternalFormat internalformat, int width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, void>)funcTable[466])(target, levels, internalformat, width);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, void>)funcTable[466])(target, levels, internalformat, width);
			#endif
		}

		public static void TexStorage1DEXT(GLTextureTarget target, int levels, GLSizedInternalFormat internalformat, int width)
		{
			TexStorage1DEXTNative(target, levels, internalformat, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorage2DEXTNative(GLTextureTarget target, int levels, GLSizedInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, void>)funcTable[467])(target, levels, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, void>)funcTable[467])(target, levels, internalformat, width, height);
			#endif
		}

		public static void TexStorage2DEXT(GLTextureTarget target, int levels, GLSizedInternalFormat internalformat, int width, int height)
		{
			TexStorage2DEXTNative(target, levels, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorage3DEXTNative(GLTextureTarget target, int levels, GLSizedInternalFormat internalformat, int width, int height, int depth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, int, void>)funcTable[468])(target, levels, internalformat, width, height, depth);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, int, void>)funcTable[468])(target, levels, internalformat, width, height, depth);
			#endif
		}

		public static void TexStorage3DEXT(GLTextureTarget target, int levels, GLSizedInternalFormat internalformat, int width, int height, int depth)
		{
			TexStorage3DEXTNative(target, levels, internalformat, width, height, depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorageMem1DEXTNative(GLTextureTarget target, int levels, GLSizedInternalFormat internalFormat, int width, uint memory, ulong offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, uint, ulong, void>)funcTable[469])(target, levels, internalFormat, width, memory, offset);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, uint, ulong, void>)funcTable[469])(target, levels, internalFormat, width, memory, offset);
			#endif
		}

		public static void TexStorageMem1DEXT(GLTextureTarget target, int levels, GLSizedInternalFormat internalFormat, int width, uint memory, ulong offset)
		{
			TexStorageMem1DEXTNative(target, levels, internalFormat, width, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorageMem2DEXTNative(GLTextureTarget target, int levels, GLSizedInternalFormat internalFormat, int width, int height, uint memory, ulong offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, uint, ulong, void>)funcTable[470])(target, levels, internalFormat, width, height, memory, offset);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, uint, ulong, void>)funcTable[470])(target, levels, internalFormat, width, height, memory, offset);
			#endif
		}

		public static void TexStorageMem2DEXT(GLTextureTarget target, int levels, GLSizedInternalFormat internalFormat, int width, int height, uint memory, ulong offset)
		{
			TexStorageMem2DEXTNative(target, levels, internalFormat, width, height, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorageMem2DMultisampleEXTNative(GLTextureTarget target, int samples, GLSizedInternalFormat internalFormat, int width, int height, byte fixedSampleLocations, uint memory, ulong offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, byte, uint, ulong, void>)funcTable[471])(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, byte, uint, ulong, void>)funcTable[471])(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
			#endif
		}

		public static void TexStorageMem2DMultisampleEXT(GLTextureTarget target, int samples, GLSizedInternalFormat internalFormat, int width, int height, byte fixedSampleLocations, uint memory, ulong offset)
		{
			TexStorageMem2DMultisampleEXTNative(target, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorageMem3DEXTNative(GLTextureTarget target, int levels, GLSizedInternalFormat internalFormat, int width, int height, int depth, uint memory, ulong offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, int, uint, ulong, void>)funcTable[472])(target, levels, internalFormat, width, height, depth, memory, offset);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, int, uint, ulong, void>)funcTable[472])(target, levels, internalFormat, width, height, depth, memory, offset);
			#endif
		}

		public static void TexStorageMem3DEXT(GLTextureTarget target, int levels, GLSizedInternalFormat internalFormat, int width, int height, int depth, uint memory, ulong offset)
		{
			TexStorageMem3DEXTNative(target, levels, internalFormat, width, height, depth, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorageMem3DMultisampleEXTNative(GLTextureTarget target, int samples, GLSizedInternalFormat internalFormat, int width, int height, int depth, byte fixedSampleLocations, uint memory, ulong offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, int, byte, uint, ulong, void>)funcTable[473])(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, int, byte, uint, ulong, void>)funcTable[473])(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
			#endif
		}

		public static void TexStorageMem3DMultisampleEXT(GLTextureTarget target, int samples, GLSizedInternalFormat internalFormat, int width, int height, int depth, byte fixedSampleLocations, uint memory, ulong offset)
		{
			TexStorageMem3DMultisampleEXTNative(target, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexSubImage1DEXTNative(GLTextureTarget target, int level, int xoffset, int width, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[474])(target, level, xoffset, width, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[474])(target, level, xoffset, width, format, type, (nint)pixels);
			#endif
		}

		public static void TexSubImage1DEXT(GLTextureTarget target, int level, int xoffset, int width, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TexSubImage1DEXTNative(target, level, xoffset, width, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexSubImage2DEXTNative(GLTextureTarget target, int level, int xoffset, int yoffset, int width, int height, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, int, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[475])(target, level, xoffset, yoffset, width, height, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, int, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[475])(target, level, xoffset, yoffset, width, height, format, type, (nint)pixels);
			#endif
		}

		public static void TexSubImage2DEXT(GLTextureTarget target, int level, int xoffset, int yoffset, int width, int height, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TexSubImage2DEXTNative(target, level, xoffset, yoffset, width, height, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexSubImage3DEXTNative(GLTextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, int, int, int, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[476])(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, int, int, int, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[476])(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (nint)pixels);
			#endif
		}

		public static void TexSubImage3DEXT(GLTextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TexSubImage3DEXTNative(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureBufferEXTNative(uint texture, GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLSizedInternalFormat, uint, void>)funcTable[477])(texture, target, internalformat, buffer);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLSizedInternalFormat, uint, void>)funcTable[477])(texture, target, internalformat, buffer);
			#endif
		}

		public static void TextureBufferEXT(uint texture, GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer)
		{
			TextureBufferEXTNative(texture, target, internalformat, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureBufferRangeEXTNative(uint texture, GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer, nint offset, nint size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLSizedInternalFormat, uint, nint, nint, void>)funcTable[478])(texture, target, internalformat, buffer, offset, size);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLSizedInternalFormat, uint, nint, nint, void>)funcTable[478])(texture, target, internalformat, buffer, offset, size);
			#endif
		}

		public static void TextureBufferRangeEXT(uint texture, GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer, nint offset, nint size)
		{
			TextureBufferRangeEXTNative(texture, target, internalformat, buffer, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureImage1DEXTNative(uint texture, GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, int, GLInternalFormat, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[479])(texture, target, level, internalformat, width, border, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, int, GLInternalFormat, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[479])(texture, target, level, internalformat, width, border, format, type, (nint)pixels);
			#endif
		}

		public static void TextureImage1DEXT(uint texture, GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TextureImage1DEXTNative(texture, target, level, internalformat, width, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureImage2DEXTNative(uint texture, GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int height, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, int, GLInternalFormat, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[480])(texture, target, level, internalformat, width, height, border, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, int, GLInternalFormat, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[480])(texture, target, level, internalformat, width, height, border, format, type, (nint)pixels);
			#endif
		}

		public static void TextureImage2DEXT(uint texture, GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int height, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TextureImage2DEXTNative(texture, target, level, internalformat, width, height, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureImage3DEXTNative(uint texture, GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int height, int depth, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, int, GLInternalFormat, int, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[481])(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, int, GLInternalFormat, int, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[481])(texture, target, level, internalformat, width, height, depth, border, format, type, (nint)pixels);
			#endif
		}

		public static void TextureImage3DEXT(uint texture, GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int height, int depth, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TextureImage3DEXTNative(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureLightEXTNative(GLLightTexturePNameEXT pname)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLLightTexturePNameEXT, void>)funcTable[482])(pname);
			#else
			((delegate* unmanaged[Cdecl]<GLLightTexturePNameEXT, void>)funcTable[482])(pname);
			#endif
		}

		public static void TextureLightEXT(GLLightTexturePNameEXT pname)
		{
			TextureLightEXTNative(pname);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureMaterialEXTNative(GLTriangleFace face, GLMaterialParameter mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLMaterialParameter, void>)funcTable[483])(face, mode);
			#else
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLMaterialParameter, void>)funcTable[483])(face, mode);
			#endif
		}

		public static void TextureMaterialEXT(GLTriangleFace face, GLMaterialParameter mode)
		{
			TextureMaterialEXTNative(face, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureNormalEXTNative(GLTextureNormalModeEXT mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureNormalModeEXT, void>)funcTable[484])(mode);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureNormalModeEXT, void>)funcTable[484])(mode);
			#endif
		}

		public static void TextureNormalEXT(GLTextureNormalModeEXT mode)
		{
			TextureNormalEXTNative(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexturePageCommitmentEXTNative(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, byte, void>)funcTable[485])(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, int, int, byte, void>)funcTable[485])(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
			#endif
		}

		public static void TexturePageCommitmentEXT(uint texture, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, byte commit)
		{
			TexturePageCommitmentEXTNative(texture, level, xoffset, yoffset, zoffset, width, height, depth, commit);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureParameterIivEXTNative(uint texture, GLTextureTarget target, GLTextureParameterName pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLTextureParameterName, int*, void>)funcTable[486])(texture, target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLTextureParameterName, nint, void>)funcTable[486])(texture, target, pname, (nint)@params);
			#endif
		}

		public static void TextureParameterIivEXT(uint texture, GLTextureTarget target, GLTextureParameterName pname, int* @params)
		{
			TextureParameterIivEXTNative(texture, target, pname, @params);
		}

		public static void TextureParameterIivEXT(uint texture, GLTextureTarget target, GLTextureParameterName pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				TextureParameterIivEXTNative(texture, target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureParameterIuivEXTNative(uint texture, GLTextureTarget target, GLTextureParameterName pname, uint* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLTextureParameterName, uint*, void>)funcTable[487])(texture, target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLTextureParameterName, nint, void>)funcTable[487])(texture, target, pname, (nint)@params);
			#endif
		}

		public static void TextureParameterIuivEXT(uint texture, GLTextureTarget target, GLTextureParameterName pname, uint* @params)
		{
			TextureParameterIuivEXTNative(texture, target, pname, @params);
		}

		public static void TextureParameterIuivEXT(uint texture, GLTextureTarget target, GLTextureParameterName pname, ref uint @params)
		{
			fixed (uint* pparams0 = &@params)
			{
				TextureParameterIuivEXTNative(texture, target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureParameterfEXTNative(uint texture, GLTextureTarget target, GLTextureParameterName pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLTextureParameterName, float, void>)funcTable[488])(texture, target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLTextureParameterName, float, void>)funcTable[488])(texture, target, pname, param);
			#endif
		}

		public static void TextureParameterfEXT(uint texture, GLTextureTarget target, GLTextureParameterName pname, float param)
		{
			TextureParameterfEXTNative(texture, target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureParameterfvEXTNative(uint texture, GLTextureTarget target, GLTextureParameterName pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLTextureParameterName, float*, void>)funcTable[489])(texture, target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLTextureParameterName, nint, void>)funcTable[489])(texture, target, pname, (nint)@params);
			#endif
		}

		public static void TextureParameterfvEXT(uint texture, GLTextureTarget target, GLTextureParameterName pname, float* @params)
		{
			TextureParameterfvEXTNative(texture, target, pname, @params);
		}

		public static void TextureParameterfvEXT(uint texture, GLTextureTarget target, GLTextureParameterName pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				TextureParameterfvEXTNative(texture, target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureParameteriEXTNative(uint texture, GLTextureTarget target, GLTextureParameterName pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLTextureParameterName, int, void>)funcTable[490])(texture, target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLTextureParameterName, int, void>)funcTable[490])(texture, target, pname, param);
			#endif
		}

		public static void TextureParameteriEXT(uint texture, GLTextureTarget target, GLTextureParameterName pname, int param)
		{
			TextureParameteriEXTNative(texture, target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureParameterivEXTNative(uint texture, GLTextureTarget target, GLTextureParameterName pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLTextureParameterName, int*, void>)funcTable[491])(texture, target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, GLTextureParameterName, nint, void>)funcTable[491])(texture, target, pname, (nint)@params);
			#endif
		}

		public static void TextureParameterivEXT(uint texture, GLTextureTarget target, GLTextureParameterName pname, int* @params)
		{
			TextureParameterivEXTNative(texture, target, pname, @params);
		}

		public static void TextureParameterivEXT(uint texture, GLTextureTarget target, GLTextureParameterName pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				TextureParameterivEXTNative(texture, target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureRenderbufferEXTNative(uint texture, GLTextureTarget target, uint renderbuffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, uint, void>)funcTable[492])(texture, target, renderbuffer);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, uint, void>)funcTable[492])(texture, target, renderbuffer);
			#endif
		}

		public static void TextureRenderbufferEXT(uint texture, GLTextureTarget target, uint renderbuffer)
		{
			TextureRenderbufferEXTNative(texture, target, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorage1DEXTNative(uint texture, GLEnum target, int levels, GLSizedInternalFormat internalformat, int width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, int, GLSizedInternalFormat, int, void>)funcTable[493])(texture, target, levels, internalformat, width);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, int, GLSizedInternalFormat, int, void>)funcTable[493])(texture, target, levels, internalformat, width);
			#endif
		}

		public static void TextureStorage1DEXT(uint texture, GLEnum target, int levels, GLSizedInternalFormat internalformat, int width)
		{
			TextureStorage1DEXTNative(texture, target, levels, internalformat, width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorage2DEXTNative(uint texture, GLEnum target, int levels, GLSizedInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, int, GLSizedInternalFormat, int, int, void>)funcTable[494])(texture, target, levels, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, int, GLSizedInternalFormat, int, int, void>)funcTable[494])(texture, target, levels, internalformat, width, height);
			#endif
		}

		public static void TextureStorage2DEXT(uint texture, GLEnum target, int levels, GLSizedInternalFormat internalformat, int width, int height)
		{
			TextureStorage2DEXTNative(texture, target, levels, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorage2DMultisampleEXTNative(uint texture, GLTextureTarget target, int samples, GLSizedInternalFormat internalformat, int width, int height, byte fixedsamplelocations)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, int, GLSizedInternalFormat, int, int, byte, void>)funcTable[495])(texture, target, samples, internalformat, width, height, fixedsamplelocations);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, int, GLSizedInternalFormat, int, int, byte, void>)funcTable[495])(texture, target, samples, internalformat, width, height, fixedsamplelocations);
			#endif
		}

		public static void TextureStorage2DMultisampleEXT(uint texture, GLTextureTarget target, int samples, GLSizedInternalFormat internalformat, int width, int height, byte fixedsamplelocations)
		{
			TextureStorage2DMultisampleEXTNative(texture, target, samples, internalformat, width, height, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorage3DEXTNative(uint texture, GLEnum target, int levels, GLSizedInternalFormat internalformat, int width, int height, int depth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, int, GLSizedInternalFormat, int, int, int, void>)funcTable[496])(texture, target, levels, internalformat, width, height, depth);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, int, GLSizedInternalFormat, int, int, int, void>)funcTable[496])(texture, target, levels, internalformat, width, height, depth);
			#endif
		}

		public static void TextureStorage3DEXT(uint texture, GLEnum target, int levels, GLSizedInternalFormat internalformat, int width, int height, int depth)
		{
			TextureStorage3DEXTNative(texture, target, levels, internalformat, width, height, depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorage3DMultisampleEXTNative(uint texture, GLEnum target, int samples, GLSizedInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, int, GLSizedInternalFormat, int, int, int, byte, void>)funcTable[497])(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, int, GLSizedInternalFormat, int, int, int, byte, void>)funcTable[497])(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
			#endif
		}

		public static void TextureStorage3DMultisampleEXT(uint texture, GLEnum target, int samples, GLSizedInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
		{
			TextureStorage3DMultisampleEXTNative(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorageMem1DEXTNative(uint texture, int levels, GLSizedInternalFormat internalFormat, int width, uint memory, ulong offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, uint, ulong, void>)funcTable[498])(texture, levels, internalFormat, width, memory, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, uint, ulong, void>)funcTable[498])(texture, levels, internalFormat, width, memory, offset);
			#endif
		}

		public static void TextureStorageMem1DEXT(uint texture, int levels, GLSizedInternalFormat internalFormat, int width, uint memory, ulong offset)
		{
			TextureStorageMem1DEXTNative(texture, levels, internalFormat, width, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorageMem2DEXTNative(uint texture, int levels, GLSizedInternalFormat internalFormat, int width, int height, uint memory, ulong offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, uint, ulong, void>)funcTable[499])(texture, levels, internalFormat, width, height, memory, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, uint, ulong, void>)funcTable[499])(texture, levels, internalFormat, width, height, memory, offset);
			#endif
		}

		public static void TextureStorageMem2DEXT(uint texture, int levels, GLSizedInternalFormat internalFormat, int width, int height, uint memory, ulong offset)
		{
			TextureStorageMem2DEXTNative(texture, levels, internalFormat, width, height, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorageMem2DMultisampleEXTNative(uint texture, int samples, GLSizedInternalFormat internalFormat, int width, int height, byte fixedSampleLocations, uint memory, ulong offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, byte, uint, ulong, void>)funcTable[500])(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, byte, uint, ulong, void>)funcTable[500])(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
			#endif
		}

		public static void TextureStorageMem2DMultisampleEXT(uint texture, int samples, GLSizedInternalFormat internalFormat, int width, int height, byte fixedSampleLocations, uint memory, ulong offset)
		{
			TextureStorageMem2DMultisampleEXTNative(texture, samples, internalFormat, width, height, fixedSampleLocations, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorageMem3DEXTNative(uint texture, int levels, GLSizedInternalFormat internalFormat, int width, int height, int depth, uint memory, ulong offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, int, uint, ulong, void>)funcTable[501])(texture, levels, internalFormat, width, height, depth, memory, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, int, uint, ulong, void>)funcTable[501])(texture, levels, internalFormat, width, height, depth, memory, offset);
			#endif
		}

		public static void TextureStorageMem3DEXT(uint texture, int levels, GLSizedInternalFormat internalFormat, int width, int height, int depth, uint memory, ulong offset)
		{
			TextureStorageMem3DEXTNative(texture, levels, internalFormat, width, height, depth, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorageMem3DMultisampleEXTNative(uint texture, int samples, GLSizedInternalFormat internalFormat, int width, int height, int depth, byte fixedSampleLocations, uint memory, ulong offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, int, byte, uint, ulong, void>)funcTable[502])(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLSizedInternalFormat, int, int, int, byte, uint, ulong, void>)funcTable[502])(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
			#endif
		}

		public static void TextureStorageMem3DMultisampleEXT(uint texture, int samples, GLSizedInternalFormat internalFormat, int width, int height, int depth, byte fixedSampleLocations, uint memory, ulong offset)
		{
			TextureStorageMem3DMultisampleEXTNative(texture, samples, internalFormat, width, height, depth, fixedSampleLocations, memory, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureSubImage1DEXTNative(uint texture, GLTextureTarget target, int level, int xoffset, int width, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[503])(texture, target, level, xoffset, width, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[503])(texture, target, level, xoffset, width, format, type, (nint)pixels);
			#endif
		}

		public static void TextureSubImage1DEXT(uint texture, GLTextureTarget target, int level, int xoffset, int width, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TextureSubImage1DEXTNative(texture, target, level, xoffset, width, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureSubImage2DEXTNative(uint texture, GLTextureTarget target, int level, int xoffset, int yoffset, int width, int height, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, int, int, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[504])(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, int, int, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[504])(texture, target, level, xoffset, yoffset, width, height, format, type, (nint)pixels);
			#endif
		}

		public static void TextureSubImage2DEXT(uint texture, GLTextureTarget target, int level, int xoffset, int yoffset, int width, int height, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TextureSubImage2DEXTNative(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureSubImage3DEXTNative(uint texture, GLTextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, int, int, int, int, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[505])(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, int, int, int, int, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[505])(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (nint)pixels);
			#endif
		}

		public static void TextureSubImage3DEXT(uint texture, GLTextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TextureSubImage3DEXTNative(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TransformFeedbackVaryingsEXTNative(uint program, int count, byte** varyings, GLTransformFeedbackBufferMode bufferMode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, byte**, GLTransformFeedbackBufferMode, void>)funcTable[506])(program, count, varyings, bufferMode);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, GLTransformFeedbackBufferMode, void>)funcTable[506])(program, count, (nint)varyings, bufferMode);
			#endif
		}

		public static void TransformFeedbackVaryingsEXT(uint program, int count, byte** varyings, GLTransformFeedbackBufferMode bufferMode)
		{
			TransformFeedbackVaryingsEXTNative(program, count, varyings, bufferMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1uiEXTNative(int location, uint v0)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[507])(location, v0);
			#else
			((delegate* unmanaged[Cdecl]<int, uint, void>)funcTable[507])(location, v0);
			#endif
		}

		public static void Uniform1uiEXT(int location, uint v0)
		{
			Uniform1uiEXTNative(location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1uivEXTNative(int location, int count, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, uint*, void>)funcTable[508])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[508])(location, count, (nint)value);
			#endif
		}
	}
}
