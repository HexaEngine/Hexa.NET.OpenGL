// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.EXT
{
	public static unsafe partial class GLEXTVertexAttrib64bit
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribLdvEXTNative(uint index, GLVertexAttribEnum pname, double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, double*, void>)funcTable[0])(index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, nint, void>)funcTable[0])(index, pname, (nint)@params);
			#endif
		}

		public static void GetVertexAttribLdvEXT(uint index, GLVertexAttribEnum pname, double* @params)
		{
			GetVertexAttribLdvEXTNative(index, pname, @params);
		}

		public static void GetVertexAttribLdvEXT(uint index, GLVertexAttribEnum pname, ref double @params)
		{
			fixed (double* pparams0 = &@params)
			{
				GetVertexAttribLdvEXTNative(index, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL1dEXTNative(uint index, double x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[1])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[1])(index, x);
			#endif
		}

		public static void VertexAttribL1dEXT(uint index, double x)
		{
			VertexAttribL1dEXTNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL1dvEXTNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[2])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[2])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL1dvEXT(uint index, double* v)
		{
			VertexAttribL1dvEXTNative(index, v);
		}

		public static void VertexAttribL1dvEXT(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribL1dvEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL2dEXTNative(uint index, double x, double y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[3])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[3])(index, x, y);
			#endif
		}

		public static void VertexAttribL2dEXT(uint index, double x, double y)
		{
			VertexAttribL2dEXTNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL2dvEXTNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[4])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[4])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL2dvEXT(uint index, double* v)
		{
			VertexAttribL2dvEXTNative(index, v);
		}

		public static void VertexAttribL2dvEXT(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribL2dvEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL3dEXTNative(uint index, double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[5])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[5])(index, x, y, z);
			#endif
		}

		public static void VertexAttribL3dEXT(uint index, double x, double y, double z)
		{
			VertexAttribL3dEXTNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL3dvEXTNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[6])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[6])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL3dvEXT(uint index, double* v)
		{
			VertexAttribL3dvEXTNative(index, v);
		}

		public static void VertexAttribL3dvEXT(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribL3dvEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL4dEXTNative(uint index, double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[7])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[7])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttribL4dEXT(uint index, double x, double y, double z, double w)
		{
			VertexAttribL4dEXTNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL4dvEXTNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[8])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[8])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL4dvEXT(uint index, double* v)
		{
			VertexAttribL4dvEXTNative(index, v);
		}

		public static void VertexAttribL4dvEXT(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribL4dvEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribLPointerEXTNative(uint index, int size, GLVertexAttribLType type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribLType, int, void*, void>)funcTable[9])(index, size, type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribLType, int, nint, void>)funcTable[9])(index, size, type, stride, (nint)pointer);
			#endif
		}

		public static void VertexAttribLPointerEXT(uint index, int size, GLVertexAttribLType type, int stride, void* pointer)
		{
			VertexAttribLPointerEXTNative(index, size, type, stride, pointer);
		}

	}
}
