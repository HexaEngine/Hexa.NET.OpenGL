// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.EXT
{
	public static unsafe partial class GLEXTVertexArray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ArrayElementEXTNative(int i)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[0])(i);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[0])(i);
			#endif
		}

		public static void ArrayElementEXT(int i)
		{
			ArrayElementEXTNative(i);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ColorPointerEXTNative(int size, GLColorPointerType type, int stride, int count, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, GLColorPointerType, int, int, void*, void>)funcTable[1])(size, type, stride, count, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, GLColorPointerType, int, int, nint, void>)funcTable[1])(size, type, stride, count, (nint)pointer);
			#endif
		}

		public static void ColorPointerEXT(int size, GLColorPointerType type, int stride, int count, void* pointer)
		{
			ColorPointerEXTNative(size, type, stride, count, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawArraysEXTNative(GLPrimitiveType mode, int first, int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int, int, void>)funcTable[2])(mode, first, count);
			#else
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int, int, void>)funcTable[2])(mode, first, count);
			#endif
		}

		public static void DrawArraysEXT(GLPrimitiveType mode, int first, int count)
		{
			DrawArraysEXTNative(mode, first, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EdgeFlagPointerEXTNative(int stride, int count, byte* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, byte*, void>)funcTable[3])(stride, count, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[3])(stride, count, (nint)pointer);
			#endif
		}

		public static void EdgeFlagPointerEXT(int stride, int count, byte* pointer)
		{
			EdgeFlagPointerEXTNative(stride, count, pointer);
		}

		public static void EdgeFlagPointerEXT(int stride, int count, string pointer)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (pointer != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(pointer);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(pointer, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			EdgeFlagPointerEXTNative(stride, count, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void EdgeFlagPointerEXT(int stride, int count, ReadOnlySpan<byte> pointer)
		{
			fixed (byte* ppointer0 = pointer)
			{
				EdgeFlagPointerEXTNative(stride, count, ppointer0);
			}
		}

		public static void EdgeFlagPointerEXT(int stride, int count, ref byte pointer)
		{
			fixed (byte* ppointer0 = &pointer)
			{
				EdgeFlagPointerEXTNative(stride, count, ppointer0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetPointervEXTNative(GLGetPointervPName pname, void** @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLGetPointervPName, void**, void>)funcTable[4])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLGetPointervPName, nint, void>)funcTable[4])(pname, (nint)@params);
			#endif
		}

		public static void GetPointervEXT(GLGetPointervPName pname, void** @params)
		{
			GetPointervEXTNative(pname, @params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void IndexPointerEXTNative(GLIndexPointerType type, int stride, int count, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLIndexPointerType, int, int, void*, void>)funcTable[5])(type, stride, count, pointer);
			#else
			((delegate* unmanaged[Cdecl]<GLIndexPointerType, int, int, nint, void>)funcTable[5])(type, stride, count, (nint)pointer);
			#endif
		}

		public static void IndexPointerEXT(GLIndexPointerType type, int stride, int count, void* pointer)
		{
			IndexPointerEXTNative(type, stride, count, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NormalPointerEXTNative(GLNormalPointerType type, int stride, int count, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLNormalPointerType, int, int, void*, void>)funcTable[6])(type, stride, count, pointer);
			#else
			((delegate* unmanaged[Cdecl]<GLNormalPointerType, int, int, nint, void>)funcTable[6])(type, stride, count, (nint)pointer);
			#endif
		}

		public static void NormalPointerEXT(GLNormalPointerType type, int stride, int count, void* pointer)
		{
			NormalPointerEXTNative(type, stride, count, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoordPointerEXTNative(int size, GLTexCoordPointerType type, int stride, int count, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, GLTexCoordPointerType, int, int, void*, void>)funcTable[7])(size, type, stride, count, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, GLTexCoordPointerType, int, int, nint, void>)funcTable[7])(size, type, stride, count, (nint)pointer);
			#endif
		}

		public static void TexCoordPointerEXT(int size, GLTexCoordPointerType type, int stride, int count, void* pointer)
		{
			TexCoordPointerEXTNative(size, type, stride, count, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexPointerEXTNative(int size, GLVertexPointerType type, int stride, int count, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, GLVertexPointerType, int, int, void*, void>)funcTable[8])(size, type, stride, count, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, GLVertexPointerType, int, int, nint, void>)funcTable[8])(size, type, stride, count, (nint)pointer);
			#endif
		}

		public static void VertexPointerEXT(int size, GLVertexPointerType type, int stride, int count, void* pointer)
		{
			VertexPointerEXTNative(size, type, stride, count, pointer);
		}

	}
}
