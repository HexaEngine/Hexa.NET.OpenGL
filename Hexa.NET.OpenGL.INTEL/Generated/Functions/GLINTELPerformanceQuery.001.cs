// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.INTEL
{
	public unsafe partial class GLINTELPerformanceQuery
	{

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, uint* counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = counterDataTypeEnum)
							{
								fixed (ulong* prawCounterMaxValue5 = rawCounterMaxValue)
								{
									GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, pcounterTypeEnum3, pcounterDataTypeEnum4, prawCounterMaxValue5);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, uint* counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = &counterDataTypeEnum)
							{
								fixed (ulong* prawCounterMaxValue5 = &rawCounterMaxValue)
								{
									GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, counterOffset, pcounterDataSize2, pcounterTypeEnum3, pcounterDataTypeEnum4, prawCounterMaxValue5);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = counterOffset)
			{
				fixed (uint* pcounterDataSize1 = counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, pcounterTypeEnum2, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (uint* pcounterOffset0 = &counterOffset)
			{
				fixed (uint* pcounterDataSize1 = &counterDataSize)
				{
					fixed (uint* pcounterTypeEnum2 = &counterTypeEnum)
					{
						fixed (uint* pcounterDataTypeEnum3 = &counterDataTypeEnum)
						{
							fixed (ulong* prawCounterMaxValue4 = &rawCounterMaxValue)
							{
								GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, pcounterOffset0, pcounterDataSize1, pcounterTypeEnum2, pcounterDataTypeEnum3, prawCounterMaxValue4);
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, byte* counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = counterDataTypeEnum)
							{
								fixed (ulong* prawCounterMaxValue5 = rawCounterMaxValue)
								{
									GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, pcounterDataTypeEnum4, prawCounterMaxValue5);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, byte* counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = &counterDataTypeEnum)
							{
								fixed (ulong* prawCounterMaxValue5 = &rawCounterMaxValue)
								{
									GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, counterDesc, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, pcounterDataTypeEnum4, prawCounterMaxValue5);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = counterDesc)
			{
				fixed (uint* pcounterOffset1 = counterOffset)
				{
					fixed (uint* pcounterDataSize2 = counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = counterDataTypeEnum)
							{
								fixed (ulong* prawCounterMaxValue5 = rawCounterMaxValue)
								{
									GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, pcounterDataTypeEnum4, prawCounterMaxValue5);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, byte* counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterDesc0 = &counterDesc)
			{
				fixed (uint* pcounterOffset1 = &counterOffset)
				{
					fixed (uint* pcounterDataSize2 = &counterDataSize)
					{
						fixed (uint* pcounterTypeEnum3 = &counterTypeEnum)
						{
							fixed (uint* pcounterDataTypeEnum4 = &counterDataTypeEnum)
							{
								fixed (ulong* prawCounterMaxValue5 = &rawCounterMaxValue)
								{
									GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, counterName, counterDescLength, pcounterDesc0, pcounterOffset1, pcounterDataSize2, pcounterTypeEnum3, pcounterDataTypeEnum4, prawCounterMaxValue5);
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, Span<byte> counterName, uint counterDescLength, Span<byte> counterDesc, Span<uint> counterOffset, Span<uint> counterDataSize, Span<uint> counterTypeEnum, Span<uint> counterDataTypeEnum, Span<ulong> rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = counterName)
			{
				fixed (byte* pcounterDesc1 = counterDesc)
				{
					fixed (uint* pcounterOffset2 = counterOffset)
					{
						fixed (uint* pcounterDataSize3 = counterDataSize)
						{
							fixed (uint* pcounterTypeEnum4 = counterTypeEnum)
							{
								fixed (uint* pcounterDataTypeEnum5 = counterDataTypeEnum)
								{
									fixed (ulong* prawCounterMaxValue6 = rawCounterMaxValue)
									{
										GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, pcounterTypeEnum4, pcounterDataTypeEnum5, prawCounterMaxValue6);
									}
								}
							}
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfCounterInfoINTEL(uint queryId, uint counterId, uint counterNameLength, ref byte counterName, uint counterDescLength, ref byte counterDesc, ref uint counterOffset, ref uint counterDataSize, ref uint counterTypeEnum, ref uint counterDataTypeEnum, ref ulong rawCounterMaxValue)
		{
			fixed (byte* pcounterName0 = &counterName)
			{
				fixed (byte* pcounterDesc1 = &counterDesc)
				{
					fixed (uint* pcounterOffset2 = &counterOffset)
					{
						fixed (uint* pcounterDataSize3 = &counterDataSize)
						{
							fixed (uint* pcounterTypeEnum4 = &counterTypeEnum)
							{
								fixed (uint* pcounterDataTypeEnum5 = &counterDataTypeEnum)
								{
									fixed (ulong* prawCounterMaxValue6 = &rawCounterMaxValue)
									{
										GetPerfCounterInfoINTELNative(queryId, counterId, counterNameLength, pcounterName0, counterDescLength, pcounterDesc1, pcounterOffset2, pcounterDataSize3, pcounterTypeEnum4, pcounterDataTypeEnum5, prawCounterMaxValue6);
									}
								}
							}
						}
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetPerfQueryDataINTELNative(uint queryHandle, GLPerfQueryDataFlags flags, int dataSize, void* data, uint* bytesWritten)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLPerfQueryDataFlags, int, void*, uint*, void>)funcTable[7])(queryHandle, flags, dataSize, data, bytesWritten);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLPerfQueryDataFlags, int, nint, nint, void>)funcTable[7])(queryHandle, flags, dataSize, (nint)data, (nint)bytesWritten);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryDataINTEL(uint queryHandle, GLPerfQueryDataFlags flags, int dataSize, void* data, uint* bytesWritten)
		{
			GetPerfQueryDataINTELNative(queryHandle, flags, dataSize, data, bytesWritten);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryDataINTEL(uint queryHandle, GLPerfQueryDataFlags flags, int dataSize, nint data, uint* bytesWritten)
		{
			GetPerfQueryDataINTELNative(queryHandle, flags, dataSize, (void*)data, bytesWritten);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryDataINTEL<TData>(uint queryHandle, GLPerfQueryDataFlags flags, int dataSize, Span<TData> data, uint* bytesWritten) where TData : unmanaged
		{
			fixed (TData* pdata0 = data)
			{
				GetPerfQueryDataINTELNative(queryHandle, flags, dataSize, pdata0, bytesWritten);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryDataINTEL(uint queryHandle, GLPerfQueryDataFlags flags, int dataSize, void* data, Span<uint> bytesWritten)
		{
			fixed (uint* pbytesWritten0 = bytesWritten)
			{
				GetPerfQueryDataINTELNative(queryHandle, flags, dataSize, data, pbytesWritten0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryDataINTEL(uint queryHandle, GLPerfQueryDataFlags flags, int dataSize, void* data, ref uint bytesWritten)
		{
			fixed (uint* pbytesWritten0 = &bytesWritten)
			{
				GetPerfQueryDataINTELNative(queryHandle, flags, dataSize, data, pbytesWritten0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetPerfQueryIdByNameINTELNative(byte* queryName, uint* queryId)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, uint*, void>)funcTable[8])(queryName, queryId);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[8])((nint)queryName, (nint)queryId);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryIdByNameINTEL(byte* queryName, uint* queryId)
		{
			GetPerfQueryIdByNameINTELNative(queryName, queryId);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryIdByNameINTEL(string queryName, uint* queryId)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (queryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(queryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(queryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			GetPerfQueryIdByNameINTELNative(pStr0, queryId);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryIdByNameINTEL(Span<byte> queryName, uint* queryId)
		{
			fixed (byte* pqueryName0 = queryName)
			{
				GetPerfQueryIdByNameINTELNative(pqueryName0, queryId);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryIdByNameINTEL(ref byte queryName, uint* queryId)
		{
			fixed (byte* pqueryName0 = &queryName)
			{
				GetPerfQueryIdByNameINTELNative(pqueryName0, queryId);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryIdByNameINTEL(byte* queryName, Span<uint> queryId)
		{
			fixed (uint* pqueryId0 = queryId)
			{
				GetPerfQueryIdByNameINTELNative(queryName, pqueryId0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryIdByNameINTEL(byte* queryName, ref uint queryId)
		{
			fixed (uint* pqueryId0 = &queryId)
			{
				GetPerfQueryIdByNameINTELNative(queryName, pqueryId0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryIdByNameINTEL(Span<byte> queryName, Span<uint> queryId)
		{
			fixed (byte* pqueryName0 = queryName)
			{
				fixed (uint* pqueryId1 = queryId)
				{
					GetPerfQueryIdByNameINTELNative(pqueryName0, pqueryId1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryIdByNameINTEL(ref byte queryName, ref uint queryId)
		{
			fixed (byte* pqueryName0 = &queryName)
			{
				fixed (uint* pqueryId1 = &queryId)
				{
					GetPerfQueryIdByNameINTELNative(pqueryName0, pqueryId1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetPerfQueryInfoINTELNative(uint queryId, uint queryNameLength, byte* queryName, uint* dataSize, uint* noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, byte*, uint*, uint*, uint*, GLPerformanceQueryCapsMaskINTEL, void>)funcTable[9])(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, nint, nint, nint, nint, GLPerformanceQueryCapsMaskINTEL, void>)funcTable[9])(queryId, queryNameLength, (nint)queryName, (nint)dataSize, (nint)noCounters, (nint)noInstances, capsMask);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, uint* dataSize, uint* noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, string queryName, uint* dataSize, uint* noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (queryName != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(queryName);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(queryName, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			GetPerfQueryInfoINTELNative(queryId, queryNameLength, pStr0, dataSize, noCounters, noInstances, capsMask);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, Span<byte> queryName, uint* dataSize, uint* noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = queryName)
			{
				GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, dataSize, noCounters, noInstances, capsMask);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, ref byte queryName, uint* dataSize, uint* noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = &queryName)
			{
				GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, dataSize, noCounters, noInstances, capsMask);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, Span<uint> dataSize, uint* noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (uint* pdataSize0 = dataSize)
			{
				GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, pdataSize0, noCounters, noInstances, capsMask);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, ref uint dataSize, uint* noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (uint* pdataSize0 = &dataSize)
			{
				GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, pdataSize0, noCounters, noInstances, capsMask);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, Span<byte> queryName, Span<uint> dataSize, uint* noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = queryName)
			{
				fixed (uint* pdataSize1 = dataSize)
				{
					GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, pdataSize1, noCounters, noInstances, capsMask);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, ref byte queryName, ref uint dataSize, uint* noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = &queryName)
			{
				fixed (uint* pdataSize1 = &dataSize)
				{
					GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, pdataSize1, noCounters, noInstances, capsMask);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, uint* dataSize, Span<uint> noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (uint* pnoCounters0 = noCounters)
			{
				GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, dataSize, pnoCounters0, noInstances, capsMask);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, uint* dataSize, ref uint noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (uint* pnoCounters0 = &noCounters)
			{
				GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, dataSize, pnoCounters0, noInstances, capsMask);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, Span<byte> queryName, uint* dataSize, Span<uint> noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = queryName)
			{
				fixed (uint* pnoCounters1 = noCounters)
				{
					GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, dataSize, pnoCounters1, noInstances, capsMask);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, ref byte queryName, uint* dataSize, ref uint noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = &queryName)
			{
				fixed (uint* pnoCounters1 = &noCounters)
				{
					GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, dataSize, pnoCounters1, noInstances, capsMask);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, Span<uint> dataSize, Span<uint> noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (uint* pdataSize0 = dataSize)
			{
				fixed (uint* pnoCounters1 = noCounters)
				{
					GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, pdataSize0, pnoCounters1, noInstances, capsMask);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, ref uint dataSize, ref uint noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (uint* pdataSize0 = &dataSize)
			{
				fixed (uint* pnoCounters1 = &noCounters)
				{
					GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, pdataSize0, pnoCounters1, noInstances, capsMask);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, Span<byte> queryName, Span<uint> dataSize, Span<uint> noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = queryName)
			{
				fixed (uint* pdataSize1 = dataSize)
				{
					fixed (uint* pnoCounters2 = noCounters)
					{
						GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, pdataSize1, pnoCounters2, noInstances, capsMask);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, ref byte queryName, ref uint dataSize, ref uint noCounters, uint* noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = &queryName)
			{
				fixed (uint* pdataSize1 = &dataSize)
				{
					fixed (uint* pnoCounters2 = &noCounters)
					{
						GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, pdataSize1, pnoCounters2, noInstances, capsMask);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, uint* dataSize, uint* noCounters, Span<uint> noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (uint* pnoInstances0 = noInstances)
			{
				GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, dataSize, noCounters, pnoInstances0, capsMask);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, uint* dataSize, uint* noCounters, ref uint noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (uint* pnoInstances0 = &noInstances)
			{
				GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, dataSize, noCounters, pnoInstances0, capsMask);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, Span<byte> queryName, uint* dataSize, uint* noCounters, Span<uint> noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = queryName)
			{
				fixed (uint* pnoInstances1 = noInstances)
				{
					GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, dataSize, noCounters, pnoInstances1, capsMask);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, ref byte queryName, uint* dataSize, uint* noCounters, ref uint noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = &queryName)
			{
				fixed (uint* pnoInstances1 = &noInstances)
				{
					GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, dataSize, noCounters, pnoInstances1, capsMask);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, Span<uint> dataSize, uint* noCounters, Span<uint> noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (uint* pdataSize0 = dataSize)
			{
				fixed (uint* pnoInstances1 = noInstances)
				{
					GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, pdataSize0, noCounters, pnoInstances1, capsMask);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, ref uint dataSize, uint* noCounters, ref uint noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (uint* pdataSize0 = &dataSize)
			{
				fixed (uint* pnoInstances1 = &noInstances)
				{
					GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, pdataSize0, noCounters, pnoInstances1, capsMask);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, Span<byte> queryName, Span<uint> dataSize, uint* noCounters, Span<uint> noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = queryName)
			{
				fixed (uint* pdataSize1 = dataSize)
				{
					fixed (uint* pnoInstances2 = noInstances)
					{
						GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, pdataSize1, noCounters, pnoInstances2, capsMask);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, ref byte queryName, ref uint dataSize, uint* noCounters, ref uint noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = &queryName)
			{
				fixed (uint* pdataSize1 = &dataSize)
				{
					fixed (uint* pnoInstances2 = &noInstances)
					{
						GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, pdataSize1, noCounters, pnoInstances2, capsMask);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, uint* dataSize, Span<uint> noCounters, Span<uint> noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (uint* pnoCounters0 = noCounters)
			{
				fixed (uint* pnoInstances1 = noInstances)
				{
					GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, dataSize, pnoCounters0, pnoInstances1, capsMask);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, uint* dataSize, ref uint noCounters, ref uint noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (uint* pnoCounters0 = &noCounters)
			{
				fixed (uint* pnoInstances1 = &noInstances)
				{
					GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, dataSize, pnoCounters0, pnoInstances1, capsMask);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, Span<byte> queryName, uint* dataSize, Span<uint> noCounters, Span<uint> noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = queryName)
			{
				fixed (uint* pnoCounters1 = noCounters)
				{
					fixed (uint* pnoInstances2 = noInstances)
					{
						GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, dataSize, pnoCounters1, pnoInstances2, capsMask);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, ref byte queryName, uint* dataSize, ref uint noCounters, ref uint noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = &queryName)
			{
				fixed (uint* pnoCounters1 = &noCounters)
				{
					fixed (uint* pnoInstances2 = &noInstances)
					{
						GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, dataSize, pnoCounters1, pnoInstances2, capsMask);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, Span<uint> dataSize, Span<uint> noCounters, Span<uint> noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (uint* pdataSize0 = dataSize)
			{
				fixed (uint* pnoCounters1 = noCounters)
				{
					fixed (uint* pnoInstances2 = noInstances)
					{
						GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, pdataSize0, pnoCounters1, pnoInstances2, capsMask);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, byte* queryName, ref uint dataSize, ref uint noCounters, ref uint noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (uint* pdataSize0 = &dataSize)
			{
				fixed (uint* pnoCounters1 = &noCounters)
				{
					fixed (uint* pnoInstances2 = &noInstances)
					{
						GetPerfQueryInfoINTELNative(queryId, queryNameLength, queryName, pdataSize0, pnoCounters1, pnoInstances2, capsMask);
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, Span<byte> queryName, Span<uint> dataSize, Span<uint> noCounters, Span<uint> noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = queryName)
			{
				fixed (uint* pdataSize1 = dataSize)
				{
					fixed (uint* pnoCounters2 = noCounters)
					{
						fixed (uint* pnoInstances3 = noInstances)
						{
							GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, pdataSize1, pnoCounters2, pnoInstances3, capsMask);
						}
					}
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_INTEL_performance_query</remarks>
		public void GetPerfQueryInfoINTEL(uint queryId, uint queryNameLength, ref byte queryName, ref uint dataSize, ref uint noCounters, ref uint noInstances, GLPerformanceQueryCapsMaskINTEL capsMask)
		{
			fixed (byte* pqueryName0 = &queryName)
			{
				fixed (uint* pdataSize1 = &dataSize)
				{
					fixed (uint* pnoCounters2 = &noCounters)
					{
						fixed (uint* pnoInstances3 = &noInstances)
						{
							GetPerfQueryInfoINTELNative(queryId, queryNameLength, pqueryName0, pdataSize1, pnoCounters2, pnoInstances3, capsMask);
						}
					}
				}
			}
		}

	}
}
