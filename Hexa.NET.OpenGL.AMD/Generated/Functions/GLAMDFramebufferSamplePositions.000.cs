// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.AMD
{
	public static unsafe partial class GLAMDFramebufferSamplePositions
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FramebufferSamplePositionsfvAMDNative(GLFramebufferTarget target, uint numsamples, uint pixelindex, float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, uint, uint, float*, void>)funcTable[0])(target, numsamples, pixelindex, values);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, uint, uint, nint, void>)funcTable[0])(target, numsamples, pixelindex, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_framebuffer_sample_positions</remarks>
		public static void FramebufferSamplePositionsfvAMD(GLFramebufferTarget target, uint numsamples, uint pixelindex, float* values)
		{
			FramebufferSamplePositionsfvAMDNative(target, numsamples, pixelindex, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_framebuffer_sample_positions</remarks>
		public static void FramebufferSamplePositionsfvAMD(GLFramebufferTarget target, uint numsamples, uint pixelindex, Span<float> values)
		{
			fixed (float* pvalues0 = values)
			{
				FramebufferSamplePositionsfvAMDNative(target, numsamples, pixelindex, pvalues0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_framebuffer_sample_positions</remarks>
		public static void FramebufferSamplePositionsfvAMD(GLFramebufferTarget target, uint numsamples, uint pixelindex, ref float values)
		{
			fixed (float* pvalues0 = &values)
			{
				FramebufferSamplePositionsfvAMDNative(target, numsamples, pixelindex, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetFramebufferParameterfvAMDNative(GLFramebufferTarget target, GLFramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachmentParameterName, uint, uint, int, float*, void>)funcTable[1])(target, pname, numsamples, pixelindex, size, values);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachmentParameterName, uint, uint, int, nint, void>)funcTable[1])(target, pname, numsamples, pixelindex, size, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_framebuffer_sample_positions</remarks>
		public static void GetFramebufferParameterfvAMD(GLFramebufferTarget target, GLFramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, float* values)
		{
			GetFramebufferParameterfvAMDNative(target, pname, numsamples, pixelindex, size, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_framebuffer_sample_positions</remarks>
		public static void GetFramebufferParameterfvAMD(GLFramebufferTarget target, GLFramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, Span<float> values)
		{
			fixed (float* pvalues0 = values)
			{
				GetFramebufferParameterfvAMDNative(target, pname, numsamples, pixelindex, size, pvalues0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_framebuffer_sample_positions</remarks>
		public static void GetFramebufferParameterfvAMD(GLFramebufferTarget target, GLFramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, ref float values)
		{
			fixed (float* pvalues0 = &values)
			{
				GetFramebufferParameterfvAMDNative(target, pname, numsamples, pixelindex, size, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetNamedFramebufferParameterfvAMDNative(uint framebuffer, GLEnum pname, uint numsamples, uint pixelindex, int size, float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, uint, uint, int, float*, void>)funcTable[2])(framebuffer, pname, numsamples, pixelindex, size, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, uint, uint, int, nint, void>)funcTable[2])(framebuffer, pname, numsamples, pixelindex, size, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_framebuffer_sample_positions</remarks>
		public static void GetNamedFramebufferParameterfvAMD(uint framebuffer, GLEnum pname, uint numsamples, uint pixelindex, int size, float* values)
		{
			GetNamedFramebufferParameterfvAMDNative(framebuffer, pname, numsamples, pixelindex, size, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_framebuffer_sample_positions</remarks>
		public static void GetNamedFramebufferParameterfvAMD(uint framebuffer, GLEnum pname, uint numsamples, uint pixelindex, int size, Span<float> values)
		{
			fixed (float* pvalues0 = values)
			{
				GetNamedFramebufferParameterfvAMDNative(framebuffer, pname, numsamples, pixelindex, size, pvalues0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_framebuffer_sample_positions</remarks>
		public static void GetNamedFramebufferParameterfvAMD(uint framebuffer, GLEnum pname, uint numsamples, uint pixelindex, int size, ref float values)
		{
			fixed (float* pvalues0 = &values)
			{
				GetNamedFramebufferParameterfvAMDNative(framebuffer, pname, numsamples, pixelindex, size, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferSamplePositionsfvAMDNative(uint framebuffer, uint numsamples, uint pixelindex, float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)funcTable[3])(framebuffer, numsamples, pixelindex, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, void>)funcTable[3])(framebuffer, numsamples, pixelindex, (nint)values);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_framebuffer_sample_positions</remarks>
		public static void NamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, float* values)
		{
			NamedFramebufferSamplePositionsfvAMDNative(framebuffer, numsamples, pixelindex, values);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_framebuffer_sample_positions</remarks>
		public static void NamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, Span<float> values)
		{
			fixed (float* pvalues0 = values)
			{
				NamedFramebufferSamplePositionsfvAMDNative(framebuffer, numsamples, pixelindex, pvalues0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_framebuffer_sample_positions</remarks>
		public static void NamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, ref float values)
		{
			fixed (float* pvalues0 = &values)
			{
				NamedFramebufferSamplePositionsfvAMDNative(framebuffer, numsamples, pixelindex, pvalues0);
			}
		}

	}
}
