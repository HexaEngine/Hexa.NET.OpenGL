// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.AMD
{
	public static unsafe partial class GLAMD
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BeginPerfMonitorAMDNative(uint monitor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[0])(monitor);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[0])(monitor);
			#endif
		}

		public static void BeginPerfMonitorAMD(uint monitor)
		{
			BeginPerfMonitorAMDNative(monitor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BlendEquationIndexedAMDNative(uint buf, GLBlendEquationModeEXT mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLBlendEquationModeEXT, void>)funcTable[1])(buf, mode);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLBlendEquationModeEXT, void>)funcTable[1])(buf, mode);
			#endif
		}

		public static void BlendEquationIndexedAMD(uint buf, GLBlendEquationModeEXT mode)
		{
			BlendEquationIndexedAMDNative(buf, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BlendEquationSeparateIndexedAMDNative(uint buf, GLBlendEquationModeEXT modeRGB, GLBlendEquationModeEXT modeAlpha)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLBlendEquationModeEXT, GLBlendEquationModeEXT, void>)funcTable[2])(buf, modeRGB, modeAlpha);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLBlendEquationModeEXT, GLBlendEquationModeEXT, void>)funcTable[2])(buf, modeRGB, modeAlpha);
			#endif
		}

		public static void BlendEquationSeparateIndexedAMD(uint buf, GLBlendEquationModeEXT modeRGB, GLBlendEquationModeEXT modeAlpha)
		{
			BlendEquationSeparateIndexedAMDNative(buf, modeRGB, modeAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BlendFuncIndexedAMDNative(uint buf, GLEnum src, GLEnum dst)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, GLEnum, void>)funcTable[3])(buf, src, dst);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, GLEnum, void>)funcTable[3])(buf, src, dst);
			#endif
		}

		public static void BlendFuncIndexedAMD(uint buf, GLEnum src, GLEnum dst)
		{
			BlendFuncIndexedAMDNative(buf, src, dst);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BlendFuncSeparateIndexedAMDNative(uint buf, GLBlendingFactor srcRGB, GLBlendingFactor dstRGB, GLBlendingFactor srcAlpha, GLBlendingFactor dstAlpha)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLBlendingFactor, GLBlendingFactor, GLBlendingFactor, GLBlendingFactor, void>)funcTable[4])(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLBlendingFactor, GLBlendingFactor, GLBlendingFactor, GLBlendingFactor, void>)funcTable[4])(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
			#endif
		}

		public static void BlendFuncSeparateIndexedAMD(uint buf, GLBlendingFactor srcRGB, GLBlendingFactor dstRGB, GLBlendingFactor srcAlpha, GLBlendingFactor dstAlpha)
		{
			BlendFuncSeparateIndexedAMDNative(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugMessageCallbackAMDNative(GLDebugProcAMD callback, void* userParam)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, void*, void>)funcTable[5])((void*)Utils.GetFunctionPointerForDelegate(callback), userParam);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[5])(Utils.GetFunctionPointerForDelegate(callback), (nint)userParam);
			#endif
		}

		public static void DebugMessageCallbackAMD(GLDebugProcAMD callback, void* userParam)
		{
			DebugMessageCallbackAMDNative(callback, userParam);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugMessageEnableAMDNative(GLEnum category, GLDebugSeverity severity, int count, uint* ids, byte enabled)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, GLDebugSeverity, int, uint*, byte, void>)funcTable[6])(category, severity, count, ids, enabled);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, GLDebugSeverity, int, nint, byte, void>)funcTable[6])(category, severity, count, (nint)ids, enabled);
			#endif
		}

		public static void DebugMessageEnableAMD(GLEnum category, GLDebugSeverity severity, int count, uint* ids, byte enabled)
		{
			DebugMessageEnableAMDNative(category, severity, count, ids, enabled);
		}

		public static void DebugMessageEnableAMD(GLEnum category, GLDebugSeverity severity, int count, ref uint ids, byte enabled)
		{
			fixed (uint* pids0 = &ids)
			{
				DebugMessageEnableAMDNative(category, severity, count, pids0, enabled);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DebugMessageInsertAMDNative(GLEnum category, GLDebugSeverity severity, uint id, int length, byte* buf)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, GLDebugSeverity, uint, int, byte*, void>)funcTable[7])(category, severity, id, length, buf);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, GLDebugSeverity, uint, int, nint, void>)funcTable[7])(category, severity, id, length, (nint)buf);
			#endif
		}

		public static void DebugMessageInsertAMD(GLEnum category, GLDebugSeverity severity, uint id, int length, byte* buf)
		{
			DebugMessageInsertAMDNative(category, severity, id, length, buf);
		}

		public static void DebugMessageInsertAMD(GLEnum category, GLDebugSeverity severity, uint id, int length, string buf)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (buf != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(buf);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(buf, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			DebugMessageInsertAMDNative(category, severity, id, length, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void DebugMessageInsertAMD(GLEnum category, GLDebugSeverity severity, uint id, int length, ReadOnlySpan<byte> buf)
		{
			fixed (byte* pbuf0 = buf)
			{
				DebugMessageInsertAMDNative(category, severity, id, length, pbuf0);
			}
		}

		public static void DebugMessageInsertAMD(GLEnum category, GLDebugSeverity severity, uint id, int length, ref byte buf)
		{
			fixed (byte* pbuf0 = &buf)
			{
				DebugMessageInsertAMDNative(category, severity, id, length, pbuf0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DeleteNamesAMDNative(GLEnum identifier, uint num, uint* names)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, uint, uint*, void>)funcTable[8])(identifier, num, names);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, uint, nint, void>)funcTable[8])(identifier, num, (nint)names);
			#endif
		}

		public static void DeleteNamesAMD(GLEnum identifier, uint num, uint* names)
		{
			DeleteNamesAMDNative(identifier, num, names);
		}

		public static void DeleteNamesAMD(GLEnum identifier, uint num, ref uint names)
		{
			fixed (uint* pnames0 = &names)
			{
				DeleteNamesAMDNative(identifier, num, pnames0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DeletePerfMonitorsAMDNative(int n, uint* monitors)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[9])(n, monitors);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[9])(n, (nint)monitors);
			#endif
		}

		public static void DeletePerfMonitorsAMD(int n, uint* monitors)
		{
			DeletePerfMonitorsAMDNative(n, monitors);
		}

		public static void DeletePerfMonitorsAMD(int n, ref uint monitors)
		{
			fixed (uint* pmonitors0 = &monitors)
			{
				DeletePerfMonitorsAMDNative(n, pmonitors0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EndPerfMonitorAMDNative(uint monitor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[10])(monitor);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[10])(monitor);
			#endif
		}

		public static void EndPerfMonitorAMD(uint monitor)
		{
			EndPerfMonitorAMDNative(monitor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FramebufferSamplePositionsfvAMDNative(GLFramebufferTarget target, uint numsamples, uint pixelindex, float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, uint, uint, float*, void>)funcTable[11])(target, numsamples, pixelindex, values);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, uint, uint, nint, void>)funcTable[11])(target, numsamples, pixelindex, (nint)values);
			#endif
		}

		public static void FramebufferSamplePositionsfvAMD(GLFramebufferTarget target, uint numsamples, uint pixelindex, float* values)
		{
			FramebufferSamplePositionsfvAMDNative(target, numsamples, pixelindex, values);
		}

		public static void FramebufferSamplePositionsfvAMD(GLFramebufferTarget target, uint numsamples, uint pixelindex, ref float values)
		{
			fixed (float* pvalues0 = &values)
			{
				FramebufferSamplePositionsfvAMDNative(target, numsamples, pixelindex, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GenNamesAMDNative(GLEnum identifier, uint num, uint* names)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, uint, uint*, void>)funcTable[12])(identifier, num, names);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, uint, nint, void>)funcTable[12])(identifier, num, (nint)names);
			#endif
		}

		public static void GenNamesAMD(GLEnum identifier, uint num, uint* names)
		{
			GenNamesAMDNative(identifier, num, names);
		}

		public static void GenNamesAMD(GLEnum identifier, uint num, ref uint names)
		{
			fixed (uint* pnames0 = &names)
			{
				GenNamesAMDNative(identifier, num, pnames0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GenPerfMonitorsAMDNative(int n, uint* monitors)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[13])(n, monitors);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[13])(n, (nint)monitors);
			#endif
		}

		public static void GenPerfMonitorsAMD(int n, uint* monitors)
		{
			GenPerfMonitorsAMDNative(n, monitors);
		}

		public static void GenPerfMonitorsAMD(int n, ref uint monitors)
		{
			fixed (uint* pmonitors0 = &monitors)
			{
				GenPerfMonitorsAMDNative(n, pmonitors0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint GetDebugMessageLogAMDNative(uint count, int bufSize, GLEnum* categories, GLDebugSeverity severities, uint* ids, int* lengths, byte* message)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, int, GLEnum*, GLDebugSeverity, uint*, int*, byte*, uint>)funcTable[14])(count, bufSize, categories, severities, ids, lengths, message);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint, int, nint, GLDebugSeverity, nint, nint, nint, uint>)funcTable[14])(count, bufSize, (nint)categories, severities, (nint)ids, (nint)lengths, (nint)message);
			#endif
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, GLEnum* categories, GLDebugSeverity severities, uint* ids, int* lengths, byte* message)
		{
			uint ret = GetDebugMessageLogAMDNative(count, bufSize, categories, severities, ids, lengths, message);
			return ret;
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, ref GLEnum categories, GLDebugSeverity severities, uint* ids, int* lengths, byte* message)
		{
			fixed (GLEnum* pcategories0 = &categories)
			{
				uint ret = GetDebugMessageLogAMDNative(count, bufSize, pcategories0, severities, ids, lengths, message);
				return ret;
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, GLEnum* categories, GLDebugSeverity severities, ref uint ids, int* lengths, byte* message)
		{
			fixed (uint* pids0 = &ids)
			{
				uint ret = GetDebugMessageLogAMDNative(count, bufSize, categories, severities, pids0, lengths, message);
				return ret;
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, ref GLEnum categories, GLDebugSeverity severities, ref uint ids, int* lengths, byte* message)
		{
			fixed (GLEnum* pcategories0 = &categories)
			{
				fixed (uint* pids1 = &ids)
				{
					uint ret = GetDebugMessageLogAMDNative(count, bufSize, pcategories0, severities, pids1, lengths, message);
					return ret;
				}
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, GLEnum* categories, GLDebugSeverity severities, uint* ids, ref int lengths, byte* message)
		{
			fixed (int* plengths0 = &lengths)
			{
				uint ret = GetDebugMessageLogAMDNative(count, bufSize, categories, severities, ids, plengths0, message);
				return ret;
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, ref GLEnum categories, GLDebugSeverity severities, uint* ids, ref int lengths, byte* message)
		{
			fixed (GLEnum* pcategories0 = &categories)
			{
				fixed (int* plengths1 = &lengths)
				{
					uint ret = GetDebugMessageLogAMDNative(count, bufSize, pcategories0, severities, ids, plengths1, message);
					return ret;
				}
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, GLEnum* categories, GLDebugSeverity severities, ref uint ids, ref int lengths, byte* message)
		{
			fixed (uint* pids0 = &ids)
			{
				fixed (int* plengths1 = &lengths)
				{
					uint ret = GetDebugMessageLogAMDNative(count, bufSize, categories, severities, pids0, plengths1, message);
					return ret;
				}
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, ref GLEnum categories, GLDebugSeverity severities, ref uint ids, ref int lengths, byte* message)
		{
			fixed (GLEnum* pcategories0 = &categories)
			{
				fixed (uint* pids1 = &ids)
				{
					fixed (int* plengths2 = &lengths)
					{
						uint ret = GetDebugMessageLogAMDNative(count, bufSize, pcategories0, severities, pids1, plengths2, message);
						return ret;
					}
				}
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, GLEnum* categories, GLDebugSeverity severities, uint* ids, int* lengths, string message)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (message != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(message);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(message, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			uint ret = GetDebugMessageLogAMDNative(count, bufSize, categories, severities, ids, lengths, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, GLEnum* categories, GLDebugSeverity severities, uint* ids, int* lengths, ReadOnlySpan<byte> message)
		{
			fixed (byte* pmessage0 = message)
			{
				uint ret = GetDebugMessageLogAMDNative(count, bufSize, categories, severities, ids, lengths, pmessage0);
				return ret;
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, GLEnum* categories, GLDebugSeverity severities, uint* ids, int* lengths, ref byte message)
		{
			fixed (byte* pmessage0 = &message)
			{
				uint ret = GetDebugMessageLogAMDNative(count, bufSize, categories, severities, ids, lengths, pmessage0);
				return ret;
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, ref GLEnum categories, GLDebugSeverity severities, uint* ids, int* lengths, ref byte message)
		{
			fixed (GLEnum* pcategories0 = &categories)
			{
				fixed (byte* pmessage1 = &message)
				{
					uint ret = GetDebugMessageLogAMDNative(count, bufSize, pcategories0, severities, ids, lengths, pmessage1);
					return ret;
				}
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, GLEnum* categories, GLDebugSeverity severities, ref uint ids, int* lengths, ref byte message)
		{
			fixed (uint* pids0 = &ids)
			{
				fixed (byte* pmessage1 = &message)
				{
					uint ret = GetDebugMessageLogAMDNative(count, bufSize, categories, severities, pids0, lengths, pmessage1);
					return ret;
				}
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, ref GLEnum categories, GLDebugSeverity severities, ref uint ids, int* lengths, ref byte message)
		{
			fixed (GLEnum* pcategories0 = &categories)
			{
				fixed (uint* pids1 = &ids)
				{
					fixed (byte* pmessage2 = &message)
					{
						uint ret = GetDebugMessageLogAMDNative(count, bufSize, pcategories0, severities, pids1, lengths, pmessage2);
						return ret;
					}
				}
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, GLEnum* categories, GLDebugSeverity severities, uint* ids, ref int lengths, ref byte message)
		{
			fixed (int* plengths0 = &lengths)
			{
				fixed (byte* pmessage1 = &message)
				{
					uint ret = GetDebugMessageLogAMDNative(count, bufSize, categories, severities, ids, plengths0, pmessage1);
					return ret;
				}
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, ref GLEnum categories, GLDebugSeverity severities, uint* ids, ref int lengths, ref byte message)
		{
			fixed (GLEnum* pcategories0 = &categories)
			{
				fixed (int* plengths1 = &lengths)
				{
					fixed (byte* pmessage2 = &message)
					{
						uint ret = GetDebugMessageLogAMDNative(count, bufSize, pcategories0, severities, ids, plengths1, pmessage2);
						return ret;
					}
				}
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, GLEnum* categories, GLDebugSeverity severities, ref uint ids, ref int lengths, ref byte message)
		{
			fixed (uint* pids0 = &ids)
			{
				fixed (int* plengths1 = &lengths)
				{
					fixed (byte* pmessage2 = &message)
					{
						uint ret = GetDebugMessageLogAMDNative(count, bufSize, categories, severities, pids0, plengths1, pmessage2);
						return ret;
					}
				}
			}
		}

		public static uint GetDebugMessageLogAMD(uint count, int bufSize, ref GLEnum categories, GLDebugSeverity severities, ref uint ids, ref int lengths, ref byte message)
		{
			fixed (GLEnum* pcategories0 = &categories)
			{
				fixed (uint* pids1 = &ids)
				{
					fixed (int* plengths2 = &lengths)
					{
						fixed (byte* pmessage3 = &message)
						{
							uint ret = GetDebugMessageLogAMDNative(count, bufSize, pcategories0, severities, pids1, plengths2, pmessage3);
							return ret;
						}
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetFramebufferParameterfvAMDNative(GLFramebufferTarget target, GLFramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachmentParameterName, uint, uint, int, float*, void>)funcTable[15])(target, pname, numsamples, pixelindex, size, values);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachmentParameterName, uint, uint, int, nint, void>)funcTable[15])(target, pname, numsamples, pixelindex, size, (nint)values);
			#endif
		}

		public static void GetFramebufferParameterfvAMD(GLFramebufferTarget target, GLFramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, float* values)
		{
			GetFramebufferParameterfvAMDNative(target, pname, numsamples, pixelindex, size, values);
		}

		public static void GetFramebufferParameterfvAMD(GLFramebufferTarget target, GLFramebufferAttachmentParameterName pname, uint numsamples, uint pixelindex, int size, ref float values)
		{
			fixed (float* pvalues0 = &values)
			{
				GetFramebufferParameterfvAMDNative(target, pname, numsamples, pixelindex, size, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetNamedFramebufferParameterfvAMDNative(uint framebuffer, GLEnum pname, uint numsamples, uint pixelindex, int size, float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, uint, uint, int, float*, void>)funcTable[16])(framebuffer, pname, numsamples, pixelindex, size, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, uint, uint, int, nint, void>)funcTable[16])(framebuffer, pname, numsamples, pixelindex, size, (nint)values);
			#endif
		}

		public static void GetNamedFramebufferParameterfvAMD(uint framebuffer, GLEnum pname, uint numsamples, uint pixelindex, int size, float* values)
		{
			GetNamedFramebufferParameterfvAMDNative(framebuffer, pname, numsamples, pixelindex, size, values);
		}

		public static void GetNamedFramebufferParameterfvAMD(uint framebuffer, GLEnum pname, uint numsamples, uint pixelindex, int size, ref float values)
		{
			fixed (float* pvalues0 = &values)
			{
				GetNamedFramebufferParameterfvAMDNative(framebuffer, pname, numsamples, pixelindex, size, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetPerfMonitorCounterDataAMDNative(uint monitor, GLEnum pname, int dataSize, uint* data, int* bytesWritten)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, int, uint*, int*, void>)funcTable[17])(monitor, pname, dataSize, data, bytesWritten);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, int, nint, nint, void>)funcTable[17])(monitor, pname, dataSize, (nint)data, (nint)bytesWritten);
			#endif
		}

		public static void GetPerfMonitorCounterDataAMD(uint monitor, GLEnum pname, int dataSize, uint* data, int* bytesWritten)
		{
			GetPerfMonitorCounterDataAMDNative(monitor, pname, dataSize, data, bytesWritten);
		}

		public static void GetPerfMonitorCounterDataAMD(uint monitor, GLEnum pname, int dataSize, ref uint data, int* bytesWritten)
		{
			fixed (uint* pdata0 = &data)
			{
				GetPerfMonitorCounterDataAMDNative(monitor, pname, dataSize, pdata0, bytesWritten);
			}
		}

		public static void GetPerfMonitorCounterDataAMD(uint monitor, GLEnum pname, int dataSize, uint* data, ref int bytesWritten)
		{
			fixed (int* pbytesWritten0 = &bytesWritten)
			{
				GetPerfMonitorCounterDataAMDNative(monitor, pname, dataSize, data, pbytesWritten0);
			}
		}

		public static void GetPerfMonitorCounterDataAMD(uint monitor, GLEnum pname, int dataSize, ref uint data, ref int bytesWritten)
		{
			fixed (uint* pdata0 = &data)
			{
				fixed (int* pbytesWritten1 = &bytesWritten)
				{
					GetPerfMonitorCounterDataAMDNative(monitor, pname, dataSize, pdata0, pbytesWritten1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetPerfMonitorCounterInfoAMDNative(uint group, uint counter, GLEnum pname, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, GLEnum, void*, void>)funcTable[18])(group, counter, pname, data);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, GLEnum, nint, void>)funcTable[18])(group, counter, pname, (nint)data);
			#endif
		}

		public static void GetPerfMonitorCounterInfoAMD(uint group, uint counter, GLEnum pname, void* data)
		{
			GetPerfMonitorCounterInfoAMDNative(group, counter, pname, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetPerfMonitorCounterStringAMDNative(uint group, uint counter, int bufSize, int* length, byte* counterString)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, int, int*, byte*, void>)funcTable[19])(group, counter, bufSize, length, counterString);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, int, nint, nint, void>)funcTable[19])(group, counter, bufSize, (nint)length, (nint)counterString);
			#endif
		}

		public static void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, int* length, byte* counterString)
		{
			GetPerfMonitorCounterStringAMDNative(group, counter, bufSize, length, counterString);
		}

		public static void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, ref int length, byte* counterString)
		{
			fixed (int* plength0 = &length)
			{
				GetPerfMonitorCounterStringAMDNative(group, counter, bufSize, plength0, counterString);
			}
		}

		public static void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, int* length, string counterString)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (counterString != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(counterString);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(counterString, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			GetPerfMonitorCounterStringAMDNative(group, counter, bufSize, length, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, int* length, ReadOnlySpan<byte> counterString)
		{
			fixed (byte* pcounterString0 = counterString)
			{
				GetPerfMonitorCounterStringAMDNative(group, counter, bufSize, length, pcounterString0);
			}
		}

		public static void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, int* length, ref byte counterString)
		{
			fixed (byte* pcounterString0 = &counterString)
			{
				GetPerfMonitorCounterStringAMDNative(group, counter, bufSize, length, pcounterString0);
			}
		}

		public static void GetPerfMonitorCounterStringAMD(uint group, uint counter, int bufSize, ref int length, ref byte counterString)
		{
			fixed (int* plength0 = &length)
			{
				fixed (byte* pcounterString1 = &counterString)
				{
					GetPerfMonitorCounterStringAMDNative(group, counter, bufSize, plength0, pcounterString1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetPerfMonitorCountersAMDNative(uint group, int* numCounters, int* maxActiveCounters, int counterSize, uint* counters)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, int*, int, uint*, void>)funcTable[20])(group, numCounters, maxActiveCounters, counterSize, counters);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, nint, int, nint, void>)funcTable[20])(group, (nint)numCounters, (nint)maxActiveCounters, counterSize, (nint)counters);
			#endif
		}

		public static void GetPerfMonitorCountersAMD(uint group, int* numCounters, int* maxActiveCounters, int counterSize, uint* counters)
		{
			GetPerfMonitorCountersAMDNative(group, numCounters, maxActiveCounters, counterSize, counters);
		}

		public static void GetPerfMonitorCountersAMD(uint group, ref int numCounters, int* maxActiveCounters, int counterSize, uint* counters)
		{
			fixed (int* pnumCounters0 = &numCounters)
			{
				GetPerfMonitorCountersAMDNative(group, pnumCounters0, maxActiveCounters, counterSize, counters);
			}
		}

		public static void GetPerfMonitorCountersAMD(uint group, int* numCounters, ref int maxActiveCounters, int counterSize, uint* counters)
		{
			fixed (int* pmaxActiveCounters0 = &maxActiveCounters)
			{
				GetPerfMonitorCountersAMDNative(group, numCounters, pmaxActiveCounters0, counterSize, counters);
			}
		}

		public static void GetPerfMonitorCountersAMD(uint group, ref int numCounters, ref int maxActiveCounters, int counterSize, uint* counters)
		{
			fixed (int* pnumCounters0 = &numCounters)
			{
				fixed (int* pmaxActiveCounters1 = &maxActiveCounters)
				{
					GetPerfMonitorCountersAMDNative(group, pnumCounters0, pmaxActiveCounters1, counterSize, counters);
				}
			}
		}

		public static void GetPerfMonitorCountersAMD(uint group, int* numCounters, int* maxActiveCounters, int counterSize, ref uint counters)
		{
			fixed (uint* pcounters0 = &counters)
			{
				GetPerfMonitorCountersAMDNative(group, numCounters, maxActiveCounters, counterSize, pcounters0);
			}
		}

		public static void GetPerfMonitorCountersAMD(uint group, ref int numCounters, int* maxActiveCounters, int counterSize, ref uint counters)
		{
			fixed (int* pnumCounters0 = &numCounters)
			{
				fixed (uint* pcounters1 = &counters)
				{
					GetPerfMonitorCountersAMDNative(group, pnumCounters0, maxActiveCounters, counterSize, pcounters1);
				}
			}
		}

		public static void GetPerfMonitorCountersAMD(uint group, int* numCounters, ref int maxActiveCounters, int counterSize, ref uint counters)
		{
			fixed (int* pmaxActiveCounters0 = &maxActiveCounters)
			{
				fixed (uint* pcounters1 = &counters)
				{
					GetPerfMonitorCountersAMDNative(group, numCounters, pmaxActiveCounters0, counterSize, pcounters1);
				}
			}
		}

		public static void GetPerfMonitorCountersAMD(uint group, ref int numCounters, ref int maxActiveCounters, int counterSize, ref uint counters)
		{
			fixed (int* pnumCounters0 = &numCounters)
			{
				fixed (int* pmaxActiveCounters1 = &maxActiveCounters)
				{
					fixed (uint* pcounters2 = &counters)
					{
						GetPerfMonitorCountersAMDNative(group, pnumCounters0, pmaxActiveCounters1, counterSize, pcounters2);
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetPerfMonitorGroupStringAMDNative(uint group, int bufSize, int* length, byte* groupString)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int*, byte*, void>)funcTable[21])(group, bufSize, length, groupString);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, void>)funcTable[21])(group, bufSize, (nint)length, (nint)groupString);
			#endif
		}

		public static void GetPerfMonitorGroupStringAMD(uint group, int bufSize, int* length, byte* groupString)
		{
			GetPerfMonitorGroupStringAMDNative(group, bufSize, length, groupString);
		}

		public static void GetPerfMonitorGroupStringAMD(uint group, int bufSize, ref int length, byte* groupString)
		{
			fixed (int* plength0 = &length)
			{
				GetPerfMonitorGroupStringAMDNative(group, bufSize, plength0, groupString);
			}
		}

		public static void GetPerfMonitorGroupStringAMD(uint group, int bufSize, int* length, string groupString)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (groupString != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(groupString);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(groupString, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			GetPerfMonitorGroupStringAMDNative(group, bufSize, length, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void GetPerfMonitorGroupStringAMD(uint group, int bufSize, int* length, ReadOnlySpan<byte> groupString)
		{
			fixed (byte* pgroupString0 = groupString)
			{
				GetPerfMonitorGroupStringAMDNative(group, bufSize, length, pgroupString0);
			}
		}

		public static void GetPerfMonitorGroupStringAMD(uint group, int bufSize, int* length, ref byte groupString)
		{
			fixed (byte* pgroupString0 = &groupString)
			{
				GetPerfMonitorGroupStringAMDNative(group, bufSize, length, pgroupString0);
			}
		}

		public static void GetPerfMonitorGroupStringAMD(uint group, int bufSize, ref int length, ref byte groupString)
		{
			fixed (int* plength0 = &length)
			{
				fixed (byte* pgroupString1 = &groupString)
				{
					GetPerfMonitorGroupStringAMDNative(group, bufSize, plength0, pgroupString1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetPerfMonitorGroupsAMDNative(int* numGroups, int groupsSize, uint* groups)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, int, uint*, void>)funcTable[22])(numGroups, groupsSize, groups);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, nint, void>)funcTable[22])((nint)numGroups, groupsSize, (nint)groups);
			#endif
		}

		public static void GetPerfMonitorGroupsAMD(int* numGroups, int groupsSize, uint* groups)
		{
			GetPerfMonitorGroupsAMDNative(numGroups, groupsSize, groups);
		}

		public static void GetPerfMonitorGroupsAMD(ref int numGroups, int groupsSize, uint* groups)
		{
			fixed (int* pnumGroups0 = &numGroups)
			{
				GetPerfMonitorGroupsAMDNative(pnumGroups0, groupsSize, groups);
			}
		}

		public static void GetPerfMonitorGroupsAMD(int* numGroups, int groupsSize, ref uint groups)
		{
			fixed (uint* pgroups0 = &groups)
			{
				GetPerfMonitorGroupsAMDNative(numGroups, groupsSize, pgroups0);
			}
		}

		public static void GetPerfMonitorGroupsAMD(ref int numGroups, int groupsSize, ref uint groups)
		{
			fixed (int* pnumGroups0 = &numGroups)
			{
				fixed (uint* pgroups1 = &groups)
				{
					GetPerfMonitorGroupsAMDNative(pnumGroups0, groupsSize, pgroups1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetUniformi64vNVNative(uint program, int location, long* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, long*, void>)funcTable[23])(program, location, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[23])(program, location, (nint)@params);
			#endif
		}

		public static void GetUniformi64vNV(uint program, int location, long* @params)
		{
			GetUniformi64vNVNative(program, location, @params);
		}

		public static void GetUniformi64vNV(uint program, int location, ref long @params)
		{
			fixed (long* pparams0 = &@params)
			{
				GetUniformi64vNVNative(program, location, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetUniformui64vNVNative(uint program, int location, ulong* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, ulong*, void>)funcTable[24])(program, location, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[24])(program, location, (nint)@params);
			#endif
		}

		public static void GetUniformui64vNV(uint program, int location, ulong* @params)
		{
			GetUniformui64vNVNative(program, location, @params);
		}

		public static void GetUniformui64vNV(uint program, int location, ref ulong @params)
		{
			fixed (ulong* pparams0 = &@params)
			{
				GetUniformui64vNVNative(program, location, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsNameAMDNative(GLEnum identifier, uint name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLEnum, uint, byte>)funcTable[25])(identifier, name);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<GLEnum, uint, byte>)funcTable[25])(identifier, name);
			#endif
		}

		public static bool IsNameAMD(GLEnum identifier, uint name)
		{
			byte ret = IsNameAMDNative(identifier, name);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiDrawArraysIndirectAMDNative(GLPrimitiveType mode, void* indirect, int primcount, int stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, void*, int, int, void>)funcTable[26])(mode, indirect, primcount, stride);
			#else
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, nint, int, int, void>)funcTable[26])(mode, (nint)indirect, primcount, stride);
			#endif
		}

		public static void MultiDrawArraysIndirectAMD(GLPrimitiveType mode, void* indirect, int primcount, int stride)
		{
			MultiDrawArraysIndirectAMDNative(mode, indirect, primcount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiDrawElementsIndirectAMDNative(GLPrimitiveType mode, GLDrawElementsType type, void* indirect, int primcount, int stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, GLDrawElementsType, void*, int, int, void>)funcTable[27])(mode, type, indirect, primcount, stride);
			#else
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, GLDrawElementsType, nint, int, int, void>)funcTable[27])(mode, type, (nint)indirect, primcount, stride);
			#endif
		}

		public static void MultiDrawElementsIndirectAMD(GLPrimitiveType mode, GLDrawElementsType type, void* indirect, int primcount, int stride)
		{
			MultiDrawElementsIndirectAMDNative(mode, type, indirect, primcount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferSamplePositionsfvAMDNative(uint framebuffer, uint numsamples, uint pixelindex, float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, float*, void>)funcTable[28])(framebuffer, numsamples, pixelindex, values);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, nint, void>)funcTable[28])(framebuffer, numsamples, pixelindex, (nint)values);
			#endif
		}

		public static void NamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, float* values)
		{
			NamedFramebufferSamplePositionsfvAMDNative(framebuffer, numsamples, pixelindex, values);
		}

		public static void NamedFramebufferSamplePositionsfvAMD(uint framebuffer, uint numsamples, uint pixelindex, ref float values)
		{
			fixed (float* pvalues0 = &values)
			{
				NamedFramebufferSamplePositionsfvAMDNative(framebuffer, numsamples, pixelindex, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedRenderbufferStorageMultisampleAdvancedAMDNative(uint renderbuffer, int samples, int storageSamples, GLInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, GLInternalFormat, int, int, void>)funcTable[29])(renderbuffer, samples, storageSamples, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, GLInternalFormat, int, int, void>)funcTable[29])(renderbuffer, samples, storageSamples, internalformat, width, height);
			#endif
		}

		public static void NamedRenderbufferStorageMultisampleAdvancedAMD(uint renderbuffer, int samples, int storageSamples, GLInternalFormat internalformat, int width, int height)
		{
			NamedRenderbufferStorageMultisampleAdvancedAMDNative(renderbuffer, samples, storageSamples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1i64NVNative(uint program, int location, long x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, long, void>)funcTable[30])(program, location, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, long, void>)funcTable[30])(program, location, x);
			#endif
		}

		public static void ProgramUniform1i64NV(uint program, int location, long x)
		{
			ProgramUniform1i64NVNative(program, location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1i64vNVNative(uint program, int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)funcTable[31])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[31])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1i64vNV(uint program, int location, int count, long* value)
		{
			ProgramUniform1i64vNVNative(program, location, count, value);
		}

		public static void ProgramUniform1i64vNV(uint program, int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				ProgramUniform1i64vNVNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1ui64NVNative(uint program, int location, ulong x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, ulong, void>)funcTable[32])(program, location, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, ulong, void>)funcTable[32])(program, location, x);
			#endif
		}

		public static void ProgramUniform1ui64NV(uint program, int location, ulong x)
		{
			ProgramUniform1ui64NVNative(program, location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1ui64vNVNative(uint program, int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)funcTable[33])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[33])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1ui64vNV(uint program, int location, int count, ulong* value)
		{
			ProgramUniform1ui64vNVNative(program, location, count, value);
		}

		public static void ProgramUniform1ui64vNV(uint program, int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				ProgramUniform1ui64vNVNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2i64NVNative(uint program, int location, long x, long y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, long, long, void>)funcTable[34])(program, location, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, long, long, void>)funcTable[34])(program, location, x, y);
			#endif
		}

		public static void ProgramUniform2i64NV(uint program, int location, long x, long y)
		{
			ProgramUniform2i64NVNative(program, location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2i64vNVNative(uint program, int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)funcTable[35])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[35])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2i64vNV(uint program, int location, int count, long* value)
		{
			ProgramUniform2i64vNVNative(program, location, count, value);
		}

		public static void ProgramUniform2i64vNV(uint program, int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				ProgramUniform2i64vNVNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2ui64NVNative(uint program, int location, ulong x, ulong y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, void>)funcTable[36])(program, location, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, void>)funcTable[36])(program, location, x, y);
			#endif
		}

		public static void ProgramUniform2ui64NV(uint program, int location, ulong x, ulong y)
		{
			ProgramUniform2ui64NVNative(program, location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2ui64vNVNative(uint program, int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)funcTable[37])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[37])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2ui64vNV(uint program, int location, int count, ulong* value)
		{
			ProgramUniform2ui64vNVNative(program, location, count, value);
		}

		public static void ProgramUniform2ui64vNV(uint program, int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				ProgramUniform2ui64vNVNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3i64NVNative(uint program, int location, long x, long y, long z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, long, long, long, void>)funcTable[38])(program, location, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, long, long, long, void>)funcTable[38])(program, location, x, y, z);
			#endif
		}

		public static void ProgramUniform3i64NV(uint program, int location, long x, long y, long z)
		{
			ProgramUniform3i64NVNative(program, location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3i64vNVNative(uint program, int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)funcTable[39])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[39])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3i64vNV(uint program, int location, int count, long* value)
		{
			ProgramUniform3i64vNVNative(program, location, count, value);
		}

		public static void ProgramUniform3i64vNV(uint program, int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				ProgramUniform3i64vNVNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3ui64NVNative(uint program, int location, ulong x, ulong y, ulong z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, ulong, void>)funcTable[40])(program, location, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, ulong, void>)funcTable[40])(program, location, x, y, z);
			#endif
		}

		public static void ProgramUniform3ui64NV(uint program, int location, ulong x, ulong y, ulong z)
		{
			ProgramUniform3ui64NVNative(program, location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3ui64vNVNative(uint program, int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)funcTable[41])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[41])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3ui64vNV(uint program, int location, int count, ulong* value)
		{
			ProgramUniform3ui64vNVNative(program, location, count, value);
		}

		public static void ProgramUniform3ui64vNV(uint program, int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				ProgramUniform3ui64vNVNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4i64NVNative(uint program, int location, long x, long y, long z, long w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, long, long, long, long, void>)funcTable[42])(program, location, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, long, long, long, long, void>)funcTable[42])(program, location, x, y, z, w);
			#endif
		}

		public static void ProgramUniform4i64NV(uint program, int location, long x, long y, long z, long w)
		{
			ProgramUniform4i64NVNative(program, location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4i64vNVNative(uint program, int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, long*, void>)funcTable[43])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[43])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4i64vNV(uint program, int location, int count, long* value)
		{
			ProgramUniform4i64vNVNative(program, location, count, value);
		}

		public static void ProgramUniform4i64vNV(uint program, int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				ProgramUniform4i64vNVNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4ui64NVNative(uint program, int location, ulong x, ulong y, ulong z, ulong w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, ulong, ulong, void>)funcTable[44])(program, location, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, ulong, ulong, ulong, ulong, void>)funcTable[44])(program, location, x, y, z, w);
			#endif
		}

		public static void ProgramUniform4ui64NV(uint program, int location, ulong x, ulong y, ulong z, ulong w)
		{
			ProgramUniform4ui64NVNative(program, location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4ui64vNVNative(uint program, int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, ulong*, void>)funcTable[45])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[45])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4ui64vNV(uint program, int location, int count, ulong* value)
		{
			ProgramUniform4ui64vNVNative(program, location, count, value);
		}

		public static void ProgramUniform4ui64vNV(uint program, int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				ProgramUniform4ui64vNVNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void QueryObjectParameteruiAMDNative(GLQueryTarget target, uint id, GLEnum pname, GLOcclusionQueryEventMaskAMD param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLQueryTarget, uint, GLEnum, GLOcclusionQueryEventMaskAMD, void>)funcTable[46])(target, id, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLQueryTarget, uint, GLEnum, GLOcclusionQueryEventMaskAMD, void>)funcTable[46])(target, id, pname, param);
			#endif
		}

		public static void QueryObjectParameteruiAMD(GLQueryTarget target, uint id, GLEnum pname, GLOcclusionQueryEventMaskAMD param)
		{
			QueryObjectParameteruiAMDNative(target, id, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RenderbufferStorageMultisampleAdvancedAMDNative(GLRenderbufferTarget target, int samples, int storageSamples, GLInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, int, int, GLInternalFormat, int, int, void>)funcTable[47])(target, samples, storageSamples, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, int, int, GLInternalFormat, int, int, void>)funcTable[47])(target, samples, storageSamples, internalformat, width, height);
			#endif
		}

		public static void RenderbufferStorageMultisampleAdvancedAMD(GLRenderbufferTarget target, int samples, int storageSamples, GLInternalFormat internalformat, int width, int height)
		{
			RenderbufferStorageMultisampleAdvancedAMDNative(target, samples, storageSamples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SelectPerfMonitorCountersAMDNative(uint monitor, byte enable, uint group, int numCounters, uint* counterList)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte, uint, int, uint*, void>)funcTable[48])(monitor, enable, group, numCounters, counterList);
			#else
			((delegate* unmanaged[Cdecl]<uint, byte, uint, int, nint, void>)funcTable[48])(monitor, enable, group, numCounters, (nint)counterList);
			#endif
		}

		public static void SelectPerfMonitorCountersAMD(uint monitor, byte enable, uint group, int numCounters, uint* counterList)
		{
			SelectPerfMonitorCountersAMDNative(monitor, enable, group, numCounters, counterList);
		}

		public static void SelectPerfMonitorCountersAMD(uint monitor, byte enable, uint group, int numCounters, ref uint counterList)
		{
			fixed (uint* pcounterList0 = &counterList)
			{
				SelectPerfMonitorCountersAMDNative(monitor, enable, group, numCounters, pcounterList0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetMultisamplefvAMDNative(GLEnum pname, uint index, float* val)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, uint, float*, void>)funcTable[49])(pname, index, val);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, uint, nint, void>)funcTable[49])(pname, index, (nint)val);
			#endif
		}

		public static void SetMultisamplefvAMD(GLEnum pname, uint index, float* val)
		{
			SetMultisamplefvAMDNative(pname, index, val);
		}

		public static void SetMultisamplefvAMD(GLEnum pname, uint index, ref float val)
		{
			fixed (float* pval0 = &val)
			{
				SetMultisamplefvAMDNative(pname, index, pval0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void StencilOpValueAMDNative(GLTriangleFace face, uint value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTriangleFace, uint, void>)funcTable[50])(face, value);
			#else
			((delegate* unmanaged[Cdecl]<GLTriangleFace, uint, void>)funcTable[50])(face, value);
			#endif
		}

		public static void StencilOpValueAMD(GLTriangleFace face, uint value)
		{
			StencilOpValueAMDNative(face, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TessellationFactorAMDNative(float factor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[51])(factor);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[51])(factor);
			#endif
		}

		public static void TessellationFactorAMD(float factor)
		{
			TessellationFactorAMDNative(factor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TessellationModeAMDNative(GLEnum mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, void>)funcTable[52])(mode);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, void>)funcTable[52])(mode);
			#endif
		}

		public static void TessellationModeAMD(GLEnum mode)
		{
			TessellationModeAMDNative(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorageSparseAMDNative(GLTextureTarget target, GLSizedInternalFormat internalFormat, int width, int height, int depth, int layers, GLTextureStorageMaskAMD flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, int, int, int, int, GLTextureStorageMaskAMD, void>)funcTable[53])(target, internalFormat, width, height, depth, layers, flags);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, int, int, int, int, GLTextureStorageMaskAMD, void>)funcTable[53])(target, internalFormat, width, height, depth, layers, flags);
			#endif
		}

		public static void TexStorageSparseAMD(GLTextureTarget target, GLSizedInternalFormat internalFormat, int width, int height, int depth, int layers, GLTextureStorageMaskAMD flags)
		{
			TexStorageSparseAMDNative(target, internalFormat, width, height, depth, layers, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorageSparseAMDNative(uint texture, GLEnum target, GLSizedInternalFormat internalFormat, int width, int height, int depth, int layers, GLTextureStorageMaskAMD flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, GLSizedInternalFormat, int, int, int, int, GLTextureStorageMaskAMD, void>)funcTable[54])(texture, target, internalFormat, width, height, depth, layers, flags);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, GLSizedInternalFormat, int, int, int, int, GLTextureStorageMaskAMD, void>)funcTable[54])(texture, target, internalFormat, width, height, depth, layers, flags);
			#endif
		}

		public static void TextureStorageSparseAMD(uint texture, GLEnum target, GLSizedInternalFormat internalFormat, int width, int height, int depth, int layers, GLTextureStorageMaskAMD flags)
		{
			TextureStorageSparseAMDNative(texture, target, internalFormat, width, height, depth, layers, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1i64NVNative(int location, long x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, long, void>)funcTable[55])(location, x);
			#else
			((delegate* unmanaged[Cdecl]<int, long, void>)funcTable[55])(location, x);
			#endif
		}

		public static void Uniform1i64NV(int location, long x)
		{
			Uniform1i64NVNative(location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1i64vNVNative(int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, long*, void>)funcTable[56])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[56])(location, count, (nint)value);
			#endif
		}

		public static void Uniform1i64vNV(int location, int count, long* value)
		{
			Uniform1i64vNVNative(location, count, value);
		}

		public static void Uniform1i64vNV(int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				Uniform1i64vNVNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1ui64NVNative(int location, ulong x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ulong, void>)funcTable[57])(location, x);
			#else
			((delegate* unmanaged[Cdecl]<int, ulong, void>)funcTable[57])(location, x);
			#endif
		}

		public static void Uniform1ui64NV(int location, ulong x)
		{
			Uniform1ui64NVNative(location, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform1ui64vNVNative(int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)funcTable[58])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[58])(location, count, (nint)value);
			#endif
		}

		public static void Uniform1ui64vNV(int location, int count, ulong* value)
		{
			Uniform1ui64vNVNative(location, count, value);
		}

		public static void Uniform1ui64vNV(int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				Uniform1ui64vNVNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform2i64NVNative(int location, long x, long y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, long, long, void>)funcTable[59])(location, x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, long, long, void>)funcTable[59])(location, x, y);
			#endif
		}

		public static void Uniform2i64NV(int location, long x, long y)
		{
			Uniform2i64NVNative(location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform2i64vNVNative(int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, long*, void>)funcTable[60])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[60])(location, count, (nint)value);
			#endif
		}

		public static void Uniform2i64vNV(int location, int count, long* value)
		{
			Uniform2i64vNVNative(location, count, value);
		}

		public static void Uniform2i64vNV(int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				Uniform2i64vNVNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform2ui64NVNative(int location, ulong x, ulong y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ulong, ulong, void>)funcTable[61])(location, x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, ulong, ulong, void>)funcTable[61])(location, x, y);
			#endif
		}

		public static void Uniform2ui64NV(int location, ulong x, ulong y)
		{
			Uniform2ui64NVNative(location, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform2ui64vNVNative(int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)funcTable[62])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[62])(location, count, (nint)value);
			#endif
		}

		public static void Uniform2ui64vNV(int location, int count, ulong* value)
		{
			Uniform2ui64vNVNative(location, count, value);
		}

		public static void Uniform2ui64vNV(int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				Uniform2ui64vNVNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform3i64NVNative(int location, long x, long y, long z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, long, long, long, void>)funcTable[63])(location, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, long, long, long, void>)funcTable[63])(location, x, y, z);
			#endif
		}

		public static void Uniform3i64NV(int location, long x, long y, long z)
		{
			Uniform3i64NVNative(location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform3i64vNVNative(int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, long*, void>)funcTable[64])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[64])(location, count, (nint)value);
			#endif
		}

		public static void Uniform3i64vNV(int location, int count, long* value)
		{
			Uniform3i64vNVNative(location, count, value);
		}

		public static void Uniform3i64vNV(int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				Uniform3i64vNVNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform3ui64NVNative(int location, ulong x, ulong y, ulong z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong, void>)funcTable[65])(location, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong, void>)funcTable[65])(location, x, y, z);
			#endif
		}

		public static void Uniform3ui64NV(int location, ulong x, ulong y, ulong z)
		{
			Uniform3ui64NVNative(location, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform3ui64vNVNative(int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)funcTable[66])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[66])(location, count, (nint)value);
			#endif
		}

		public static void Uniform3ui64vNV(int location, int count, ulong* value)
		{
			Uniform3ui64vNVNative(location, count, value);
		}

		public static void Uniform3ui64vNV(int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				Uniform3ui64vNVNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform4i64NVNative(int location, long x, long y, long z, long w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, long, long, long, long, void>)funcTable[67])(location, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<int, long, long, long, long, void>)funcTable[67])(location, x, y, z, w);
			#endif
		}

		public static void Uniform4i64NV(int location, long x, long y, long z, long w)
		{
			Uniform4i64NVNative(location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform4i64vNVNative(int location, int count, long* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, long*, void>)funcTable[68])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[68])(location, count, (nint)value);
			#endif
		}

		public static void Uniform4i64vNV(int location, int count, long* value)
		{
			Uniform4i64vNVNative(location, count, value);
		}

		public static void Uniform4i64vNV(int location, int count, ref long value)
		{
			fixed (long* pvalue0 = &value)
			{
				Uniform4i64vNVNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform4ui64NVNative(int location, ulong x, ulong y, ulong z, ulong w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong, ulong, void>)funcTable[69])(location, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<int, ulong, ulong, ulong, ulong, void>)funcTable[69])(location, x, y, z, w);
			#endif
		}

		public static void Uniform4ui64NV(int location, ulong x, ulong y, ulong z, ulong w)
		{
			Uniform4ui64NVNative(location, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Uniform4ui64vNVNative(int location, int count, ulong* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, ulong*, void>)funcTable[70])(location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[70])(location, count, (nint)value);
			#endif
		}

		public static void Uniform4ui64vNV(int location, int count, ulong* value)
		{
			Uniform4ui64vNVNative(location, count, value);
		}

		public static void Uniform4ui64vNV(int location, int count, ref ulong value)
		{
			fixed (ulong* pvalue0 = &value)
			{
				Uniform4ui64vNVNative(location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribParameteriAMDNative(uint index, GLEnum pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, int, void>)funcTable[71])(index, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, int, void>)funcTable[71])(index, pname, param);
			#endif
		}

		public static void VertexAttribParameteriAMD(uint index, GLEnum pname, int param)
		{
			VertexAttribParameteriAMDNative(index, pname, param);
		}

	}
}
