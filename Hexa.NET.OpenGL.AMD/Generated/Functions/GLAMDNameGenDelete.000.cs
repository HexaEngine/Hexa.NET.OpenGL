// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.AMD
{
	public unsafe partial class GLAMDNameGenDelete
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DeleteNamesAMDNative(GLEnum identifier, uint num, uint* names)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, uint, uint*, void>)funcTable[0])(identifier, num, names);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, uint, nint, void>)funcTable[0])(identifier, num, (nint)names);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_name_gen_delete</remarks>
		public void DeleteNamesAMD(GLEnum identifier, uint num, uint* names)
		{
			DeleteNamesAMDNative(identifier, num, names);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_name_gen_delete</remarks>
		public void DeleteNamesAMD(GLEnum identifier, uint num, Span<uint> names)
		{
			fixed (uint* pnames0 = names)
			{
				DeleteNamesAMDNative(identifier, num, pnames0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_name_gen_delete</remarks>
		public void DeleteNamesAMD(GLEnum identifier, uint num, ref uint names)
		{
			fixed (uint* pnames0 = &names)
			{
				DeleteNamesAMDNative(identifier, num, pnames0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GenNamesAMDNative(GLEnum identifier, uint num, uint* names)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, uint, uint*, void>)funcTable[1])(identifier, num, names);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, uint, nint, void>)funcTable[1])(identifier, num, (nint)names);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_name_gen_delete</remarks>
		public void GenNamesAMD(GLEnum identifier, uint num, uint* names)
		{
			GenNamesAMDNative(identifier, num, names);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_name_gen_delete</remarks>
		public void GenNamesAMD(GLEnum identifier, uint num, Span<uint> names)
		{
			fixed (uint* pnames0 = names)
			{
				GenNamesAMDNative(identifier, num, pnames0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_name_gen_delete</remarks>
		public void GenNamesAMD(GLEnum identifier, uint num, ref uint names)
		{
			fixed (uint* pnames0 = &names)
			{
				GenNamesAMDNative(identifier, num, pnames0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal byte IsNameAMDNative(GLEnum identifier, uint name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLEnum, uint, byte>)funcTable[2])(identifier, name);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<GLEnum, uint, byte>)funcTable[2])(identifier, name);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_name_gen_delete</remarks>
		public bool IsNameAMD(GLEnum identifier, uint name)
		{
			byte ret = IsNameAMDNative(identifier, name);
			return ret != 0;
		}

	}
}
