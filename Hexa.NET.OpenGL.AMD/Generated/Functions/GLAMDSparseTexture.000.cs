// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.AMD
{
	public static unsafe partial class GLAMDSparseTexture
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorageSparseAMDNative(GLTextureTarget target, GLSizedInternalFormat internalFormat, int width, int height, int depth, int layers, GLTextureStorageMaskAMD flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, int, int, int, int, GLTextureStorageMaskAMD, void>)funcTable[0])(target, internalFormat, width, height, depth, layers, flags);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, int, int, int, int, GLTextureStorageMaskAMD, void>)funcTable[0])(target, internalFormat, width, height, depth, layers, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_sparse_texture</remarks>
		public static void TexStorageSparseAMD(GLTextureTarget target, GLSizedInternalFormat internalFormat, int width, int height, int depth, int layers, GLTextureStorageMaskAMD flags)
		{
			TexStorageSparseAMDNative(target, internalFormat, width, height, depth, layers, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureStorageSparseAMDNative(uint texture, GLEnum target, GLSizedInternalFormat internalFormat, int width, int height, int depth, int layers, GLTextureStorageMaskAMD flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, GLSizedInternalFormat, int, int, int, int, GLTextureStorageMaskAMD, void>)funcTable[1])(texture, target, internalFormat, width, height, depth, layers, flags);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, GLSizedInternalFormat, int, int, int, int, GLTextureStorageMaskAMD, void>)funcTable[1])(texture, target, internalFormat, width, height, depth, layers, flags);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_AMD_sparse_texture</remarks>
		public static void TextureStorageSparseAMD(uint texture, GLEnum target, GLSizedInternalFormat internalFormat, int width, int height, int depth, int layers, GLTextureStorageMaskAMD flags)
		{
			TextureStorageSparseAMDNative(texture, target, internalFormat, width, height, depth, layers, flags);
		}

	}
}
