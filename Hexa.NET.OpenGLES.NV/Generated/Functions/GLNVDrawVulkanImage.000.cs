// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGLES.NV
{
	public unsafe partial class GLNVDrawVulkanImage
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DrawVkImageNVNative(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, uint, float, float, float, float, float, float, float, float, float, void>)funcTable[0])(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
			#else
			((delegate* unmanaged[Cdecl]<ulong, uint, float, float, float, float, float, float, float, float, float, void>)funcTable[0])(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_draw_vulkan_image</remarks>
		public void DrawVkImageNV(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
		{
			DrawVkImageNVNative(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal GLVulkanProcNV GetVkProcAddrNVNative(byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, GLVulkanProcNV>)funcTable[1])(name);
			#else
			return (GLVulkanProcNV)((delegate* unmanaged[Cdecl]<nint, GLVulkanProcNV>)funcTable[1])((nint)name);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_draw_vulkan_image</remarks>
		public GLVulkanProcNV GetVkProcAddrNV(byte* name)
		{
			GLVulkanProcNV ret = GetVkProcAddrNVNative(name);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_draw_vulkan_image</remarks>
		public GLVulkanProcNV GetVkProcAddrNV(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			GLVulkanProcNV ret = GetVkProcAddrNVNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_draw_vulkan_image</remarks>
		public GLVulkanProcNV GetVkProcAddrNV(Span<byte> name)
		{
			fixed (byte* pname0 = name)
			{
				GLVulkanProcNV ret = GetVkProcAddrNVNative(pname0);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_draw_vulkan_image</remarks>
		public GLVulkanProcNV GetVkProcAddrNV(ref byte name)
		{
			fixed (byte* pname0 = &name)
			{
				GLVulkanProcNV ret = GetVkProcAddrNVNative(pname0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void WaitVkSemaphoreNVNative(ulong vkSemaphore)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[2])(vkSemaphore);
			#else
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[2])(vkSemaphore);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_draw_vulkan_image</remarks>
		public void WaitVkSemaphoreNV(ulong vkSemaphore)
		{
			WaitVkSemaphoreNVNative(vkSemaphore);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void SignalVkSemaphoreNVNative(ulong vkSemaphore)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[3])(vkSemaphore);
			#else
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[3])(vkSemaphore);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_draw_vulkan_image</remarks>
		public void SignalVkSemaphoreNV(ulong vkSemaphore)
		{
			SignalVkSemaphoreNVNative(vkSemaphore);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void SignalVkFenceNVNative(ulong vkFence)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[4])(vkFence);
			#else
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[4])(vkFence);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_draw_vulkan_image</remarks>
		public void SignalVkFenceNV(ulong vkFence)
		{
			SignalVkFenceNVNative(vkFence);
		}

	}
}
