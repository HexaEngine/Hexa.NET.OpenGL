// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL
{
	public static unsafe partial class GL
	{

		public static void MultiTexCoord1s(GLTextureUnit target, short s)
		{
			MultiTexCoord1sNative(target, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord1svNative(GLTextureUnit target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short*, void>)funcTable[518])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[518])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord1sv(GLTextureUnit target, short* v)
		{
			MultiTexCoord1svNative(target, v);
		}

		public static void MultiTexCoord1sv(GLTextureUnit target, Span<short> v)
		{
			fixed (short* pv0 = v)
			{
				MultiTexCoord1svNative(target, pv0);
			}
		}

		public static void MultiTexCoord1sv(GLTextureUnit target, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				MultiTexCoord1svNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2dNative(GLTextureUnit target, double s, double t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double, double, void>)funcTable[519])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double, double, void>)funcTable[519])(target, s, t);
			#endif
		}

		public static void MultiTexCoord2d(GLTextureUnit target, double s, double t)
		{
			MultiTexCoord2dNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2dvNative(GLTextureUnit target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double*, void>)funcTable[520])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[520])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord2dv(GLTextureUnit target, double* v)
		{
			MultiTexCoord2dvNative(target, v);
		}

		public static void MultiTexCoord2dv(GLTextureUnit target, Span<double> v)
		{
			fixed (double* pv0 = v)
			{
				MultiTexCoord2dvNative(target, pv0);
			}
		}

		public static void MultiTexCoord2dv(GLTextureUnit target, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				MultiTexCoord2dvNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2fNative(GLTextureUnit target, float s, float t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float, float, void>)funcTable[521])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float, float, void>)funcTable[521])(target, s, t);
			#endif
		}

		public static void MultiTexCoord2f(GLTextureUnit target, float s, float t)
		{
			MultiTexCoord2fNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2fvNative(GLTextureUnit target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float*, void>)funcTable[522])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[522])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord2fv(GLTextureUnit target, float* v)
		{
			MultiTexCoord2fvNative(target, v);
		}

		public static void MultiTexCoord2fv(GLTextureUnit target, Span<float> v)
		{
			fixed (float* pv0 = v)
			{
				MultiTexCoord2fvNative(target, pv0);
			}
		}

		public static void MultiTexCoord2fv(GLTextureUnit target, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				MultiTexCoord2fvNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2iNative(GLTextureUnit target, int s, int t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, void>)funcTable[523])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, void>)funcTable[523])(target, s, t);
			#endif
		}

		public static void MultiTexCoord2i(GLTextureUnit target, int s, int t)
		{
			MultiTexCoord2iNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2ivNative(GLTextureUnit target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int*, void>)funcTable[524])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[524])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord2iv(GLTextureUnit target, int* v)
		{
			MultiTexCoord2ivNative(target, v);
		}

		public static void MultiTexCoord2iv(GLTextureUnit target, Span<int> v)
		{
			fixed (int* pv0 = v)
			{
				MultiTexCoord2ivNative(target, pv0);
			}
		}

		public static void MultiTexCoord2iv(GLTextureUnit target, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				MultiTexCoord2ivNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2sNative(GLTextureUnit target, short s, short t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short, short, void>)funcTable[525])(target, s, t);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short, short, void>)funcTable[525])(target, s, t);
			#endif
		}

		public static void MultiTexCoord2s(GLTextureUnit target, short s, short t)
		{
			MultiTexCoord2sNative(target, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2svNative(GLTextureUnit target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short*, void>)funcTable[526])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[526])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord2sv(GLTextureUnit target, short* v)
		{
			MultiTexCoord2svNative(target, v);
		}

		public static void MultiTexCoord2sv(GLTextureUnit target, Span<short> v)
		{
			fixed (short* pv0 = v)
			{
				MultiTexCoord2svNative(target, pv0);
			}
		}

		public static void MultiTexCoord2sv(GLTextureUnit target, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				MultiTexCoord2svNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3dNative(GLTextureUnit target, double s, double t, double r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double, double, double, void>)funcTable[527])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double, double, double, void>)funcTable[527])(target, s, t, r);
			#endif
		}

		public static void MultiTexCoord3d(GLTextureUnit target, double s, double t, double r)
		{
			MultiTexCoord3dNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3dvNative(GLTextureUnit target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double*, void>)funcTable[528])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[528])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord3dv(GLTextureUnit target, double* v)
		{
			MultiTexCoord3dvNative(target, v);
		}

		public static void MultiTexCoord3dv(GLTextureUnit target, Span<double> v)
		{
			fixed (double* pv0 = v)
			{
				MultiTexCoord3dvNative(target, pv0);
			}
		}

		public static void MultiTexCoord3dv(GLTextureUnit target, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				MultiTexCoord3dvNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3fNative(GLTextureUnit target, float s, float t, float r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float, float, float, void>)funcTable[529])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float, float, float, void>)funcTable[529])(target, s, t, r);
			#endif
		}

		public static void MultiTexCoord3f(GLTextureUnit target, float s, float t, float r)
		{
			MultiTexCoord3fNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3fvNative(GLTextureUnit target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float*, void>)funcTable[530])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[530])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord3fv(GLTextureUnit target, float* v)
		{
			MultiTexCoord3fvNative(target, v);
		}

		public static void MultiTexCoord3fv(GLTextureUnit target, Span<float> v)
		{
			fixed (float* pv0 = v)
			{
				MultiTexCoord3fvNative(target, pv0);
			}
		}

		public static void MultiTexCoord3fv(GLTextureUnit target, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				MultiTexCoord3fvNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3iNative(GLTextureUnit target, int s, int t, int r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, int, void>)funcTable[531])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, int, void>)funcTable[531])(target, s, t, r);
			#endif
		}

		public static void MultiTexCoord3i(GLTextureUnit target, int s, int t, int r)
		{
			MultiTexCoord3iNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3ivNative(GLTextureUnit target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int*, void>)funcTable[532])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[532])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord3iv(GLTextureUnit target, int* v)
		{
			MultiTexCoord3ivNative(target, v);
		}

		public static void MultiTexCoord3iv(GLTextureUnit target, Span<int> v)
		{
			fixed (int* pv0 = v)
			{
				MultiTexCoord3ivNative(target, pv0);
			}
		}

		public static void MultiTexCoord3iv(GLTextureUnit target, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				MultiTexCoord3ivNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3sNative(GLTextureUnit target, short s, short t, short r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short, short, short, void>)funcTable[533])(target, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short, short, short, void>)funcTable[533])(target, s, t, r);
			#endif
		}

		public static void MultiTexCoord3s(GLTextureUnit target, short s, short t, short r)
		{
			MultiTexCoord3sNative(target, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3svNative(GLTextureUnit target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short*, void>)funcTable[534])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[534])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord3sv(GLTextureUnit target, short* v)
		{
			MultiTexCoord3svNative(target, v);
		}

		public static void MultiTexCoord3sv(GLTextureUnit target, Span<short> v)
		{
			fixed (short* pv0 = v)
			{
				MultiTexCoord3svNative(target, pv0);
			}
		}

		public static void MultiTexCoord3sv(GLTextureUnit target, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				MultiTexCoord3svNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4dNative(GLTextureUnit target, double s, double t, double r, double q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double, double, double, double, void>)funcTable[535])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double, double, double, double, void>)funcTable[535])(target, s, t, r, q);
			#endif
		}

		public static void MultiTexCoord4d(GLTextureUnit target, double s, double t, double r, double q)
		{
			MultiTexCoord4dNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4dvNative(GLTextureUnit target, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, double*, void>)funcTable[536])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[536])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord4dv(GLTextureUnit target, double* v)
		{
			MultiTexCoord4dvNative(target, v);
		}

		public static void MultiTexCoord4dv(GLTextureUnit target, Span<double> v)
		{
			fixed (double* pv0 = v)
			{
				MultiTexCoord4dvNative(target, pv0);
			}
		}

		public static void MultiTexCoord4dv(GLTextureUnit target, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				MultiTexCoord4dvNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4fNative(GLTextureUnit target, float s, float t, float r, float q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float, float, float, float, void>)funcTable[537])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float, float, float, float, void>)funcTable[537])(target, s, t, r, q);
			#endif
		}

		public static void MultiTexCoord4f(GLTextureUnit target, float s, float t, float r, float q)
		{
			MultiTexCoord4fNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4fvNative(GLTextureUnit target, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, float*, void>)funcTable[538])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[538])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord4fv(GLTextureUnit target, float* v)
		{
			MultiTexCoord4fvNative(target, v);
		}

		public static void MultiTexCoord4fv(GLTextureUnit target, Span<float> v)
		{
			fixed (float* pv0 = v)
			{
				MultiTexCoord4fvNative(target, pv0);
			}
		}

		public static void MultiTexCoord4fv(GLTextureUnit target, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				MultiTexCoord4fvNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4iNative(GLTextureUnit target, int s, int t, int r, int q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, int, int, void>)funcTable[539])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, int, int, void>)funcTable[539])(target, s, t, r, q);
			#endif
		}

		public static void MultiTexCoord4i(GLTextureUnit target, int s, int t, int r, int q)
		{
			MultiTexCoord4iNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4ivNative(GLTextureUnit target, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int*, void>)funcTable[540])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[540])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord4iv(GLTextureUnit target, int* v)
		{
			MultiTexCoord4ivNative(target, v);
		}

		public static void MultiTexCoord4iv(GLTextureUnit target, Span<int> v)
		{
			fixed (int* pv0 = v)
			{
				MultiTexCoord4ivNative(target, pv0);
			}
		}

		public static void MultiTexCoord4iv(GLTextureUnit target, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				MultiTexCoord4ivNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4sNative(GLTextureUnit target, short s, short t, short r, short q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short, short, short, short, void>)funcTable[541])(target, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short, short, short, short, void>)funcTable[541])(target, s, t, r, q);
			#endif
		}

		public static void MultiTexCoord4s(GLTextureUnit target, short s, short t, short r, short q)
		{
			MultiTexCoord4sNative(target, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4svNative(GLTextureUnit target, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, short*, void>)funcTable[542])(target, v);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[542])(target, (nint)v);
			#endif
		}

		public static void MultiTexCoord4sv(GLTextureUnit target, short* v)
		{
			MultiTexCoord4svNative(target, v);
		}

		public static void MultiTexCoord4sv(GLTextureUnit target, Span<short> v)
		{
			fixed (short* pv0 = v)
			{
				MultiTexCoord4svNative(target, pv0);
			}
		}

		public static void MultiTexCoord4sv(GLTextureUnit target, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				MultiTexCoord4svNative(target, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoordP1uiNative(GLTextureUnit texture, GLTexCoordPointerType type, uint coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, uint, void>)funcTable[543])(texture, type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, uint, void>)funcTable[543])(texture, type, coords);
			#endif
		}

		public static void MultiTexCoordP1ui(GLTextureUnit texture, GLTexCoordPointerType type, uint coords)
		{
			MultiTexCoordP1uiNative(texture, type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoordP1uivNative(GLTextureUnit texture, GLTexCoordPointerType type, uint* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, uint*, void>)funcTable[544])(texture, type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, nint, void>)funcTable[544])(texture, type, (nint)coords);
			#endif
		}

		public static void MultiTexCoordP1uiv(GLTextureUnit texture, GLTexCoordPointerType type, uint* coords)
		{
			MultiTexCoordP1uivNative(texture, type, coords);
		}

		public static void MultiTexCoordP1uiv(GLTextureUnit texture, GLTexCoordPointerType type, Span<uint> coords)
		{
			fixed (uint* pcoords0 = coords)
			{
				MultiTexCoordP1uivNative(texture, type, pcoords0);
			}
		}

		public static void MultiTexCoordP1uiv(GLTextureUnit texture, GLTexCoordPointerType type, ref uint coords)
		{
			fixed (uint* pcoords0 = &coords)
			{
				MultiTexCoordP1uivNative(texture, type, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoordP2uiNative(GLTextureUnit texture, GLTexCoordPointerType type, uint coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, uint, void>)funcTable[545])(texture, type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, uint, void>)funcTable[545])(texture, type, coords);
			#endif
		}

		public static void MultiTexCoordP2ui(GLTextureUnit texture, GLTexCoordPointerType type, uint coords)
		{
			MultiTexCoordP2uiNative(texture, type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoordP2uivNative(GLTextureUnit texture, GLTexCoordPointerType type, uint* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, uint*, void>)funcTable[546])(texture, type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, nint, void>)funcTable[546])(texture, type, (nint)coords);
			#endif
		}

		public static void MultiTexCoordP2uiv(GLTextureUnit texture, GLTexCoordPointerType type, uint* coords)
		{
			MultiTexCoordP2uivNative(texture, type, coords);
		}

		public static void MultiTexCoordP2uiv(GLTextureUnit texture, GLTexCoordPointerType type, Span<uint> coords)
		{
			fixed (uint* pcoords0 = coords)
			{
				MultiTexCoordP2uivNative(texture, type, pcoords0);
			}
		}

		public static void MultiTexCoordP2uiv(GLTextureUnit texture, GLTexCoordPointerType type, ref uint coords)
		{
			fixed (uint* pcoords0 = &coords)
			{
				MultiTexCoordP2uivNative(texture, type, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoordP3uiNative(GLTextureUnit texture, GLTexCoordPointerType type, uint coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, uint, void>)funcTable[547])(texture, type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, uint, void>)funcTable[547])(texture, type, coords);
			#endif
		}

		public static void MultiTexCoordP3ui(GLTextureUnit texture, GLTexCoordPointerType type, uint coords)
		{
			MultiTexCoordP3uiNative(texture, type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoordP3uivNative(GLTextureUnit texture, GLTexCoordPointerType type, uint* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, uint*, void>)funcTable[548])(texture, type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, nint, void>)funcTable[548])(texture, type, (nint)coords);
			#endif
		}

		public static void MultiTexCoordP3uiv(GLTextureUnit texture, GLTexCoordPointerType type, uint* coords)
		{
			MultiTexCoordP3uivNative(texture, type, coords);
		}

		public static void MultiTexCoordP3uiv(GLTextureUnit texture, GLTexCoordPointerType type, Span<uint> coords)
		{
			fixed (uint* pcoords0 = coords)
			{
				MultiTexCoordP3uivNative(texture, type, pcoords0);
			}
		}

		public static void MultiTexCoordP3uiv(GLTextureUnit texture, GLTexCoordPointerType type, ref uint coords)
		{
			fixed (uint* pcoords0 = &coords)
			{
				MultiTexCoordP3uivNative(texture, type, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoordP4uiNative(GLTextureUnit texture, GLTexCoordPointerType type, uint coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, uint, void>)funcTable[549])(texture, type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, uint, void>)funcTable[549])(texture, type, coords);
			#endif
		}

		public static void MultiTexCoordP4ui(GLTextureUnit texture, GLTexCoordPointerType type, uint coords)
		{
			MultiTexCoordP4uiNative(texture, type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoordP4uivNative(GLTextureUnit texture, GLTexCoordPointerType type, uint* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, uint*, void>)funcTable[550])(texture, type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, GLTexCoordPointerType, nint, void>)funcTable[550])(texture, type, (nint)coords);
			#endif
		}

		public static void MultiTexCoordP4uiv(GLTextureUnit texture, GLTexCoordPointerType type, uint* coords)
		{
			MultiTexCoordP4uivNative(texture, type, coords);
		}

		public static void MultiTexCoordP4uiv(GLTextureUnit texture, GLTexCoordPointerType type, Span<uint> coords)
		{
			fixed (uint* pcoords0 = coords)
			{
				MultiTexCoordP4uivNative(texture, type, pcoords0);
			}
		}

		public static void MultiTexCoordP4uiv(GLTextureUnit texture, GLTexCoordPointerType type, ref uint coords)
		{
			fixed (uint* pcoords0 = &coords)
			{
				MultiTexCoordP4uivNative(texture, type, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedBufferDataNative(uint buffer, nint size, void* data, GLVertexBufferObjectUsage usage)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, nint, void*, GLVertexBufferObjectUsage, void>)funcTable[551])(buffer, size, data, usage);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, nint, GLVertexBufferObjectUsage, void>)funcTable[551])(buffer, size, (nint)data, usage);
			#endif
		}

		public static void NamedBufferData(uint buffer, nint size, void* data, GLVertexBufferObjectUsage usage)
		{
			NamedBufferDataNative(buffer, size, data, usage);
		}

		public static void NamedBufferData(uint buffer, nint size, nint data, GLVertexBufferObjectUsage usage)
		{
			NamedBufferDataNative(buffer, size, (void*)data, usage);
		}

		public static void NamedBufferData<TData>(uint buffer, nint size, Span<TData> data, GLVertexBufferObjectUsage usage) where TData : unmanaged
		{
			fixed (TData* pdata0 = data)
			{
				NamedBufferDataNative(buffer, size, pdata0, usage);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedBufferStorageNative(uint buffer, nint size, void* data, GLBufferStorageMask flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, nint, void*, GLBufferStorageMask, void>)funcTable[552])(buffer, size, data, flags);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, nint, GLBufferStorageMask, void>)funcTable[552])(buffer, size, (nint)data, flags);
			#endif
		}

		public static void NamedBufferStorage(uint buffer, nint size, void* data, GLBufferStorageMask flags)
		{
			NamedBufferStorageNative(buffer, size, data, flags);
		}

		public static void NamedBufferStorage(uint buffer, nint size, nint data, GLBufferStorageMask flags)
		{
			NamedBufferStorageNative(buffer, size, (void*)data, flags);
		}

		public static void NamedBufferStorage<TData>(uint buffer, nint size, Span<TData> data, GLBufferStorageMask flags) where TData : unmanaged
		{
			fixed (TData* pdata0 = data)
			{
				NamedBufferStorageNative(buffer, size, pdata0, flags);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedBufferSubDataNative(uint buffer, nint offset, nint size, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, nint, nint, void*, void>)funcTable[553])(buffer, offset, size, data);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, nint, nint, void>)funcTable[553])(buffer, offset, size, (nint)data);
			#endif
		}

		public static void NamedBufferSubData(uint buffer, nint offset, nint size, void* data)
		{
			NamedBufferSubDataNative(buffer, offset, size, data);
		}

		public static void NamedBufferSubData(uint buffer, nint offset, nint size, nint data)
		{
			NamedBufferSubDataNative(buffer, offset, size, (void*)data);
		}

		public static void NamedBufferSubData<TData>(uint buffer, nint offset, nint size, Span<TData> data) where TData : unmanaged
		{
			fixed (TData* pdata0 = data)
			{
				NamedBufferSubDataNative(buffer, offset, size, pdata0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferDrawBufferNative(uint framebuffer, GLColorBuffer buf)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLColorBuffer, void>)funcTable[554])(framebuffer, buf);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLColorBuffer, void>)funcTable[554])(framebuffer, buf);
			#endif
		}

		public static void NamedFramebufferDrawBuffer(uint framebuffer, GLColorBuffer buf)
		{
			NamedFramebufferDrawBufferNative(framebuffer, buf);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferDrawBuffersNative(uint framebuffer, int n, GLColorBuffer bufs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLColorBuffer, void>)funcTable[555])(framebuffer, n, bufs);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLColorBuffer, void>)funcTable[555])(framebuffer, n, bufs);
			#endif
		}

		public static void NamedFramebufferDrawBuffers(uint framebuffer, int n, GLColorBuffer bufs)
		{
			NamedFramebufferDrawBuffersNative(framebuffer, n, bufs);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferParameteriNative(uint framebuffer, GLFramebufferParameterName pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferParameterName, int, void>)funcTable[556])(framebuffer, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferParameterName, int, void>)funcTable[556])(framebuffer, pname, param);
			#endif
		}

		public static void NamedFramebufferParameteri(uint framebuffer, GLFramebufferParameterName pname, int param)
		{
			NamedFramebufferParameteriNative(framebuffer, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferReadBufferNative(uint framebuffer, GLColorBuffer src)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLColorBuffer, void>)funcTable[557])(framebuffer, src);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLColorBuffer, void>)funcTable[557])(framebuffer, src);
			#endif
		}

		public static void NamedFramebufferReadBuffer(uint framebuffer, GLColorBuffer src)
		{
			NamedFramebufferReadBufferNative(framebuffer, src);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferRenderbufferNative(uint framebuffer, GLFramebufferAttachment attachment, GLRenderbufferTarget renderbuffertarget, uint renderbuffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, GLRenderbufferTarget, uint, void>)funcTable[558])(framebuffer, attachment, renderbuffertarget, renderbuffer);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, GLRenderbufferTarget, uint, void>)funcTable[558])(framebuffer, attachment, renderbuffertarget, renderbuffer);
			#endif
		}

		public static void NamedFramebufferRenderbuffer(uint framebuffer, GLFramebufferAttachment attachment, GLRenderbufferTarget renderbuffertarget, uint renderbuffer)
		{
			NamedFramebufferRenderbufferNative(framebuffer, attachment, renderbuffertarget, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferTextureNative(uint framebuffer, GLFramebufferAttachment attachment, uint texture, int level)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, uint, int, void>)funcTable[559])(framebuffer, attachment, texture, level);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, uint, int, void>)funcTable[559])(framebuffer, attachment, texture, level);
			#endif
		}

		public static void NamedFramebufferTexture(uint framebuffer, GLFramebufferAttachment attachment, uint texture, int level)
		{
			NamedFramebufferTextureNative(framebuffer, attachment, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedFramebufferTextureLayerNative(uint framebuffer, GLFramebufferAttachment attachment, uint texture, int level, int layer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, uint, int, int, void>)funcTable[560])(framebuffer, attachment, texture, level, layer);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLFramebufferAttachment, uint, int, int, void>)funcTable[560])(framebuffer, attachment, texture, level, layer);
			#endif
		}

		public static void NamedFramebufferTextureLayer(uint framebuffer, GLFramebufferAttachment attachment, uint texture, int level, int layer)
		{
			NamedFramebufferTextureLayerNative(framebuffer, attachment, texture, level, layer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedRenderbufferStorageNative(uint renderbuffer, GLInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLInternalFormat, int, int, void>)funcTable[561])(renderbuffer, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLInternalFormat, int, int, void>)funcTable[561])(renderbuffer, internalformat, width, height);
			#endif
		}

		public static void NamedRenderbufferStorage(uint renderbuffer, GLInternalFormat internalformat, int width, int height)
		{
			NamedRenderbufferStorageNative(renderbuffer, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NamedRenderbufferStorageMultisampleNative(uint renderbuffer, int samples, GLInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLInternalFormat, int, int, void>)funcTable[562])(renderbuffer, samples, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLInternalFormat, int, int, void>)funcTable[562])(renderbuffer, samples, internalformat, width, height);
			#endif
		}

		public static void NamedRenderbufferStorageMultisample(uint renderbuffer, int samples, GLInternalFormat internalformat, int width, int height)
		{
			NamedRenderbufferStorageMultisampleNative(renderbuffer, samples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NewListNative(uint list, GLListMode mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLListMode, void>)funcTable[563])(list, mode);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLListMode, void>)funcTable[563])(list, mode);
			#endif
		}

		public static void NewList(uint list, GLListMode mode)
		{
			NewListNative(list, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Normal3bNative(sbyte nx, sbyte ny, sbyte nz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)funcTable[564])(nx, ny, nz);
			#else
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)funcTable[564])(nx, ny, nz);
			#endif
		}

		public static void Normal3b(sbyte nx, sbyte ny, sbyte nz)
		{
			Normal3bNative(nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Normal3bvNative(sbyte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte*, void>)funcTable[565])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[565])((nint)v);
			#endif
		}

		public static void Normal3bv(sbyte* v)
		{
			Normal3bvNative(v);
		}

		public static void Normal3bv(Span<sbyte> v)
		{
			fixed (sbyte* pv0 = v)
			{
				Normal3bvNative(pv0);
			}
		}

		public static void Normal3bv(ref sbyte v)
		{
			fixed (sbyte* pv0 = &v)
			{
				Normal3bvNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Normal3dNative(double nx, double ny, double nz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[566])(nx, ny, nz);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[566])(nx, ny, nz);
			#endif
		}

		public static void Normal3d(double nx, double ny, double nz)
		{
			Normal3dNative(nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Normal3dvNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[567])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[567])((nint)v);
			#endif
		}

		public static void Normal3dv(double* v)
		{
			Normal3dvNative(v);
		}

		public static void Normal3dv(Span<double> v)
		{
			fixed (double* pv0 = v)
			{
				Normal3dvNative(pv0);
			}
		}

		public static void Normal3dv(ref double v)
		{
			fixed (double* pv0 = &v)
			{
				Normal3dvNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Normal3fNative(float nx, float ny, float nz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[568])(nx, ny, nz);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[568])(nx, ny, nz);
			#endif
		}

		public static void Normal3f(float nx, float ny, float nz)
		{
			Normal3fNative(nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Normal3fvNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[569])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[569])((nint)v);
			#endif
		}

		public static void Normal3fv(float* v)
		{
			Normal3fvNative(v);
		}

		public static void Normal3fv(Span<float> v)
		{
			fixed (float* pv0 = v)
			{
				Normal3fvNative(pv0);
			}
		}

		public static void Normal3fv(ref float v)
		{
			fixed (float* pv0 = &v)
			{
				Normal3fvNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Normal3iNative(int nx, int ny, int nz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[570])(nx, ny, nz);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[570])(nx, ny, nz);
			#endif
		}

		public static void Normal3i(int nx, int ny, int nz)
		{
			Normal3iNative(nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Normal3ivNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[571])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[571])((nint)v);
			#endif
		}

		public static void Normal3iv(int* v)
		{
			Normal3ivNative(v);
		}

		public static void Normal3iv(Span<int> v)
		{
			fixed (int* pv0 = v)
			{
				Normal3ivNative(pv0);
			}
		}

		public static void Normal3iv(ref int v)
		{
			fixed (int* pv0 = &v)
			{
				Normal3ivNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Normal3sNative(short nx, short ny, short nz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[572])(nx, ny, nz);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[572])(nx, ny, nz);
			#endif
		}

		public static void Normal3s(short nx, short ny, short nz)
		{
			Normal3sNative(nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Normal3svNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[573])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[573])((nint)v);
			#endif
		}

		public static void Normal3sv(short* v)
		{
			Normal3svNative(v);
		}

		public static void Normal3sv(Span<short> v)
		{
			fixed (short* pv0 = v)
			{
				Normal3svNative(pv0);
			}
		}

		public static void Normal3sv(ref short v)
		{
			fixed (short* pv0 = &v)
			{
				Normal3svNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NormalP3uiNative(GLNormalPointerType type, uint coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLNormalPointerType, uint, void>)funcTable[574])(type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLNormalPointerType, uint, void>)funcTable[574])(type, coords);
			#endif
		}

		public static void NormalP3ui(GLNormalPointerType type, uint coords)
		{
			NormalP3uiNative(type, coords);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NormalP3uivNative(GLNormalPointerType type, uint* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLNormalPointerType, uint*, void>)funcTable[575])(type, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLNormalPointerType, nint, void>)funcTable[575])(type, (nint)coords);
			#endif
		}

		public static void NormalP3uiv(GLNormalPointerType type, uint* coords)
		{
			NormalP3uivNative(type, coords);
		}

		public static void NormalP3uiv(GLNormalPointerType type, Span<uint> coords)
		{
			fixed (uint* pcoords0 = coords)
			{
				NormalP3uivNative(type, pcoords0);
			}
		}

		public static void NormalP3uiv(GLNormalPointerType type, ref uint coords)
		{
			fixed (uint* pcoords0 = &coords)
			{
				NormalP3uivNative(type, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void NormalPointerNative(GLNormalPointerType type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLNormalPointerType, int, void*, void>)funcTable[576])(type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<GLNormalPointerType, int, nint, void>)funcTable[576])(type, stride, (nint)pointer);
			#endif
		}

		public static void NormalPointer(GLNormalPointerType type, int stride, void* pointer)
		{
			NormalPointerNative(type, stride, pointer);
		}

		public static void NormalPointer(GLNormalPointerType type, int stride, nint pointer)
		{
			NormalPointerNative(type, stride, (void*)pointer);
		}

		public static void NormalPointer<TPointer>(GLNormalPointerType type, int stride, Span<TPointer> pointer) where TPointer : unmanaged
		{
			fixed (TPointer* ppointer0 = pointer)
			{
				NormalPointerNative(type, stride, ppointer0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ObjectLabelNative(GLObjectIdentifier identifier, uint name, int length, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLObjectIdentifier, uint, int, byte*, void>)funcTable[577])(identifier, name, length, label);
			#else
			((delegate* unmanaged[Cdecl]<GLObjectIdentifier, uint, int, nint, void>)funcTable[577])(identifier, name, length, (nint)label);
			#endif
		}

		public static void ObjectLabel(GLObjectIdentifier identifier, uint name, int length, byte* label)
		{
			ObjectLabelNative(identifier, name, length, label);
		}

		public static void ObjectLabel(GLObjectIdentifier identifier, uint name, int length, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ObjectLabelNative(identifier, name, length, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ObjectLabel(GLObjectIdentifier identifier, uint name, int length, Span<byte> label)
		{
			fixed (byte* plabel0 = label)
			{
				ObjectLabelNative(identifier, name, length, plabel0);
			}
		}

		public static void ObjectLabel(GLObjectIdentifier identifier, uint name, int length, ref byte label)
		{
			fixed (byte* plabel0 = &label)
			{
				ObjectLabelNative(identifier, name, length, plabel0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ObjectPtrLabelNative(void* ptr, int length, byte* label)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void*, int, byte*, void>)funcTable[578])(ptr, length, label);
			#else
			((delegate* unmanaged[Cdecl]<nint, int, nint, void>)funcTable[578])((nint)ptr, length, (nint)label);
			#endif
		}

		public static void ObjectPtrLabel(void* ptr, int length, byte* label)
		{
			ObjectPtrLabelNative(ptr, length, label);
		}

		public static void ObjectPtrLabel(nint ptr, int length, byte* label)
		{
			ObjectPtrLabelNative((void*)ptr, length, label);
		}

		public static void ObjectPtrLabel<TPtr>(Span<TPtr> ptr, int length, byte* label) where TPtr : unmanaged
		{
			fixed (TPtr* pptr0 = ptr)
			{
				ObjectPtrLabelNative(pptr0, length, label);
			}
		}

		public static void ObjectPtrLabel(void* ptr, int length, string label)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (label != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(label);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(label, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ObjectPtrLabelNative(ptr, length, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void ObjectPtrLabel(void* ptr, int length, Span<byte> label)
		{
			fixed (byte* plabel0 = label)
			{
				ObjectPtrLabelNative(ptr, length, plabel0);
			}
		}

		public static void ObjectPtrLabel(void* ptr, int length, ref byte label)
		{
			fixed (byte* plabel0 = &label)
			{
				ObjectPtrLabelNative(ptr, length, plabel0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void OrthoNative(double left, double right, double bottom, double top, double zNear, double zFar)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, void>)funcTable[579])(left, right, bottom, top, zNear, zFar);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, double, double, void>)funcTable[579])(left, right, bottom, top, zNear, zFar);
			#endif
		}

		public static void Ortho(double left, double right, double bottom, double top, double zNear, double zFar)
		{
			OrthoNative(left, right, bottom, top, zNear, zFar);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PassThroughNative(float token)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[580])(token);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[580])(token);
			#endif
		}

		public static void PassThrough(float token)
		{
			PassThroughNative(token);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PatchParameterfvNative(GLPatchParameterName pname, float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPatchParameterName, float*, void>)funcTable[581])(pname, values);
			#else
			((delegate* unmanaged[Cdecl]<GLPatchParameterName, nint, void>)funcTable[581])(pname, (nint)values);
			#endif
		}

		public static void PatchParameterfv(GLPatchParameterName pname, float* values)
		{
			PatchParameterfvNative(pname, values);
		}

		public static void PatchParameterfv(GLPatchParameterName pname, Span<float> values)
		{
			fixed (float* pvalues0 = values)
			{
				PatchParameterfvNative(pname, pvalues0);
			}
		}

		public static void PatchParameterfv(GLPatchParameterName pname, ref float values)
		{
			fixed (float* pvalues0 = &values)
			{
				PatchParameterfvNative(pname, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PatchParameteriNative(GLPatchParameterName pname, int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPatchParameterName, int, void>)funcTable[582])(pname, value);
			#else
			((delegate* unmanaged[Cdecl]<GLPatchParameterName, int, void>)funcTable[582])(pname, value);
			#endif
		}

		public static void PatchParameteri(GLPatchParameterName pname, int value)
		{
			PatchParameteriNative(pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PauseTransformFeedbackNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[583])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[583])();
			#endif
		}

		public static void PauseTransformFeedback()
		{
			PauseTransformFeedbackNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelMapfvNative(GLPixelMap map, int mapsize, float* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelMap, int, float*, void>)funcTable[584])(map, mapsize, values);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelMap, int, nint, void>)funcTable[584])(map, mapsize, (nint)values);
			#endif
		}

		public static void PixelMapfv(GLPixelMap map, int mapsize, float* values)
		{
			PixelMapfvNative(map, mapsize, values);
		}

		public static void PixelMapfv(GLPixelMap map, int mapsize, Span<float> values)
		{
			fixed (float* pvalues0 = values)
			{
				PixelMapfvNative(map, mapsize, pvalues0);
			}
		}

		public static void PixelMapfv(GLPixelMap map, int mapsize, ref float values)
		{
			fixed (float* pvalues0 = &values)
			{
				PixelMapfvNative(map, mapsize, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelMapuivNative(GLPixelMap map, int mapsize, uint* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelMap, int, uint*, void>)funcTable[585])(map, mapsize, values);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelMap, int, nint, void>)funcTable[585])(map, mapsize, (nint)values);
			#endif
		}

		public static void PixelMapuiv(GLPixelMap map, int mapsize, uint* values)
		{
			PixelMapuivNative(map, mapsize, values);
		}

		public static void PixelMapuiv(GLPixelMap map, int mapsize, Span<uint> values)
		{
			fixed (uint* pvalues0 = values)
			{
				PixelMapuivNative(map, mapsize, pvalues0);
			}
		}

		public static void PixelMapuiv(GLPixelMap map, int mapsize, ref uint values)
		{
			fixed (uint* pvalues0 = &values)
			{
				PixelMapuivNative(map, mapsize, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelMapusvNative(GLPixelMap map, int mapsize, ushort* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelMap, int, ushort*, void>)funcTable[586])(map, mapsize, values);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelMap, int, nint, void>)funcTable[586])(map, mapsize, (nint)values);
			#endif
		}

		public static void PixelMapusv(GLPixelMap map, int mapsize, ushort* values)
		{
			PixelMapusvNative(map, mapsize, values);
		}

		public static void PixelMapusv(GLPixelMap map, int mapsize, Span<ushort> values)
		{
			fixed (ushort* pvalues0 = values)
			{
				PixelMapusvNative(map, mapsize, pvalues0);
			}
		}

		public static void PixelMapusv(GLPixelMap map, int mapsize, ref ushort values)
		{
			fixed (ushort* pvalues0 = &values)
			{
				PixelMapusvNative(map, mapsize, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelStorefNative(GLPixelStoreParameter pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelStoreParameter, float, void>)funcTable[587])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelStoreParameter, float, void>)funcTable[587])(pname, param);
			#endif
		}

		public static void PixelStoref(GLPixelStoreParameter pname, float param)
		{
			PixelStorefNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelStoreiNative(GLPixelStoreParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelStoreParameter, int, void>)funcTable[588])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelStoreParameter, int, void>)funcTable[588])(pname, param);
			#endif
		}

		public static void PixelStorei(GLPixelStoreParameter pname, int param)
		{
			PixelStoreiNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelTransferfNative(GLPixelTransferParameter pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelTransferParameter, float, void>)funcTable[589])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelTransferParameter, float, void>)funcTable[589])(pname, param);
			#endif
		}

		public static void PixelTransferf(GLPixelTransferParameter pname, float param)
		{
			PixelTransferfNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelTransferiNative(GLPixelTransferParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelTransferParameter, int, void>)funcTable[590])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelTransferParameter, int, void>)funcTable[590])(pname, param);
			#endif
		}

		public static void PixelTransferi(GLPixelTransferParameter pname, int param)
		{
			PixelTransferiNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelZoomNative(float xfactor, float yfactor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[591])(xfactor, yfactor);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[591])(xfactor, yfactor);
			#endif
		}

		public static void PixelZoom(float xfactor, float yfactor)
		{
			PixelZoomNative(xfactor, yfactor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PointParameterfNative(GLPointParameterNameARB pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, float, void>)funcTable[592])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, float, void>)funcTable[592])(pname, param);
			#endif
		}

		public static void PointParameterf(GLPointParameterNameARB pname, float param)
		{
			PointParameterfNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PointParameterfvNative(GLPointParameterNameARB pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, float*, void>)funcTable[593])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, nint, void>)funcTable[593])(pname, (nint)@params);
			#endif
		}

		public static void PointParameterfv(GLPointParameterNameARB pname, float* @params)
		{
			PointParameterfvNative(pname, @params);
		}

		public static void PointParameterfv(GLPointParameterNameARB pname, out float @params)
		{
			float pparams;
			PointParameterfvNative(pname, &pparams);
			@params = pparams;
		}

		public static void PointParameterfv(GLPointParameterNameARB pname, Span<float> @params)
		{
			fixed (float* pparams = @params)
			{
				PointParameterfvNative(pname, pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PointParameteriNative(GLPointParameterNameARB pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, int, void>)funcTable[594])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, int, void>)funcTable[594])(pname, param);
			#endif
		}

		public static void PointParameteri(GLPointParameterNameARB pname, int param)
		{
			PointParameteriNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PointParameterivNative(GLPointParameterNameARB pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, int*, void>)funcTable[595])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, nint, void>)funcTable[595])(pname, (nint)@params);
			#endif
		}

		public static void PointParameteriv(GLPointParameterNameARB pname, int* @params)
		{
			PointParameterivNative(pname, @params);
		}

		public static void PointParameteriv(GLPointParameterNameARB pname, out int @params)
		{
			int pparams;
			PointParameterivNative(pname, &pparams);
			@params = pparams;
		}

		public static void PointParameteriv(GLPointParameterNameARB pname, Span<int> @params)
		{
			fixed (int* pparams = @params)
			{
				PointParameterivNative(pname, pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PointSizeNative(float size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[596])(size);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[596])(size);
			#endif
		}

		public static void PointSize(float size)
		{
			PointSizeNative(size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PolygonModeNative(GLTriangleFace face, GLPolygonMode mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLPolygonMode, void>)funcTable[597])(face, mode);
			#else
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLPolygonMode, void>)funcTable[597])(face, mode);
			#endif
		}

		public static void PolygonMode(GLTriangleFace face, GLPolygonMode mode)
		{
			PolygonModeNative(face, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PolygonOffsetNative(float factor, float units)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[598])(factor, units);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[598])(factor, units);
			#endif
		}

		public static void PolygonOffset(float factor, float units)
		{
			PolygonOffsetNative(factor, units);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PolygonOffsetClampNative(float factor, float units, float clamp)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[599])(factor, units, clamp);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[599])(factor, units, clamp);
			#endif
		}

		public static void PolygonOffsetClamp(float factor, float units, float clamp)
		{
			PolygonOffsetClampNative(factor, units, clamp);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PolygonStippleNative(byte* mask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<byte*, void>)funcTable[600])(mask);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[600])((nint)mask);
			#endif
		}

		public static void PolygonStipple(byte* mask)
		{
			PolygonStippleNative(mask);
		}

		public static void PolygonStipple(string mask)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (mask != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(mask);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(mask, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PolygonStippleNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PolygonStipple(Span<byte> mask)
		{
			fixed (byte* pmask0 = mask)
			{
				PolygonStippleNative(pmask0);
			}
		}

		public static void PolygonStipple(ref byte mask)
		{
			fixed (byte* pmask0 = &mask)
			{
				PolygonStippleNative(pmask0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PopAttribNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[601])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[601])();
			#endif
		}

		public static void PopAttrib()
		{
			PopAttribNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PopClientAttribNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[602])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[602])();
			#endif
		}

		public static void PopClientAttrib()
		{
			PopClientAttribNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PopDebugGroupNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[603])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[603])();
			#endif
		}

		public static void PopDebugGroup()
		{
			PopDebugGroupNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PopMatrixNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[604])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[604])();
			#endif
		}

		public static void PopMatrix()
		{
			PopMatrixNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PopNameNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[605])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[605])();
			#endif
		}

		public static void PopName()
		{
			PopNameNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PrimitiveRestartIndexNative(uint index)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[606])(index);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[606])(index);
			#endif
		}

		public static void PrimitiveRestartIndex(uint index)
		{
			PrimitiveRestartIndexNative(index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PrioritizeTexturesNative(int n, uint* textures, float* priorities)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, float*, void>)funcTable[607])(n, textures, priorities);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, nint, void>)funcTable[607])(n, (nint)textures, (nint)priorities);
			#endif
		}

		public static void PrioritizeTextures(int n, uint* textures, float* priorities)
		{
			PrioritizeTexturesNative(n, textures, priorities);
		}

		public static void PrioritizeTextures(int n, Span<uint> textures, float* priorities)
		{
			fixed (uint* ptextures0 = textures)
			{
				PrioritizeTexturesNative(n, ptextures0, priorities);
			}
		}

		public static void PrioritizeTextures(int n, ref uint textures, float* priorities)
		{
			fixed (uint* ptextures0 = &textures)
			{
				PrioritizeTexturesNative(n, ptextures0, priorities);
			}
		}

		public static void PrioritizeTextures(int n, uint* textures, Span<float> priorities)
		{
			fixed (float* ppriorities0 = priorities)
			{
				PrioritizeTexturesNative(n, textures, ppriorities0);
			}
		}

		public static void PrioritizeTextures(int n, uint* textures, ref float priorities)
		{
			fixed (float* ppriorities0 = &priorities)
			{
				PrioritizeTexturesNative(n, textures, ppriorities0);
			}
		}

		public static void PrioritizeTextures(int n, Span<uint> textures, Span<float> priorities)
		{
			fixed (uint* ptextures0 = textures)
			{
				fixed (float* ppriorities1 = priorities)
				{
					PrioritizeTexturesNative(n, ptextures0, ppriorities1);
				}
			}
		}

		public static void PrioritizeTextures(int n, ref uint textures, ref float priorities)
		{
			fixed (uint* ptextures0 = &textures)
			{
				fixed (float* ppriorities1 = &priorities)
				{
					PrioritizeTexturesNative(n, ptextures0, ppriorities1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramBinaryNative(uint program, GLEnum binaryFormat, void* binary, int length)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, void*, int, void>)funcTable[608])(program, binaryFormat, binary, length);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, nint, int, void>)funcTable[608])(program, binaryFormat, (nint)binary, length);
			#endif
		}

		public static void ProgramBinary(uint program, GLEnum binaryFormat, void* binary, int length)
		{
			ProgramBinaryNative(program, binaryFormat, binary, length);
		}

		public static void ProgramBinary(uint program, GLEnum binaryFormat, nint binary, int length)
		{
			ProgramBinaryNative(program, binaryFormat, (void*)binary, length);
		}

		public static void ProgramBinary<TBinary>(uint program, GLEnum binaryFormat, Span<TBinary> binary, int length) where TBinary : unmanaged
		{
			fixed (TBinary* pbinary0 = binary)
			{
				ProgramBinaryNative(program, binaryFormat, pbinary0, length);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramParameteriNative(uint program, GLProgramParameterPName pname, int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLProgramParameterPName, int, void>)funcTable[609])(program, pname, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLProgramParameterPName, int, void>)funcTable[609])(program, pname, value);
			#endif
		}

		public static void ProgramParameteri(uint program, GLProgramParameterPName pname, int value)
		{
			ProgramParameteriNative(program, pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1dNative(uint program, int location, double v0)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double, void>)funcTable[610])(program, location, v0);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, double, void>)funcTable[610])(program, location, v0);
			#endif
		}

		public static void ProgramUniform1d(uint program, int location, double v0)
		{
			ProgramUniform1dNative(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1dvNative(uint program, int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)funcTable[611])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[611])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1dv(uint program, int location, int count, double* value)
		{
			ProgramUniform1dvNative(program, location, count, value);
		}

		public static void ProgramUniform1dv(uint program, int location, int count, Span<double> value)
		{
			fixed (double* pvalue0 = value)
			{
				ProgramUniform1dvNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform1dv(uint program, int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniform1dvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1fNative(uint program, int location, float v0)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, void>)funcTable[612])(program, location, v0);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, void>)funcTable[612])(program, location, v0);
			#endif
		}

		public static void ProgramUniform1f(uint program, int location, float v0)
		{
			ProgramUniform1fNative(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1fvNative(uint program, int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)funcTable[613])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[613])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1fv(uint program, int location, int count, float* value)
		{
			ProgramUniform1fvNative(program, location, count, value);
		}

		public static void ProgramUniform1fv(uint program, int location, int count, Span<float> value)
		{
			fixed (float* pvalue0 = value)
			{
				ProgramUniform1fvNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform1fv(uint program, int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniform1fvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1iNative(uint program, int location, int v0)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[614])(program, location, v0);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[614])(program, location, v0);
			#endif
		}

		public static void ProgramUniform1i(uint program, int location, int v0)
		{
			ProgramUniform1iNative(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1ivNative(uint program, int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)funcTable[615])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[615])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1iv(uint program, int location, int count, int* value)
		{
			ProgramUniform1ivNative(program, location, count, value);
		}

		public static void ProgramUniform1iv(uint program, int location, int count, Span<int> value)
		{
			fixed (int* pvalue0 = value)
			{
				ProgramUniform1ivNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform1iv(uint program, int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				ProgramUniform1ivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1uiNative(uint program, int location, uint v0)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, void>)funcTable[616])(program, location, v0);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, void>)funcTable[616])(program, location, v0);
			#endif
		}

		public static void ProgramUniform1ui(uint program, int location, uint v0)
		{
			ProgramUniform1uiNative(program, location, v0);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform1uivNative(uint program, int location, int count, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)funcTable[617])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[617])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform1uiv(uint program, int location, int count, uint* value)
		{
			ProgramUniform1uivNative(program, location, count, value);
		}

		public static void ProgramUniform1uiv(uint program, int location, int count, Span<uint> value)
		{
			fixed (uint* pvalue0 = value)
			{
				ProgramUniform1uivNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform1uiv(uint program, int location, int count, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				ProgramUniform1uivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2dNative(uint program, int location, double v0, double v1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double, double, void>)funcTable[618])(program, location, v0, v1);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, double, double, void>)funcTable[618])(program, location, v0, v1);
			#endif
		}

		public static void ProgramUniform2d(uint program, int location, double v0, double v1)
		{
			ProgramUniform2dNative(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2dvNative(uint program, int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)funcTable[619])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[619])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2dv(uint program, int location, int count, double* value)
		{
			ProgramUniform2dvNative(program, location, count, value);
		}

		public static void ProgramUniform2dv(uint program, int location, int count, Span<double> value)
		{
			fixed (double* pvalue0 = value)
			{
				ProgramUniform2dvNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform2dv(uint program, int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniform2dvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2fNative(uint program, int location, float v0, float v1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, float, void>)funcTable[620])(program, location, v0, v1);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, float, void>)funcTable[620])(program, location, v0, v1);
			#endif
		}

		public static void ProgramUniform2f(uint program, int location, float v0, float v1)
		{
			ProgramUniform2fNative(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2fvNative(uint program, int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)funcTable[621])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[621])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2fv(uint program, int location, int count, float* value)
		{
			ProgramUniform2fvNative(program, location, count, value);
		}

		public static void ProgramUniform2fv(uint program, int location, int count, Span<float> value)
		{
			fixed (float* pvalue0 = value)
			{
				ProgramUniform2fvNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform2fv(uint program, int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniform2fvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2iNative(uint program, int location, int v0, int v1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[622])(program, location, v0, v1);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[622])(program, location, v0, v1);
			#endif
		}

		public static void ProgramUniform2i(uint program, int location, int v0, int v1)
		{
			ProgramUniform2iNative(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2ivNative(uint program, int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)funcTable[623])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[623])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2iv(uint program, int location, int count, int* value)
		{
			ProgramUniform2ivNative(program, location, count, value);
		}

		public static void ProgramUniform2iv(uint program, int location, int count, Span<int> value)
		{
			fixed (int* pvalue0 = value)
			{
				ProgramUniform2ivNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform2iv(uint program, int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				ProgramUniform2ivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2uiNative(uint program, int location, uint v0, uint v1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void>)funcTable[624])(program, location, v0, v1);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, void>)funcTable[624])(program, location, v0, v1);
			#endif
		}

		public static void ProgramUniform2ui(uint program, int location, uint v0, uint v1)
		{
			ProgramUniform2uiNative(program, location, v0, v1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform2uivNative(uint program, int location, int count, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)funcTable[625])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[625])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform2uiv(uint program, int location, int count, uint* value)
		{
			ProgramUniform2uivNative(program, location, count, value);
		}

		public static void ProgramUniform2uiv(uint program, int location, int count, Span<uint> value)
		{
			fixed (uint* pvalue0 = value)
			{
				ProgramUniform2uivNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform2uiv(uint program, int location, int count, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				ProgramUniform2uivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3dNative(uint program, int location, double v0, double v1, double v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double, double, double, void>)funcTable[626])(program, location, v0, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, double, double, double, void>)funcTable[626])(program, location, v0, v1, v2);
			#endif
		}

		public static void ProgramUniform3d(uint program, int location, double v0, double v1, double v2)
		{
			ProgramUniform3dNative(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3dvNative(uint program, int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)funcTable[627])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[627])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3dv(uint program, int location, int count, double* value)
		{
			ProgramUniform3dvNative(program, location, count, value);
		}

		public static void ProgramUniform3dv(uint program, int location, int count, Span<double> value)
		{
			fixed (double* pvalue0 = value)
			{
				ProgramUniform3dvNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform3dv(uint program, int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniform3dvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3fNative(uint program, int location, float v0, float v1, float v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, void>)funcTable[628])(program, location, v0, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, void>)funcTable[628])(program, location, v0, v1, v2);
			#endif
		}

		public static void ProgramUniform3f(uint program, int location, float v0, float v1, float v2)
		{
			ProgramUniform3fNative(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3fvNative(uint program, int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)funcTable[629])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[629])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3fv(uint program, int location, int count, float* value)
		{
			ProgramUniform3fvNative(program, location, count, value);
		}

		public static void ProgramUniform3fv(uint program, int location, int count, Span<float> value)
		{
			fixed (float* pvalue0 = value)
			{
				ProgramUniform3fvNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform3fv(uint program, int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniform3fvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3iNative(uint program, int location, int v0, int v1, int v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[630])(program, location, v0, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[630])(program, location, v0, v1, v2);
			#endif
		}

		public static void ProgramUniform3i(uint program, int location, int v0, int v1, int v2)
		{
			ProgramUniform3iNative(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3ivNative(uint program, int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)funcTable[631])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[631])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3iv(uint program, int location, int count, int* value)
		{
			ProgramUniform3ivNative(program, location, count, value);
		}

		public static void ProgramUniform3iv(uint program, int location, int count, Span<int> value)
		{
			fixed (int* pvalue0 = value)
			{
				ProgramUniform3ivNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform3iv(uint program, int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				ProgramUniform3ivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3uiNative(uint program, int location, uint v0, uint v1, uint v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, void>)funcTable[632])(program, location, v0, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, void>)funcTable[632])(program, location, v0, v1, v2);
			#endif
		}

		public static void ProgramUniform3ui(uint program, int location, uint v0, uint v1, uint v2)
		{
			ProgramUniform3uiNative(program, location, v0, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform3uivNative(uint program, int location, int count, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)funcTable[633])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[633])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform3uiv(uint program, int location, int count, uint* value)
		{
			ProgramUniform3uivNative(program, location, count, value);
		}

		public static void ProgramUniform3uiv(uint program, int location, int count, Span<uint> value)
		{
			fixed (uint* pvalue0 = value)
			{
				ProgramUniform3uivNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform3uiv(uint program, int location, int count, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				ProgramUniform3uivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4dNative(uint program, int location, double v0, double v1, double v2, double v3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double, double, double, double, void>)funcTable[634])(program, location, v0, v1, v2, v3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, double, double, double, double, void>)funcTable[634])(program, location, v0, v1, v2, v3);
			#endif
		}

		public static void ProgramUniform4d(uint program, int location, double v0, double v1, double v2, double v3)
		{
			ProgramUniform4dNative(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4dvNative(uint program, int location, int count, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, double*, void>)funcTable[635])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[635])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4dv(uint program, int location, int count, double* value)
		{
			ProgramUniform4dvNative(program, location, count, value);
		}

		public static void ProgramUniform4dv(uint program, int location, int count, Span<double> value)
		{
			fixed (double* pvalue0 = value)
			{
				ProgramUniform4dvNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform4dv(uint program, int location, int count, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniform4dvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4fNative(uint program, int location, float v0, float v1, float v2, float v3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, float, void>)funcTable[636])(program, location, v0, v1, v2, v3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, float, float, float, float, void>)funcTable[636])(program, location, v0, v1, v2, v3);
			#endif
		}

		public static void ProgramUniform4f(uint program, int location, float v0, float v1, float v2, float v3)
		{
			ProgramUniform4fNative(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4fvNative(uint program, int location, int count, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)funcTable[637])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[637])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4fv(uint program, int location, int count, float* value)
		{
			ProgramUniform4fvNative(program, location, count, value);
		}

		public static void ProgramUniform4fv(uint program, int location, int count, Span<float> value)
		{
			fixed (float* pvalue0 = value)
			{
				ProgramUniform4fvNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform4fv(uint program, int location, int count, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniform4fvNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4iNative(uint program, int location, int v0, int v1, int v2, int v3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void>)funcTable[638])(program, location, v0, v1, v2, v3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, int, void>)funcTable[638])(program, location, v0, v1, v2, v3);
			#endif
		}

		public static void ProgramUniform4i(uint program, int location, int v0, int v1, int v2, int v3)
		{
			ProgramUniform4iNative(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4ivNative(uint program, int location, int count, int* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)funcTable[639])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[639])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4iv(uint program, int location, int count, int* value)
		{
			ProgramUniform4ivNative(program, location, count, value);
		}

		public static void ProgramUniform4iv(uint program, int location, int count, Span<int> value)
		{
			fixed (int* pvalue0 = value)
			{
				ProgramUniform4ivNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform4iv(uint program, int location, int count, ref int value)
		{
			fixed (int* pvalue0 = &value)
			{
				ProgramUniform4ivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4uiNative(uint program, int location, uint v0, uint v1, uint v2, uint v3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, uint, void>)funcTable[640])(program, location, v0, v1, v2, v3);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, uint, uint, uint, uint, void>)funcTable[640])(program, location, v0, v1, v2, v3);
			#endif
		}

		public static void ProgramUniform4ui(uint program, int location, uint v0, uint v1, uint v2, uint v3)
		{
			ProgramUniform4uiNative(program, location, v0, v1, v2, v3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniform4uivNative(uint program, int location, int count, uint* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, uint*, void>)funcTable[641])(program, location, count, value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[641])(program, location, count, (nint)value);
			#endif
		}

		public static void ProgramUniform4uiv(uint program, int location, int count, uint* value)
		{
			ProgramUniform4uivNative(program, location, count, value);
		}

		public static void ProgramUniform4uiv(uint program, int location, int count, Span<uint> value)
		{
			fixed (uint* pvalue0 = value)
			{
				ProgramUniform4uivNative(program, location, count, pvalue0);
			}
		}

		public static void ProgramUniform4uiv(uint program, int location, int count, ref uint value)
		{
			fixed (uint* pvalue0 = &value)
			{
				ProgramUniform4uivNative(program, location, count, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2dvNative(uint program, int location, int count, bool transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[642])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[642])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, double* value)
		{
			ProgramUniformMatrix2dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, Span<double> value)
		{
			fixed (double* pvalue0 = value)
			{
				ProgramUniformMatrix2dvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix2dv(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix2dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2fvNative(uint program, int location, int count, bool transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[643])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[643])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, float* value)
		{
			ProgramUniformMatrix2fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, Span<float> value)
		{
			fixed (float* pvalue0 = value)
			{
				ProgramUniformMatrix2fvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix2fv(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix2fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2x3dvNative(uint program, int location, int count, bool transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[644])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[644])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, double* value)
		{
			ProgramUniformMatrix2x3dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, Span<double> value)
		{
			fixed (double* pvalue0 = value)
			{
				ProgramUniformMatrix2x3dvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix2x3dv(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix2x3dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2x3fvNative(uint program, int location, int count, bool transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[645])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[645])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, float* value)
		{
			ProgramUniformMatrix2x3fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, Span<float> value)
		{
			fixed (float* pvalue0 = value)
			{
				ProgramUniformMatrix2x3fvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix2x3fv(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix2x3fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2x4dvNative(uint program, int location, int count, bool transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[646])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[646])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, double* value)
		{
			ProgramUniformMatrix2x4dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, Span<double> value)
		{
			fixed (double* pvalue0 = value)
			{
				ProgramUniformMatrix2x4dvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix2x4dv(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix2x4dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix2x4fvNative(uint program, int location, int count, bool transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[647])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[647])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, float* value)
		{
			ProgramUniformMatrix2x4fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, Span<float> value)
		{
			fixed (float* pvalue0 = value)
			{
				ProgramUniformMatrix2x4fvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix2x4fv(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix2x4fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3dvNative(uint program, int location, int count, bool transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[648])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[648])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, double* value)
		{
			ProgramUniformMatrix3dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, Span<double> value)
		{
			fixed (double* pvalue0 = value)
			{
				ProgramUniformMatrix3dvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix3dv(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix3dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3fvNative(uint program, int location, int count, bool transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[649])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[649])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, float* value)
		{
			ProgramUniformMatrix3fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, Span<float> value)
		{
			fixed (float* pvalue0 = value)
			{
				ProgramUniformMatrix3fvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix3fv(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix3fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3x2dvNative(uint program, int location, int count, bool transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[650])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[650])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, double* value)
		{
			ProgramUniformMatrix3x2dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, Span<double> value)
		{
			fixed (double* pvalue0 = value)
			{
				ProgramUniformMatrix3x2dvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix3x2dv(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix3x2dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3x2fvNative(uint program, int location, int count, bool transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[651])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[651])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, float* value)
		{
			ProgramUniformMatrix3x2fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, Span<float> value)
		{
			fixed (float* pvalue0 = value)
			{
				ProgramUniformMatrix3x2fvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix3x2fv(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix3x2fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3x4dvNative(uint program, int location, int count, bool transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[652])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[652])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, double* value)
		{
			ProgramUniformMatrix3x4dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, Span<double> value)
		{
			fixed (double* pvalue0 = value)
			{
				ProgramUniformMatrix3x4dvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix3x4dv(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix3x4dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix3x4fvNative(uint program, int location, int count, bool transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[653])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[653])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, float* value)
		{
			ProgramUniformMatrix3x4fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, Span<float> value)
		{
			fixed (float* pvalue0 = value)
			{
				ProgramUniformMatrix3x4fvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix3x4fv(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix3x4fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4dvNative(uint program, int location, int count, bool transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[654])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[654])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, double* value)
		{
			ProgramUniformMatrix4dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, Span<double> value)
		{
			fixed (double* pvalue0 = value)
			{
				ProgramUniformMatrix4dvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix4dv(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix4dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4fvNative(uint program, int location, int count, bool transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[655])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[655])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, float* value)
		{
			ProgramUniformMatrix4fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, Span<float> value)
		{
			fixed (float* pvalue0 = value)
			{
				ProgramUniformMatrix4fvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix4fv(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix4fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4x2dvNative(uint program, int location, int count, bool transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[656])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[656])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, double* value)
		{
			ProgramUniformMatrix4x2dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, Span<double> value)
		{
			fixed (double* pvalue0 = value)
			{
				ProgramUniformMatrix4x2dvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix4x2dv(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix4x2dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4x2fvNative(uint program, int location, int count, bool transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[657])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[657])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, float* value)
		{
			ProgramUniformMatrix4x2fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, Span<float> value)
		{
			fixed (float* pvalue0 = value)
			{
				ProgramUniformMatrix4x2fvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix4x2fv(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix4x2fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4x3dvNative(uint program, int location, int count, bool transpose, double* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, double*, void>)funcTable[658])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[658])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, double* value)
		{
			ProgramUniformMatrix4x3dvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, Span<double> value)
		{
			fixed (double* pvalue0 = value)
			{
				ProgramUniformMatrix4x3dvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix4x3dv(uint program, int location, int count, bool transpose, ref double value)
		{
			fixed (double* pvalue0 = &value)
			{
				ProgramUniformMatrix4x3dvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramUniformMatrix4x3fvNative(uint program, int location, int count, bool transpose, float* value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, float*, void>)funcTable[659])(program, location, count, *((byte*)(&transpose)), value);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, byte, nint, void>)funcTable[659])(program, location, count, *((byte*)(&transpose)), (nint)value);
			#endif
		}

		public static void ProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, float* value)
		{
			ProgramUniformMatrix4x3fvNative(program, location, count, transpose, value);
		}

		public static void ProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, Span<float> value)
		{
			fixed (float* pvalue0 = value)
			{
				ProgramUniformMatrix4x3fvNative(program, location, count, transpose, pvalue0);
			}
		}

		public static void ProgramUniformMatrix4x3fv(uint program, int location, int count, bool transpose, ref float value)
		{
			fixed (float* pvalue0 = &value)
			{
				ProgramUniformMatrix4x3fvNative(program, location, count, transpose, pvalue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProvokingVertexNative(GLVertexProvokingMode mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexProvokingMode, void>)funcTable[660])(mode);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexProvokingMode, void>)funcTable[660])(mode);
			#endif
		}

		public static void ProvokingVertex(GLVertexProvokingMode mode)
		{
			ProvokingVertexNative(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PushAttribNative(GLAttribMask mask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLAttribMask, void>)funcTable[661])(mask);
			#else
			((delegate* unmanaged[Cdecl]<GLAttribMask, void>)funcTable[661])(mask);
			#endif
		}

		public static void PushAttrib(GLAttribMask mask)
		{
			PushAttribNative(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PushClientAttribNative(GLClientAttribMask mask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLClientAttribMask, void>)funcTable[662])(mask);
			#else
			((delegate* unmanaged[Cdecl]<GLClientAttribMask, void>)funcTable[662])(mask);
			#endif
		}

		public static void PushClientAttrib(GLClientAttribMask mask)
		{
			PushClientAttribNative(mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PushDebugGroupNative(GLDebugSource source, uint id, int length, byte* message)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLDebugSource, uint, int, byte*, void>)funcTable[663])(source, id, length, message);
			#else
			((delegate* unmanaged[Cdecl]<GLDebugSource, uint, int, nint, void>)funcTable[663])(source, id, length, (nint)message);
			#endif
		}

		public static void PushDebugGroup(GLDebugSource source, uint id, int length, byte* message)
		{
			PushDebugGroupNative(source, id, length, message);
		}

		public static void PushDebugGroup(GLDebugSource source, uint id, int length, string message)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (message != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(message);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(message, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			PushDebugGroupNative(source, id, length, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void PushDebugGroup(GLDebugSource source, uint id, int length, Span<byte> message)
		{
			fixed (byte* pmessage0 = message)
			{
				PushDebugGroupNative(source, id, length, pmessage0);
			}
		}

		public static void PushDebugGroup(GLDebugSource source, uint id, int length, ref byte message)
		{
			fixed (byte* pmessage0 = &message)
			{
				PushDebugGroupNative(source, id, length, pmessage0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PushMatrixNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[664])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[664])();
			#endif
		}

		public static void PushMatrix()
		{
			PushMatrixNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PushNameNative(uint name)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[665])(name);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[665])(name);
			#endif
		}

		public static void PushName(uint name)
		{
			PushNameNative(name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void QueryCounterNative(uint id, GLQueryCounterTarget target)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLQueryCounterTarget, void>)funcTable[666])(id, target);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLQueryCounterTarget, void>)funcTable[666])(id, target);
			#endif
		}

		public static void QueryCounter(uint id, GLQueryCounterTarget target)
		{
			QueryCounterNative(id, target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2dNative(double x, double y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[667])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<double, double, void>)funcTable[667])(x, y);
			#endif
		}

		public static void RasterPos2d(double x, double y)
		{
			RasterPos2dNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2dvNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[668])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[668])((nint)v);
			#endif
		}

		public static void RasterPos2dv(double* v)
		{
			RasterPos2dvNative(v);
		}

		public static void RasterPos2dv(Span<double> v)
		{
			fixed (double* pv0 = v)
			{
				RasterPos2dvNative(pv0);
			}
		}

		public static void RasterPos2dv(ref double v)
		{
			fixed (double* pv0 = &v)
			{
				RasterPos2dvNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2fNative(float x, float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[669])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[669])(x, y);
			#endif
		}

		public static void RasterPos2f(float x, float y)
		{
			RasterPos2fNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2fvNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[670])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[670])((nint)v);
			#endif
		}

		public static void RasterPos2fv(float* v)
		{
			RasterPos2fvNative(v);
		}

		public static void RasterPos2fv(Span<float> v)
		{
			fixed (float* pv0 = v)
			{
				RasterPos2fvNative(pv0);
			}
		}

		public static void RasterPos2fv(ref float v)
		{
			fixed (float* pv0 = &v)
			{
				RasterPos2fvNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2iNative(int x, int y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[671])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[671])(x, y);
			#endif
		}

		public static void RasterPos2i(int x, int y)
		{
			RasterPos2iNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2ivNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[672])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[672])((nint)v);
			#endif
		}

		public static void RasterPos2iv(int* v)
		{
			RasterPos2ivNative(v);
		}

		public static void RasterPos2iv(Span<int> v)
		{
			fixed (int* pv0 = v)
			{
				RasterPos2ivNative(pv0);
			}
		}

		public static void RasterPos2iv(ref int v)
		{
			fixed (int* pv0 = &v)
			{
				RasterPos2ivNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2sNative(short x, short y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[673])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<short, short, void>)funcTable[673])(x, y);
			#endif
		}

		public static void RasterPos2s(short x, short y)
		{
			RasterPos2sNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2svNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[674])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[674])((nint)v);
			#endif
		}

		public static void RasterPos2sv(short* v)
		{
			RasterPos2svNative(v);
		}

		public static void RasterPos2sv(Span<short> v)
		{
			fixed (short* pv0 = v)
			{
				RasterPos2svNative(pv0);
			}
		}

		public static void RasterPos2sv(ref short v)
		{
			fixed (short* pv0 = &v)
			{
				RasterPos2svNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3dNative(double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[675])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[675])(x, y, z);
			#endif
		}

		public static void RasterPos3d(double x, double y, double z)
		{
			RasterPos3dNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3dvNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[676])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[676])((nint)v);
			#endif
		}

		public static void RasterPos3dv(double* v)
		{
			RasterPos3dvNative(v);
		}

		public static void RasterPos3dv(Span<double> v)
		{
			fixed (double* pv0 = v)
			{
				RasterPos3dvNative(pv0);
			}
		}

		public static void RasterPos3dv(ref double v)
		{
			fixed (double* pv0 = &v)
			{
				RasterPos3dvNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3fNative(float x, float y, float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[677])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[677])(x, y, z);
			#endif
		}

		public static void RasterPos3f(float x, float y, float z)
		{
			RasterPos3fNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3fvNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[678])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[678])((nint)v);
			#endif
		}

		public static void RasterPos3fv(float* v)
		{
			RasterPos3fvNative(v);
		}

		public static void RasterPos3fv(Span<float> v)
		{
			fixed (float* pv0 = v)
			{
				RasterPos3fvNative(pv0);
			}
		}

		public static void RasterPos3fv(ref float v)
		{
			fixed (float* pv0 = &v)
			{
				RasterPos3fvNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3iNative(int x, int y, int z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[679])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[679])(x, y, z);
			#endif
		}

		public static void RasterPos3i(int x, int y, int z)
		{
			RasterPos3iNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3ivNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[680])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[680])((nint)v);
			#endif
		}

		public static void RasterPos3iv(int* v)
		{
			RasterPos3ivNative(v);
		}

		public static void RasterPos3iv(Span<int> v)
		{
			fixed (int* pv0 = v)
			{
				RasterPos3ivNative(pv0);
			}
		}

		public static void RasterPos3iv(ref int v)
		{
			fixed (int* pv0 = &v)
			{
				RasterPos3ivNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3sNative(short x, short y, short z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[681])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, void>)funcTable[681])(x, y, z);
			#endif
		}

		public static void RasterPos3s(short x, short y, short z)
		{
			RasterPos3sNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3svNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[682])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[682])((nint)v);
			#endif
		}

		public static void RasterPos3sv(short* v)
		{
			RasterPos3svNative(v);
		}

		public static void RasterPos3sv(Span<short> v)
		{
			fixed (short* pv0 = v)
			{
				RasterPos3svNative(pv0);
			}
		}

		public static void RasterPos3sv(ref short v)
		{
			fixed (short* pv0 = &v)
			{
				RasterPos3svNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4dNative(double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[683])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[683])(x, y, z, w);
			#endif
		}

		public static void RasterPos4d(double x, double y, double z, double w)
		{
			RasterPos4dNative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4dvNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[684])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[684])((nint)v);
			#endif
		}

		public static void RasterPos4dv(double* v)
		{
			RasterPos4dvNative(v);
		}

		public static void RasterPos4dv(Span<double> v)
		{
			fixed (double* pv0 = v)
			{
				RasterPos4dvNative(pv0);
			}
		}

		public static void RasterPos4dv(ref double v)
		{
			fixed (double* pv0 = &v)
			{
				RasterPos4dvNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4fNative(float x, float y, float z, float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[685])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[685])(x, y, z, w);
			#endif
		}

		public static void RasterPos4f(float x, float y, float z, float w)
		{
			RasterPos4fNative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4fvNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[686])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[686])((nint)v);
			#endif
		}

		public static void RasterPos4fv(float* v)
		{
			RasterPos4fvNative(v);
		}

		public static void RasterPos4fv(Span<float> v)
		{
			fixed (float* pv0 = v)
			{
				RasterPos4fvNative(pv0);
			}
		}

		public static void RasterPos4fv(ref float v)
		{
			fixed (float* pv0 = &v)
			{
				RasterPos4fvNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4iNative(int x, int y, int z, int w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[687])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[687])(x, y, z, w);
			#endif
		}

		public static void RasterPos4i(int x, int y, int z, int w)
		{
			RasterPos4iNative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4ivNative(int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[688])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[688])((nint)v);
			#endif
		}

		public static void RasterPos4iv(int* v)
		{
			RasterPos4ivNative(v);
		}

		public static void RasterPos4iv(Span<int> v)
		{
			fixed (int* pv0 = v)
			{
				RasterPos4ivNative(pv0);
			}
		}

		public static void RasterPos4iv(ref int v)
		{
			fixed (int* pv0 = &v)
			{
				RasterPos4ivNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4sNative(short x, short y, short z, short w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[689])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[689])(x, y, z, w);
			#endif
		}

		public static void RasterPos4s(short x, short y, short z, short w)
		{
			RasterPos4sNative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4svNative(short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[690])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[690])((nint)v);
			#endif
		}

		public static void RasterPos4sv(short* v)
		{
			RasterPos4svNative(v);
		}

		public static void RasterPos4sv(Span<short> v)
		{
			fixed (short* pv0 = v)
			{
				RasterPos4svNative(pv0);
			}
		}

		public static void RasterPos4sv(ref short v)
		{
			fixed (short* pv0 = &v)
			{
				RasterPos4svNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ReadBufferNative(GLReadBufferMode src)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLReadBufferMode, void>)funcTable[691])(src);
			#else
			((delegate* unmanaged[Cdecl]<GLReadBufferMode, void>)funcTable[691])(src);
			#endif
		}

		public static void ReadBuffer(GLReadBufferMode src)
		{
			ReadBufferNative(src);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ReadPixelsNative(int x, int y, int width, int height, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[692])(x, y, width, height, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[692])(x, y, width, height, format, type, (nint)pixels);
			#endif
		}

		public static void ReadPixels(int x, int y, int width, int height, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			ReadPixelsNative(x, y, width, height, format, type, pixels);
		}

		public static void ReadPixels(int x, int y, int width, int height, GLPixelFormat format, GLPixelType type, nint pixels)
		{
			ReadPixelsNative(x, y, width, height, format, type, (void*)pixels);
		}

		public static void ReadPixels<TPixels>(int x, int y, int width, int height, GLPixelFormat format, GLPixelType type, Span<TPixels> pixels) where TPixels : unmanaged
		{
			fixed (TPixels* ppixels0 = pixels)
			{
				ReadPixelsNative(x, y, width, height, format, type, ppixels0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ReadnPixelsNative(int x, int y, int width, int height, GLPixelFormat format, GLPixelType type, int bufSize, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, GLPixelFormat, GLPixelType, int, void*, void>)funcTable[693])(x, y, width, height, format, type, bufSize, data);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, GLPixelFormat, GLPixelType, int, nint, void>)funcTable[693])(x, y, width, height, format, type, bufSize, (nint)data);
			#endif
		}

		public static void ReadnPixels(int x, int y, int width, int height, GLPixelFormat format, GLPixelType type, int bufSize, void* data)
		{
			ReadnPixelsNative(x, y, width, height, format, type, bufSize, data);
		}

		public static void ReadnPixels(int x, int y, int width, int height, GLPixelFormat format, GLPixelType type, int bufSize, nint data)
		{
			ReadnPixelsNative(x, y, width, height, format, type, bufSize, (void*)data);
		}

		public static void ReadnPixels<TData>(int x, int y, int width, int height, GLPixelFormat format, GLPixelType type, int bufSize, Span<TData> data) where TData : unmanaged
		{
			fixed (TData* pdata0 = data)
			{
				ReadnPixelsNative(x, y, width, height, format, type, bufSize, pdata0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectdNative(double x1, double y1, double x2, double y2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[694])(x1, y1, x2, y2);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[694])(x1, y1, x2, y2);
			#endif
		}

		public static void Rectd(double x1, double y1, double x2, double y2)
		{
			RectdNative(x1, y1, x2, y2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectdvNative(double* v1, double* v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, double*, void>)funcTable[695])(v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[695])((nint)v1, (nint)v2);
			#endif
		}

		public static void Rectdv(double* v1, double* v2)
		{
			RectdvNative(v1, v2);
		}

		public static void Rectdv(Span<double> v1, double* v2)
		{
			fixed (double* pv10 = v1)
			{
				RectdvNative(pv10, v2);
			}
		}

		public static void Rectdv(ref double v1, double* v2)
		{
			fixed (double* pv10 = &v1)
			{
				RectdvNative(pv10, v2);
			}
		}

		public static void Rectdv(double* v1, Span<double> v2)
		{
			fixed (double* pv20 = v2)
			{
				RectdvNative(v1, pv20);
			}
		}

		public static void Rectdv(double* v1, ref double v2)
		{
			fixed (double* pv20 = &v2)
			{
				RectdvNative(v1, pv20);
			}
		}

		public static void Rectdv(Span<double> v1, Span<double> v2)
		{
			fixed (double* pv10 = v1)
			{
				fixed (double* pv21 = v2)
				{
					RectdvNative(pv10, pv21);
				}
			}
		}

		public static void Rectdv(ref double v1, ref double v2)
		{
			fixed (double* pv10 = &v1)
			{
				fixed (double* pv21 = &v2)
				{
					RectdvNative(pv10, pv21);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectfNative(float x1, float y1, float x2, float y2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[696])(x1, y1, x2, y2);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[696])(x1, y1, x2, y2);
			#endif
		}

		public static void Rectf(float x1, float y1, float x2, float y2)
		{
			RectfNative(x1, y1, x2, y2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectfvNative(float* v1, float* v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, float*, void>)funcTable[697])(v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[697])((nint)v1, (nint)v2);
			#endif
		}

		public static void Rectfv(float* v1, float* v2)
		{
			RectfvNative(v1, v2);
		}

		public static void Rectfv(Span<float> v1, float* v2)
		{
			fixed (float* pv10 = v1)
			{
				RectfvNative(pv10, v2);
			}
		}

		public static void Rectfv(ref float v1, float* v2)
		{
			fixed (float* pv10 = &v1)
			{
				RectfvNative(pv10, v2);
			}
		}

		public static void Rectfv(float* v1, Span<float> v2)
		{
			fixed (float* pv20 = v2)
			{
				RectfvNative(v1, pv20);
			}
		}

		public static void Rectfv(float* v1, ref float v2)
		{
			fixed (float* pv20 = &v2)
			{
				RectfvNative(v1, pv20);
			}
		}

		public static void Rectfv(Span<float> v1, Span<float> v2)
		{
			fixed (float* pv10 = v1)
			{
				fixed (float* pv21 = v2)
				{
					RectfvNative(pv10, pv21);
				}
			}
		}

		public static void Rectfv(ref float v1, ref float v2)
		{
			fixed (float* pv10 = &v1)
			{
				fixed (float* pv21 = &v2)
				{
					RectfvNative(pv10, pv21);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectiNative(int x1, int y1, int x2, int y2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[698])(x1, y1, x2, y2);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[698])(x1, y1, x2, y2);
			#endif
		}

		public static void Recti(int x1, int y1, int x2, int y2)
		{
			RectiNative(x1, y1, x2, y2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectivNative(int* v1, int* v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, int*, void>)funcTable[699])(v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[699])((nint)v1, (nint)v2);
			#endif
		}

		public static void Rectiv(int* v1, int* v2)
		{
			RectivNative(v1, v2);
		}

		public static void Rectiv(Span<int> v1, int* v2)
		{
			fixed (int* pv10 = v1)
			{
				RectivNative(pv10, v2);
			}
		}

		public static void Rectiv(ref int v1, int* v2)
		{
			fixed (int* pv10 = &v1)
			{
				RectivNative(pv10, v2);
			}
		}

		public static void Rectiv(int* v1, Span<int> v2)
		{
			fixed (int* pv20 = v2)
			{
				RectivNative(v1, pv20);
			}
		}

		public static void Rectiv(int* v1, ref int v2)
		{
			fixed (int* pv20 = &v2)
			{
				RectivNative(v1, pv20);
			}
		}

		public static void Rectiv(Span<int> v1, Span<int> v2)
		{
			fixed (int* pv10 = v1)
			{
				fixed (int* pv21 = v2)
				{
					RectivNative(pv10, pv21);
				}
			}
		}

		public static void Rectiv(ref int v1, ref int v2)
		{
			fixed (int* pv10 = &v1)
			{
				fixed (int* pv21 = &v2)
				{
					RectivNative(pv10, pv21);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectsNative(short x1, short y1, short x2, short y2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[700])(x1, y1, x2, y2);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, short, void>)funcTable[700])(x1, y1, x2, y2);
			#endif
		}

		public static void Rects(short x1, short y1, short x2, short y2)
		{
			RectsNative(x1, y1, x2, y2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectsvNative(short* v1, short* v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, short*, void>)funcTable[701])(v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[701])((nint)v1, (nint)v2);
			#endif
		}

		public static void Rectsv(short* v1, short* v2)
		{
			RectsvNative(v1, v2);
		}

		public static void Rectsv(Span<short> v1, short* v2)
		{
			fixed (short* pv10 = v1)
			{
				RectsvNative(pv10, v2);
			}
		}

		public static void Rectsv(ref short v1, short* v2)
		{
			fixed (short* pv10 = &v1)
			{
				RectsvNative(pv10, v2);
			}
		}

		public static void Rectsv(short* v1, Span<short> v2)
		{
			fixed (short* pv20 = v2)
			{
				RectsvNative(v1, pv20);
			}
		}

		public static void Rectsv(short* v1, ref short v2)
		{
			fixed (short* pv20 = &v2)
			{
				RectsvNative(v1, pv20);
			}
		}

		public static void Rectsv(Span<short> v1, Span<short> v2)
		{
			fixed (short* pv10 = v1)
			{
				fixed (short* pv21 = v2)
				{
					RectsvNative(pv10, pv21);
				}
			}
		}

		public static void Rectsv(ref short v1, ref short v2)
		{
			fixed (short* pv10 = &v1)
			{
				fixed (short* pv21 = &v2)
				{
					RectsvNative(pv10, pv21);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ReleaseShaderCompilerNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[702])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[702])();
			#endif
		}

		public static void ReleaseShaderCompiler()
		{
			ReleaseShaderCompilerNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int RenderModeNative(GLRenderingMode mode)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLRenderingMode, int>)funcTable[703])(mode);
			#else
			return (int)((delegate* unmanaged[Cdecl]<GLRenderingMode, int>)funcTable[703])(mode);
			#endif
		}

		public static int RenderMode(GLRenderingMode mode)
		{
			int ret = RenderModeNative(mode);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RenderbufferStorageNative(GLRenderbufferTarget target, GLInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, GLInternalFormat, int, int, void>)funcTable[704])(target, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, GLInternalFormat, int, int, void>)funcTable[704])(target, internalformat, width, height);
			#endif
		}

		public static void RenderbufferStorage(GLRenderbufferTarget target, GLInternalFormat internalformat, int width, int height)
		{
			RenderbufferStorageNative(target, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RenderbufferStorageMultisampleNative(GLRenderbufferTarget target, int samples, GLInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, int, GLInternalFormat, int, int, void>)funcTable[705])(target, samples, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, int, GLInternalFormat, int, int, void>)funcTable[705])(target, samples, internalformat, width, height);
			#endif
		}

		public static void RenderbufferStorageMultisample(GLRenderbufferTarget target, int samples, GLInternalFormat internalformat, int width, int height)
		{
			RenderbufferStorageMultisampleNative(target, samples, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ResumeTransformFeedbackNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[706])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[706])();
			#endif
		}

		public static void ResumeTransformFeedback()
		{
			ResumeTransformFeedbackNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RotatedNative(double angle, double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[707])(angle, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, double, void>)funcTable[707])(angle, x, y, z);
			#endif
		}

		public static void Rotated(double angle, double x, double y, double z)
		{
			RotatedNative(angle, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RotatefNative(float angle, float x, float y, float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[708])(angle, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, void>)funcTable[708])(angle, x, y, z);
			#endif
		}

		public static void Rotatef(float angle, float x, float y, float z)
		{
			RotatefNative(angle, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SampleCoverageNative(float value, bool invert)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, byte, void>)funcTable[709])(value, *((byte*)(&invert)));
			#else
			((delegate* unmanaged[Cdecl]<float, byte, void>)funcTable[709])(value, *((byte*)(&invert)));
			#endif
		}

		public static void SampleCoverage(float value, bool invert)
		{
			SampleCoverageNative(value, invert);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SampleMaskiNative(uint maskNumber, uint mask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[710])(maskNumber, mask);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[710])(maskNumber, mask);
			#endif
		}

		public static void SampleMaski(uint maskNumber, uint mask)
		{
			SampleMaskiNative(maskNumber, mask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplerParameterIivNative(uint sampler, GLSamplerParameterI pname, int* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int*, void>)funcTable[711])(sampler, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, nint, void>)funcTable[711])(sampler, pname, (nint)param);
			#endif
		}

		public static void SamplerParameterIiv(uint sampler, GLSamplerParameterI pname, int* param)
		{
			SamplerParameterIivNative(sampler, pname, param);
		}

		public static void SamplerParameterIiv(uint sampler, GLSamplerParameterI pname, out int param)
		{
			int pparam;
			SamplerParameterIivNative(sampler, pname, &pparam);
			param = pparam;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplerParameterIuivNative(uint sampler, GLSamplerParameterI pname, uint* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, uint*, void>)funcTable[712])(sampler, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, nint, void>)funcTable[712])(sampler, pname, (nint)param);
			#endif
		}

		public static void SamplerParameterIuiv(uint sampler, GLSamplerParameterI pname, uint* param)
		{
			SamplerParameterIuivNative(sampler, pname, param);
		}

		public static void SamplerParameterIuiv(uint sampler, GLSamplerParameterI pname, out uint param)
		{
			uint pparam;
			SamplerParameterIuivNative(sampler, pname, &pparam);
			param = pparam;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplerParameterfNative(uint sampler, GLSamplerParameterF pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterF, float, void>)funcTable[713])(sampler, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterF, float, void>)funcTable[713])(sampler, pname, param);
			#endif
		}

		public static void SamplerParameterf(uint sampler, GLSamplerParameterF pname, float param)
		{
			SamplerParameterfNative(sampler, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplerParameterfvNative(uint sampler, GLSamplerParameterF pname, float* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterF, float*, void>)funcTable[714])(sampler, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterF, nint, void>)funcTable[714])(sampler, pname, (nint)param);
			#endif
		}

		public static void SamplerParameterfv(uint sampler, GLSamplerParameterF pname, float* param)
		{
			SamplerParameterfvNative(sampler, pname, param);
		}

		public static void SamplerParameterfv(uint sampler, GLSamplerParameterF pname, out float param)
		{
			float pparam;
			SamplerParameterfvNative(sampler, pname, &pparam);
			param = pparam;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplerParameteriNative(uint sampler, GLSamplerParameterI pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int, void>)funcTable[715])(sampler, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int, void>)funcTable[715])(sampler, pname, param);
			#endif
		}

		public static void SamplerParameteri(uint sampler, GLSamplerParameterI pname, int param)
		{
			SamplerParameteriNative(sampler, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplerParameterivNative(uint sampler, GLSamplerParameterI pname, int* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int*, void>)funcTable[716])(sampler, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, nint, void>)funcTable[716])(sampler, pname, (nint)param);
			#endif
		}

		public static void SamplerParameteriv(uint sampler, GLSamplerParameterI pname, int* param)
		{
			SamplerParameterivNative(sampler, pname, param);
		}

		public static void SamplerParameteriv(uint sampler, GLSamplerParameterI pname, out int param)
		{
			int pparam;
			SamplerParameterivNative(sampler, pname, &pparam);
			param = pparam;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScaledNative(double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[717])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[717])(x, y, z);
			#endif
		}

		public static void Scaled(double x, double y, double z)
		{
			ScaledNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScalefNative(float x, float y, float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[718])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[718])(x, y, z);
			#endif
		}

		public static void Scalef(float x, float y, float z)
		{
			ScalefNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScissorNative(int x, int y, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[719])(x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[719])(x, y, width, height);
			#endif
		}

		public static void Scissor(int x, int y, int width, int height)
		{
			ScissorNative(x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScissorArrayvNative(uint first, int count, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int*, void>)funcTable[720])(first, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[720])(first, count, (nint)v);
			#endif
		}

		public static void ScissorArrayv(uint first, int count, int* v)
		{
			ScissorArrayvNative(first, count, v);
		}

		public static void ScissorArrayv(uint first, int count, Span<int> v)
		{
			fixed (int* pv0 = v)
			{
				ScissorArrayvNative(first, count, pv0);
			}
		}

		public static void ScissorArrayv(uint first, int count, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				ScissorArrayvNative(first, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScissorIndexedNative(uint index, int left, int bottom, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[721])(index, left, bottom, width, height);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[721])(index, left, bottom, width, height);
			#endif
		}

		public static void ScissorIndexed(uint index, int left, int bottom, int width, int height)
		{
			ScissorIndexedNative(index, left, bottom, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScissorIndexedvNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[722])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[722])(index, (nint)v);
			#endif
		}

		public static void ScissorIndexedv(uint index, int* v)
		{
			ScissorIndexedvNative(index, v);
		}

		public static void ScissorIndexedv(uint index, Span<int> v)
		{
			fixed (int* pv0 = v)
			{
				ScissorIndexedvNative(index, pv0);
			}
		}

		public static void ScissorIndexedv(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				ScissorIndexedvNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3bNative(sbyte red, sbyte green, sbyte blue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)funcTable[723])(red, green, blue);
			#else
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)funcTable[723])(red, green, blue);
			#endif
		}

		public static void SecondaryColor3b(sbyte red, sbyte green, sbyte blue)
		{
			SecondaryColor3bNative(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3bvNative(sbyte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte*, void>)funcTable[724])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[724])((nint)v);
			#endif
		}

		public static void SecondaryColor3bv(sbyte* v)
		{
			SecondaryColor3bvNative(v);
		}

		public static void SecondaryColor3bv(Span<sbyte> v)
		{
			fixed (sbyte* pv0 = v)
			{
				SecondaryColor3bvNative(pv0);
			}
		}

		public static void SecondaryColor3bv(ref sbyte v)
		{
			fixed (sbyte* pv0 = &v)
			{
				SecondaryColor3bvNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3dNative(double red, double green, double blue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[725])(red, green, blue);
			#else
			((delegate* unmanaged[Cdecl]<double, double, double, void>)funcTable[725])(red, green, blue);
			#endif
		}

		public static void SecondaryColor3d(double red, double green, double blue)
		{
			SecondaryColor3dNative(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3dvNative(double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<double*, void>)funcTable[726])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[726])((nint)v);
			#endif
		}

		public static void SecondaryColor3dv(double* v)
		{
			SecondaryColor3dvNative(v);
		}

		public static void SecondaryColor3dv(Span<double> v)
		{
			fixed (double* pv0 = v)
			{
				SecondaryColor3dvNative(pv0);
			}
		}

		public static void SecondaryColor3dv(ref double v)
		{
			fixed (double* pv0 = &v)
			{
				SecondaryColor3dvNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3fNative(float red, float green, float blue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[727])(red, green, blue);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, void>)funcTable[727])(red, green, blue);
			#endif
		}

		public static void SecondaryColor3f(float red, float green, float blue)
		{
			SecondaryColor3fNative(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SecondaryColor3fvNative(float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[728])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[728])((nint)v);
			#endif
		}

		public static void SecondaryColor3fv(float* v)
		{
			SecondaryColor3fvNative(v);
		}
	}
}
