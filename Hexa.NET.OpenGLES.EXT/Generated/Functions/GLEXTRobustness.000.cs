// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGLES.EXT
{
	public static unsafe partial class GLEXTRobustness
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static GLEnum GetGraphicsResetStatusEXTNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLEnum>)funcTable[0])();
			#else
			return (GLEnum)((delegate* unmanaged[Cdecl]<GLEnum>)funcTable[0])();
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_robustness</remarks>
		public static GLEnum GetGraphicsResetStatusEXT()
		{
			GLEnum ret = GetGraphicsResetStatusEXTNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetnUniformfvEXTNative(uint program, int location, int bufSize, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, float*, void>)funcTable[1])(program, location, bufSize, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[1])(program, location, bufSize, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_robustness</remarks>
		public static void GetnUniformfvEXT(uint program, int location, int bufSize, float* @params)
		{
			GetnUniformfvEXTNative(program, location, bufSize, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_robustness</remarks>
		public static void GetnUniformfvEXT(uint program, int location, int bufSize, Span<float> @params)
		{
			fixed (float* pparams0 = @params)
			{
				GetnUniformfvEXTNative(program, location, bufSize, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_robustness</remarks>
		public static void GetnUniformfvEXT(uint program, int location, int bufSize, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				GetnUniformfvEXTNative(program, location, bufSize, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetnUniformivEXTNative(uint program, int location, int bufSize, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int*, void>)funcTable[2])(program, location, bufSize, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, nint, void>)funcTable[2])(program, location, bufSize, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_robustness</remarks>
		public static void GetnUniformivEXT(uint program, int location, int bufSize, int* @params)
		{
			GetnUniformivEXTNative(program, location, bufSize, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_robustness</remarks>
		public static void GetnUniformivEXT(uint program, int location, int bufSize, Span<int> @params)
		{
			fixed (int* pparams0 = @params)
			{
				GetnUniformivEXTNative(program, location, bufSize, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_robustness</remarks>
		public static void GetnUniformivEXT(uint program, int location, int bufSize, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetnUniformivEXTNative(program, location, bufSize, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ReadnPixelsEXTNative(int x, int y, int width, int height, GLPixelFormat format, GLPixelType type, int bufSize, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, GLPixelFormat, GLPixelType, int, void*, void>)funcTable[3])(x, y, width, height, format, type, bufSize, data);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, GLPixelFormat, GLPixelType, int, nint, void>)funcTable[3])(x, y, width, height, format, type, bufSize, (nint)data);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_robustness</remarks>
		public static void ReadnPixelsEXT(int x, int y, int width, int height, GLPixelFormat format, GLPixelType type, int bufSize, void* data)
		{
			ReadnPixelsEXTNative(x, y, width, height, format, type, bufSize, data);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_robustness</remarks>
		public static void ReadnPixelsEXT(int x, int y, int width, int height, GLPixelFormat format, GLPixelType type, int bufSize, nint data)
		{
			ReadnPixelsEXTNative(x, y, width, height, format, type, bufSize, (void*)data);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_robustness</remarks>
		public static void ReadnPixelsEXT<TData>(int x, int y, int width, int height, GLPixelFormat format, GLPixelType type, int bufSize, Span<TData> data) where TData : unmanaged
		{
			fixed (TData* pdata0 = data)
			{
				ReadnPixelsEXTNative(x, y, width, height, format, type, bufSize, pdata0);
			}
		}

	}
}
