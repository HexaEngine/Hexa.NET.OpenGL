// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGLES.EXT
{
	public static unsafe partial class GLEXTShaderPixelLocalStorage2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ClearPixelLocalStorageuiEXTNative(int offset, int n, uint* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, uint*, void>)funcTable[0])(offset, n, values);
			#else
			((delegate* unmanaged[Cdecl]<int, int, nint, void>)funcTable[0])(offset, n, (nint)values);
			#endif
		}

		public static void ClearPixelLocalStorageuiEXT(int offset, int n, uint* values)
		{
			ClearPixelLocalStorageuiEXTNative(offset, n, values);
		}

		public static void ClearPixelLocalStorageuiEXT(int offset, int n, Span<uint> values)
		{
			fixed (uint* pvalues0 = values)
			{
				ClearPixelLocalStorageuiEXTNative(offset, n, pvalues0);
			}
		}

		public static void ClearPixelLocalStorageuiEXT(int offset, int n, ref uint values)
		{
			fixed (uint* pvalues0 = &values)
			{
				ClearPixelLocalStorageuiEXTNative(offset, n, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FramebufferPixelLocalStorageSizeEXTNative(uint target, int size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1])(target, size);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[1])(target, size);
			#endif
		}

		public static void FramebufferPixelLocalStorageSizeEXT(uint target, int size)
		{
			FramebufferPixelLocalStorageSizeEXTNative(target, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int GetFramebufferPixelLocalStorageSizeEXTNative(GLFramebufferTarget target)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLFramebufferTarget, int>)funcTable[2])(target);
			#else
			return (int)((delegate* unmanaged[Cdecl]<GLFramebufferTarget, int>)funcTable[2])(target);
			#endif
		}

		public static int GetFramebufferPixelLocalStorageSizeEXT(GLFramebufferTarget target)
		{
			int ret = GetFramebufferPixelLocalStorageSizeEXTNative(target);
			return ret;
		}

	}
}
