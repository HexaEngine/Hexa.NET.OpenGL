// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGLES.EXT
{
	public static unsafe partial class GLEXTWin32KeyedMutex
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte AcquireKeyedMutexWin32EXTNative(uint memory, ulong key, uint timeout)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ulong, uint, byte>)funcTable[0])(memory, key, timeout);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, ulong, uint, byte>)funcTable[0])(memory, key, timeout);
			#endif
		}

		public static bool AcquireKeyedMutexWin32EXT(uint memory, ulong key, uint timeout)
		{
			byte ret = AcquireKeyedMutexWin32EXTNative(memory, key, timeout);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte ReleaseKeyedMutexWin32EXTNative(uint memory, ulong key)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, ulong, byte>)funcTable[1])(memory, key);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, ulong, byte>)funcTable[1])(memory, key);
			#endif
		}

		public static bool ReleaseKeyedMutexWin32EXT(uint memory, ulong key)
		{
			byte ret = ReleaseKeyedMutexWin32EXTNative(memory, key);
			return ret != 0;
		}

	}
}
