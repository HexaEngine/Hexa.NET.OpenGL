// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGLES.OES
{
	public unsafe partial class GLOESSinglePrecision
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void ClearDepthfOESNative(float depth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[0])(depth);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[0])(depth);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_OES_single_precision</remarks>
		public void ClearDepthfOES(float depth)
		{
			ClearDepthfOESNative(depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void ClipPlanefOESNative(GLClipPlaneName plane, float* equation)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLClipPlaneName, float*, void>)funcTable[1])(plane, equation);
			#else
			((delegate* unmanaged[Cdecl]<GLClipPlaneName, nint, void>)funcTable[1])(plane, (nint)equation);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_OES_single_precision</remarks>
		public void ClipPlanefOES(GLClipPlaneName plane, float* equation)
		{
			ClipPlanefOESNative(plane, equation);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_OES_single_precision</remarks>
		public void ClipPlanefOES(GLClipPlaneName plane, Span<float> equation)
		{
			fixed (float* pequation0 = equation)
			{
				ClipPlanefOESNative(plane, pequation0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_OES_single_precision</remarks>
		public void ClipPlanefOES(GLClipPlaneName plane, ref float equation)
		{
			fixed (float* pequation0 = &equation)
			{
				ClipPlanefOESNative(plane, pequation0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DepthRangefOESNative(float n, float f)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[2])(n, f);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[2])(n, f);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_OES_single_precision</remarks>
		public void DepthRangefOES(float n, float f)
		{
			DepthRangefOESNative(n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void FrustumfOESNative(float l, float r, float b, float t, float n, float f)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, void>)funcTable[3])(l, r, b, t, n, f);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, void>)funcTable[3])(l, r, b, t, n, f);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_OES_single_precision</remarks>
		public void FrustumfOES(float l, float r, float b, float t, float n, float f)
		{
			FrustumfOESNative(l, r, b, t, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetClipPlanefOESNative(GLClipPlaneName plane, float* equation)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLClipPlaneName, float*, void>)funcTable[4])(plane, equation);
			#else
			((delegate* unmanaged[Cdecl]<GLClipPlaneName, nint, void>)funcTable[4])(plane, (nint)equation);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_OES_single_precision</remarks>
		public void GetClipPlanefOES(GLClipPlaneName plane, float* equation)
		{
			GetClipPlanefOESNative(plane, equation);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_OES_single_precision</remarks>
		public void GetClipPlanefOES(GLClipPlaneName plane, Span<float> equation)
		{
			fixed (float* pequation0 = equation)
			{
				GetClipPlanefOESNative(plane, pequation0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_OES_single_precision</remarks>
		public void GetClipPlanefOES(GLClipPlaneName plane, ref float equation)
		{
			fixed (float* pequation0 = &equation)
			{
				GetClipPlanefOESNative(plane, pequation0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void OrthofOESNative(float l, float r, float b, float t, float n, float f)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, void>)funcTable[5])(l, r, b, t, n, f);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, void>)funcTable[5])(l, r, b, t, n, f);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_OES_single_precision</remarks>
		public void OrthofOES(float l, float r, float b, float t, float n, float f)
		{
			OrthofOESNative(l, r, b, t, n, f);
		}

	}
}
