// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGLES.OES
{
	public static unsafe partial class GLOES
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void AccumxOESNative(GLEnum op, int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, int, void>)funcTable[0])(op, value);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, int, void>)funcTable[0])(op, value);
			#endif
		}

		public static void AccumxOES(GLEnum op, int value)
		{
			AccumxOESNative(op, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void AlphaFuncxOESNative(GLAlphaFunction func, int reference)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLAlphaFunction, int, void>)funcTable[1])(func, reference);
			#else
			((delegate* unmanaged[Cdecl]<GLAlphaFunction, int, void>)funcTable[1])(func, reference);
			#endif
		}

		public static void AlphaFuncxOES(GLAlphaFunction func, int reference)
		{
			AlphaFuncxOESNative(func, reference);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BindFramebufferOESNative(GLFramebufferTarget target, uint framebuffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, uint, void>)funcTable[2])(target, framebuffer);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, uint, void>)funcTable[2])(target, framebuffer);
			#endif
		}

		public static void BindFramebufferOES(GLFramebufferTarget target, uint framebuffer)
		{
			BindFramebufferOESNative(target, framebuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BindRenderbufferOESNative(GLRenderbufferTarget target, uint renderbuffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, uint, void>)funcTable[3])(target, renderbuffer);
			#else
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, uint, void>)funcTable[3])(target, renderbuffer);
			#endif
		}

		public static void BindRenderbufferOES(GLRenderbufferTarget target, uint renderbuffer)
		{
			BindRenderbufferOESNative(target, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BindVertexArrayOESNative(uint array)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[4])(array);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[4])(array);
			#endif
		}

		public static void BindVertexArrayOES(uint array)
		{
			BindVertexArrayOESNative(array);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BitmapxOESNative(int width, int height, int xorig, int yorig, int xmove, int ymove, byte* bitmap)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, byte*, void>)funcTable[5])(width, height, xorig, yorig, xmove, ymove, bitmap);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, nint, void>)funcTable[5])(width, height, xorig, yorig, xmove, ymove, (nint)bitmap);
			#endif
		}

		public static void BitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, byte* bitmap)
		{
			BitmapxOESNative(width, height, xorig, yorig, xmove, ymove, bitmap);
		}

		public static void BitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, string bitmap)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (bitmap != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(bitmap);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(bitmap, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			BitmapxOESNative(width, height, xorig, yorig, xmove, ymove, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void BitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, ReadOnlySpan<byte> bitmap)
		{
			fixed (byte* pbitmap0 = bitmap)
			{
				BitmapxOESNative(width, height, xorig, yorig, xmove, ymove, pbitmap0);
			}
		}

		public static void BitmapxOES(int width, int height, int xorig, int yorig, int xmove, int ymove, ref byte bitmap)
		{
			fixed (byte* pbitmap0 = &bitmap)
			{
				BitmapxOESNative(width, height, xorig, yorig, xmove, ymove, pbitmap0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BlendColorxOESNative(int red, int green, int blue, int alpha)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[6])(red, green, blue, alpha);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[6])(red, green, blue, alpha);
			#endif
		}

		public static void BlendColorxOES(int red, int green, int blue, int alpha)
		{
			BlendColorxOESNative(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BlendEquationOESNative(GLBlendEquationModeEXT mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLBlendEquationModeEXT, void>)funcTable[7])(mode);
			#else
			((delegate* unmanaged[Cdecl]<GLBlendEquationModeEXT, void>)funcTable[7])(mode);
			#endif
		}

		public static void BlendEquationOES(GLBlendEquationModeEXT mode)
		{
			BlendEquationOESNative(mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BlendEquationSeparateOESNative(GLBlendEquationModeEXT modeRGB, GLBlendEquationModeEXT modeAlpha)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLBlendEquationModeEXT, GLBlendEquationModeEXT, void>)funcTable[8])(modeRGB, modeAlpha);
			#else
			((delegate* unmanaged[Cdecl]<GLBlendEquationModeEXT, GLBlendEquationModeEXT, void>)funcTable[8])(modeRGB, modeAlpha);
			#endif
		}

		public static void BlendEquationSeparateOES(GLBlendEquationModeEXT modeRGB, GLBlendEquationModeEXT modeAlpha)
		{
			BlendEquationSeparateOESNative(modeRGB, modeAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BlendEquationSeparateiOESNative(uint buf, GLBlendEquationModeEXT modeRGB, GLBlendEquationModeEXT modeAlpha)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLBlendEquationModeEXT, GLBlendEquationModeEXT, void>)funcTable[9])(buf, modeRGB, modeAlpha);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLBlendEquationModeEXT, GLBlendEquationModeEXT, void>)funcTable[9])(buf, modeRGB, modeAlpha);
			#endif
		}

		public static void BlendEquationSeparateiOES(uint buf, GLBlendEquationModeEXT modeRGB, GLBlendEquationModeEXT modeAlpha)
		{
			BlendEquationSeparateiOESNative(buf, modeRGB, modeAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BlendEquationiOESNative(uint buf, GLBlendEquationModeEXT mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLBlendEquationModeEXT, void>)funcTable[10])(buf, mode);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLBlendEquationModeEXT, void>)funcTable[10])(buf, mode);
			#endif
		}

		public static void BlendEquationiOES(uint buf, GLBlendEquationModeEXT mode)
		{
			BlendEquationiOESNative(buf, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BlendFuncSeparateOESNative(GLBlendingFactor srcRGB, GLBlendingFactor dstRGB, GLBlendingFactor srcAlpha, GLBlendingFactor dstAlpha)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLBlendingFactor, GLBlendingFactor, GLBlendingFactor, GLBlendingFactor, void>)funcTable[11])(srcRGB, dstRGB, srcAlpha, dstAlpha);
			#else
			((delegate* unmanaged[Cdecl]<GLBlendingFactor, GLBlendingFactor, GLBlendingFactor, GLBlendingFactor, void>)funcTable[11])(srcRGB, dstRGB, srcAlpha, dstAlpha);
			#endif
		}

		public static void BlendFuncSeparateOES(GLBlendingFactor srcRGB, GLBlendingFactor dstRGB, GLBlendingFactor srcAlpha, GLBlendingFactor dstAlpha)
		{
			BlendFuncSeparateOESNative(srcRGB, dstRGB, srcAlpha, dstAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BlendFuncSeparateiOESNative(uint buf, GLBlendingFactor srcRGB, GLBlendingFactor dstRGB, GLBlendingFactor srcAlpha, GLBlendingFactor dstAlpha)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLBlendingFactor, GLBlendingFactor, GLBlendingFactor, GLBlendingFactor, void>)funcTable[12])(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLBlendingFactor, GLBlendingFactor, GLBlendingFactor, GLBlendingFactor, void>)funcTable[12])(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
			#endif
		}

		public static void BlendFuncSeparateiOES(uint buf, GLBlendingFactor srcRGB, GLBlendingFactor dstRGB, GLBlendingFactor srcAlpha, GLBlendingFactor dstAlpha)
		{
			BlendFuncSeparateiOESNative(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BlendFunciOESNative(uint buf, GLBlendingFactor src, GLBlendingFactor dst)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLBlendingFactor, GLBlendingFactor, void>)funcTable[13])(buf, src, dst);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLBlendingFactor, GLBlendingFactor, void>)funcTable[13])(buf, src, dst);
			#endif
		}

		public static void BlendFunciOES(uint buf, GLBlendingFactor src, GLBlendingFactor dst)
		{
			BlendFunciOESNative(buf, src, dst);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static GLEnum CheckFramebufferStatusOESNative(GLFramebufferTarget target)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLEnum>)funcTable[14])(target);
			#else
			return (GLEnum)((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLEnum>)funcTable[14])(target);
			#endif
		}

		public static GLEnum CheckFramebufferStatusOES(GLFramebufferTarget target)
		{
			GLEnum ret = CheckFramebufferStatusOESNative(target);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ClearAccumxOESNative(int red, int green, int blue, int alpha)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[15])(red, green, blue, alpha);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[15])(red, green, blue, alpha);
			#endif
		}

		public static void ClearAccumxOES(int red, int green, int blue, int alpha)
		{
			ClearAccumxOESNative(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ClearColorxOESNative(int red, int green, int blue, int alpha)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[16])(red, green, blue, alpha);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[16])(red, green, blue, alpha);
			#endif
		}

		public static void ClearColorxOES(int red, int green, int blue, int alpha)
		{
			ClearColorxOESNative(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ClearDepthfOESNative(float depth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[17])(depth);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[17])(depth);
			#endif
		}

		public static void ClearDepthfOES(float depth)
		{
			ClearDepthfOESNative(depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ClearDepthxOESNative(int depth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[18])(depth);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[18])(depth);
			#endif
		}

		public static void ClearDepthxOES(int depth)
		{
			ClearDepthxOESNative(depth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ClipPlanefOESNative(GLClipPlaneName plane, float* equation)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLClipPlaneName, float*, void>)funcTable[19])(plane, equation);
			#else
			((delegate* unmanaged[Cdecl]<GLClipPlaneName, nint, void>)funcTable[19])(plane, (nint)equation);
			#endif
		}

		public static void ClipPlanefOES(GLClipPlaneName plane, float* equation)
		{
			ClipPlanefOESNative(plane, equation);
		}

		public static void ClipPlanefOES(GLClipPlaneName plane, ref float equation)
		{
			fixed (float* pequation0 = &equation)
			{
				ClipPlanefOESNative(plane, pequation0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ClipPlanexOESNative(GLClipPlaneName plane, int* equation)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLClipPlaneName, int*, void>)funcTable[20])(plane, equation);
			#else
			((delegate* unmanaged[Cdecl]<GLClipPlaneName, nint, void>)funcTable[20])(plane, (nint)equation);
			#endif
		}

		public static void ClipPlanexOES(GLClipPlaneName plane, int* equation)
		{
			ClipPlanexOESNative(plane, equation);
		}

		public static void ClipPlanexOES(GLClipPlaneName plane, ref int equation)
		{
			fixed (int* pequation0 = &equation)
			{
				ClipPlanexOESNative(plane, pequation0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Color3xOESNative(int red, int green, int blue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[21])(red, green, blue);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[21])(red, green, blue);
			#endif
		}

		public static void Color3xOES(int red, int green, int blue)
		{
			Color3xOESNative(red, green, blue);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Color3xvOESNative(int* components)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[22])(components);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[22])((nint)components);
			#endif
		}

		public static void Color3xvOES(int* components)
		{
			Color3xvOESNative(components);
		}

		public static void Color3xvOES(ref int components)
		{
			fixed (int* pcomponents0 = &components)
			{
				Color3xvOESNative(pcomponents0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Color4xOESNative(int red, int green, int blue, int alpha)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[23])(red, green, blue, alpha);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[23])(red, green, blue, alpha);
			#endif
		}

		public static void Color4xOES(int red, int green, int blue, int alpha)
		{
			Color4xOESNative(red, green, blue, alpha);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Color4xvOESNative(int* components)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[24])(components);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[24])((nint)components);
			#endif
		}

		public static void Color4xvOES(int* components)
		{
			Color4xvOESNative(components);
		}

		public static void Color4xvOES(ref int components)
		{
			fixed (int* pcomponents0 = &components)
			{
				Color4xvOESNative(pcomponents0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ColorMaskiOESNative(uint index, byte r, byte g, byte b, byte a)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)funcTable[25])(index, r, g, b, a);
			#else
			((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)funcTable[25])(index, r, g, b, a);
			#endif
		}

		public static void ColorMaskiOES(uint index, byte r, byte g, byte b, byte a)
		{
			ColorMaskiOESNative(index, r, g, b, a);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CompressedTexImage3DOESNative(GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLInternalFormat, int, int, int, int, int, void*, void>)funcTable[26])(target, level, internalformat, width, height, depth, border, imageSize, data);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLInternalFormat, int, int, int, int, int, nint, void>)funcTable[26])(target, level, internalformat, width, height, depth, border, imageSize, (nint)data);
			#endif
		}

		public static void CompressedTexImage3DOES(GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int height, int depth, int border, int imageSize, void* data)
		{
			CompressedTexImage3DOESNative(target, level, internalformat, width, height, depth, border, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CompressedTexSubImage3DOESNative(GLTextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLInternalFormat format, int imageSize, void* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, int, int, int, int, int, int, GLInternalFormat, int, void*, void>)funcTable[27])(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, int, int, int, int, int, int, GLInternalFormat, int, nint, void>)funcTable[27])(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, (nint)data);
			#endif
		}

		public static void CompressedTexSubImage3DOES(GLTextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLInternalFormat format, int imageSize, void* data)
		{
			CompressedTexSubImage3DOESNative(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConvolutionParameterxOESNative(GLConvolutionTargetEXT target, GLConvolutionParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLConvolutionTargetEXT, GLConvolutionParameter, int, void>)funcTable[28])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLConvolutionTargetEXT, GLConvolutionParameter, int, void>)funcTable[28])(target, pname, param);
			#endif
		}

		public static void ConvolutionParameterxOES(GLConvolutionTargetEXT target, GLConvolutionParameter pname, int param)
		{
			ConvolutionParameterxOESNative(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ConvolutionParameterxvOESNative(GLConvolutionTargetEXT target, GLConvolutionParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLConvolutionTargetEXT, GLConvolutionParameter, int*, void>)funcTable[29])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLConvolutionTargetEXT, GLConvolutionParameter, nint, void>)funcTable[29])(target, pname, (nint)@params);
			#endif
		}

		public static void ConvolutionParameterxvOES(GLConvolutionTargetEXT target, GLConvolutionParameter pname, int* @params)
		{
			ConvolutionParameterxvOESNative(target, pname, @params);
		}

		public static void ConvolutionParameterxvOES(GLConvolutionTargetEXT target, GLConvolutionParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				ConvolutionParameterxvOESNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CopyImageSubDataOESNative(uint srcName, GLCopyBufferSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, GLCopyBufferSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLCopyBufferSubDataTarget, int, int, int, int, uint, GLCopyBufferSubDataTarget, int, int, int, int, int, int, int, void>)funcTable[30])(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLCopyBufferSubDataTarget, int, int, int, int, uint, GLCopyBufferSubDataTarget, int, int, int, int, int, int, int, void>)funcTable[30])(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
			#endif
		}

		public static void CopyImageSubDataOES(uint srcName, GLCopyBufferSubDataTarget srcTarget, int srcLevel, int srcX, int srcY, int srcZ, uint dstName, GLCopyBufferSubDataTarget dstTarget, int dstLevel, int dstX, int dstY, int dstZ, int srcWidth, int srcHeight, int srcDepth)
		{
			CopyImageSubDataOESNative(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CopyTexSubImage3DOESNative(GLEnum target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, int, int, int, int, int, int, int, int, void>)funcTable[31])(target, level, xoffset, yoffset, zoffset, x, y, width, height);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, int, int, int, int, int, int, int, int, void>)funcTable[31])(target, level, xoffset, yoffset, zoffset, x, y, width, height);
			#endif
		}

		public static void CopyTexSubImage3DOES(GLEnum target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height)
		{
			CopyTexSubImage3DOESNative(target, level, xoffset, yoffset, zoffset, x, y, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void CurrentPaletteMatrixOESNative(uint matrixpaletteindex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[32])(matrixpaletteindex);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[32])(matrixpaletteindex);
			#endif
		}

		public static void CurrentPaletteMatrixOES(uint matrixpaletteindex)
		{
			CurrentPaletteMatrixOESNative(matrixpaletteindex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DeleteFramebuffersOESNative(int n, uint* framebuffers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[33])(n, framebuffers);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[33])(n, (nint)framebuffers);
			#endif
		}

		public static void DeleteFramebuffersOES(int n, uint* framebuffers)
		{
			DeleteFramebuffersOESNative(n, framebuffers);
		}

		public static void DeleteFramebuffersOES(int n, ref uint framebuffers)
		{
			fixed (uint* pframebuffers0 = &framebuffers)
			{
				DeleteFramebuffersOESNative(n, pframebuffers0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DeleteRenderbuffersOESNative(int n, uint* renderbuffers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[34])(n, renderbuffers);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[34])(n, (nint)renderbuffers);
			#endif
		}

		public static void DeleteRenderbuffersOES(int n, uint* renderbuffers)
		{
			DeleteRenderbuffersOESNative(n, renderbuffers);
		}

		public static void DeleteRenderbuffersOES(int n, ref uint renderbuffers)
		{
			fixed (uint* prenderbuffers0 = &renderbuffers)
			{
				DeleteRenderbuffersOESNative(n, prenderbuffers0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DeleteVertexArraysOESNative(int n, uint* arrays)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[35])(n, arrays);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[35])(n, (nint)arrays);
			#endif
		}

		public static void DeleteVertexArraysOES(int n, uint* arrays)
		{
			DeleteVertexArraysOESNative(n, arrays);
		}

		public static void DeleteVertexArraysOES(int n, ref uint arrays)
		{
			fixed (uint* parrays0 = &arrays)
			{
				DeleteVertexArraysOESNative(n, parrays0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DepthRangeArrayfvOESNative(uint first, int count, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[36])(first, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[36])(first, count, (nint)v);
			#endif
		}

		public static void DepthRangeArrayfvOES(uint first, int count, float* v)
		{
			DepthRangeArrayfvOESNative(first, count, v);
		}

		public static void DepthRangeArrayfvOES(uint first, int count, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				DepthRangeArrayfvOESNative(first, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DepthRangeIndexedfOESNative(uint index, float n, float f)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[37])(index, n, f);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[37])(index, n, f);
			#endif
		}

		public static void DepthRangeIndexedfOES(uint index, float n, float f)
		{
			DepthRangeIndexedfOESNative(index, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DepthRangefOESNative(float n, float f)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[38])(n, f);
			#else
			((delegate* unmanaged[Cdecl]<float, float, void>)funcTable[38])(n, f);
			#endif
		}

		public static void DepthRangefOES(float n, float f)
		{
			DepthRangefOESNative(n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DepthRangexOESNative(int n, int f)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[39])(n, f);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[39])(n, f);
			#endif
		}

		public static void DepthRangexOES(int n, int f)
		{
			DepthRangexOESNative(n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DisableiOESNative(GLEnableCap target, uint index)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnableCap, uint, void>)funcTable[40])(target, index);
			#else
			((delegate* unmanaged[Cdecl]<GLEnableCap, uint, void>)funcTable[40])(target, index);
			#endif
		}

		public static void DisableiOES(GLEnableCap target, uint index)
		{
			DisableiOESNative(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawElementsBaseVertexOESNative(GLPrimitiveType mode, int count, GLDrawElementsType type, void* indices, int basevertex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int, GLDrawElementsType, void*, int, void>)funcTable[41])(mode, count, type, indices, basevertex);
			#else
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int, GLDrawElementsType, nint, int, void>)funcTable[41])(mode, count, type, (nint)indices, basevertex);
			#endif
		}

		public static void DrawElementsBaseVertexOES(GLPrimitiveType mode, int count, GLDrawElementsType type, void* indices, int basevertex)
		{
			DrawElementsBaseVertexOESNative(mode, count, type, indices, basevertex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawElementsInstancedBaseVertexOESNative(GLPrimitiveType mode, int count, GLDrawElementsType type, void* indices, int instancecount, int basevertex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int, GLDrawElementsType, void*, int, int, void>)funcTable[42])(mode, count, type, indices, instancecount, basevertex);
			#else
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int, GLDrawElementsType, nint, int, int, void>)funcTable[42])(mode, count, type, (nint)indices, instancecount, basevertex);
			#endif
		}

		public static void DrawElementsInstancedBaseVertexOES(GLPrimitiveType mode, int count, GLDrawElementsType type, void* indices, int instancecount, int basevertex)
		{
			DrawElementsInstancedBaseVertexOESNative(mode, count, type, indices, instancecount, basevertex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawRangeElementsBaseVertexOESNative(GLPrimitiveType mode, uint start, uint end, int count, GLDrawElementsType type, void* indices, int basevertex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, uint, uint, int, GLDrawElementsType, void*, int, void>)funcTable[43])(mode, start, end, count, type, indices, basevertex);
			#else
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, uint, uint, int, GLDrawElementsType, nint, int, void>)funcTable[43])(mode, start, end, count, type, (nint)indices, basevertex);
			#endif
		}

		public static void DrawRangeElementsBaseVertexOES(GLPrimitiveType mode, uint start, uint end, int count, GLDrawElementsType type, void* indices, int basevertex)
		{
			DrawRangeElementsBaseVertexOESNative(mode, start, end, count, type, indices, basevertex);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTexfOESNative(float x, float y, float z, float width, float height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, float, void>)funcTable[44])(x, y, z, width, height);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, float, void>)funcTable[44])(x, y, z, width, height);
			#endif
		}

		public static void DrawTexfOES(float x, float y, float z, float width, float height)
		{
			DrawTexfOESNative(x, y, z, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTexfvOESNative(float* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float*, void>)funcTable[45])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[45])((nint)coords);
			#endif
		}

		public static void DrawTexfvOES(float* coords)
		{
			DrawTexfvOESNative(coords);
		}

		public static void DrawTexfvOES(ref float coords)
		{
			fixed (float* pcoords0 = &coords)
			{
				DrawTexfvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTexiOESNative(int x, int y, int z, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, void>)funcTable[46])(x, y, z, width, height);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, void>)funcTable[46])(x, y, z, width, height);
			#endif
		}

		public static void DrawTexiOES(int x, int y, int z, int width, int height)
		{
			DrawTexiOESNative(x, y, z, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTexivOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[47])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[47])((nint)coords);
			#endif
		}

		public static void DrawTexivOES(int* coords)
		{
			DrawTexivOESNative(coords);
		}

		public static void DrawTexivOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				DrawTexivOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTexsOESNative(short x, short y, short z, short width, short height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short, short, short, short, short, void>)funcTable[48])(x, y, z, width, height);
			#else
			((delegate* unmanaged[Cdecl]<short, short, short, short, short, void>)funcTable[48])(x, y, z, width, height);
			#endif
		}

		public static void DrawTexsOES(short x, short y, short z, short width, short height)
		{
			DrawTexsOESNative(x, y, z, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTexsvOESNative(short* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<short*, void>)funcTable[49])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[49])((nint)coords);
			#endif
		}

		public static void DrawTexsvOES(short* coords)
		{
			DrawTexsvOESNative(coords);
		}

		public static void DrawTexsvOES(ref short coords)
		{
			fixed (short* pcoords0 = &coords)
			{
				DrawTexsvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTexxOESNative(int x, int y, int z, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, void>)funcTable[50])(x, y, z, width, height);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, void>)funcTable[50])(x, y, z, width, height);
			#endif
		}

		public static void DrawTexxOES(int x, int y, int z, int width, int height)
		{
			DrawTexxOESNative(x, y, z, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTexxvOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[51])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[51])((nint)coords);
			#endif
		}

		public static void DrawTexxvOES(int* coords)
		{
			DrawTexxvOESNative(coords);
		}

		public static void DrawTexxvOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				DrawTexxvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EGLImageTargetRenderbufferStorageOESNative(GLEnum target, GLeglImageOES image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, GLeglImageOES, void>)funcTable[52])(target, image);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, GLeglImageOES, void>)funcTable[52])(target, image);
			#endif
		}

		public static void EGLImageTargetRenderbufferStorageOES(GLEnum target, GLeglImageOES image)
		{
			EGLImageTargetRenderbufferStorageOESNative(target, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EGLImageTargetTexture2DOESNative(GLEnum target, GLeglImageOES image)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, GLeglImageOES, void>)funcTable[53])(target, image);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, GLeglImageOES, void>)funcTable[53])(target, image);
			#endif
		}

		public static void EGLImageTargetTexture2DOES(GLEnum target, GLeglImageOES image)
		{
			EGLImageTargetTexture2DOESNative(target, image);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EnableiOESNative(GLEnableCap target, uint index)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnableCap, uint, void>)funcTable[54])(target, index);
			#else
			((delegate* unmanaged[Cdecl]<GLEnableCap, uint, void>)funcTable[54])(target, index);
			#endif
		}

		public static void EnableiOES(GLEnableCap target, uint index)
		{
			EnableiOESNative(target, index);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EvalCoord1xOESNative(int u)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[55])(u);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[55])(u);
			#endif
		}

		public static void EvalCoord1xOES(int u)
		{
			EvalCoord1xOESNative(u);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EvalCoord1xvOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[56])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[56])((nint)coords);
			#endif
		}

		public static void EvalCoord1xvOES(int* coords)
		{
			EvalCoord1xvOESNative(coords);
		}

		public static void EvalCoord1xvOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				EvalCoord1xvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EvalCoord2xOESNative(int u, int v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[57])(u, v);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[57])(u, v);
			#endif
		}

		public static void EvalCoord2xOES(int u, int v)
		{
			EvalCoord2xOESNative(u, v);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EvalCoord2xvOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[58])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[58])((nint)coords);
			#endif
		}

		public static void EvalCoord2xvOES(int* coords)
		{
			EvalCoord2xvOESNative(coords);
		}

		public static void EvalCoord2xvOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				EvalCoord2xvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FeedbackBufferxOESNative(int n, GLEnum type, int* buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, GLEnum, int*, void>)funcTable[59])(n, type, buffer);
			#else
			((delegate* unmanaged[Cdecl]<int, GLEnum, nint, void>)funcTable[59])(n, type, (nint)buffer);
			#endif
		}

		public static void FeedbackBufferxOES(int n, GLEnum type, int* buffer)
		{
			FeedbackBufferxOESNative(n, type, buffer);
		}

		public static void FeedbackBufferxOES(int n, GLEnum type, ref int buffer)
		{
			fixed (int* pbuffer0 = &buffer)
			{
				FeedbackBufferxOESNative(n, type, pbuffer0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FogxOESNative(GLFogPName pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFogPName, int, void>)funcTable[60])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLFogPName, int, void>)funcTable[60])(pname, param);
			#endif
		}

		public static void FogxOES(GLFogPName pname, int param)
		{
			FogxOESNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FogxvOESNative(GLFogPName pname, int* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFogPName, int*, void>)funcTable[61])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLFogPName, nint, void>)funcTable[61])(pname, (nint)param);
			#endif
		}

		public static void FogxvOES(GLFogPName pname, int* param)
		{
			FogxvOESNative(pname, param);
		}

		public static void FogxvOES(GLFogPName pname, ref int param)
		{
			fixed (int* pparam0 = &param)
			{
				FogxvOESNative(pname, pparam0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FramebufferRenderbufferOESNative(GLFramebufferTarget target, GLFramebufferAttachment attachment, GLRenderbufferTarget renderbuffertarget, uint renderbuffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, GLRenderbufferTarget, uint, void>)funcTable[62])(target, attachment, renderbuffertarget, renderbuffer);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, GLRenderbufferTarget, uint, void>)funcTable[62])(target, attachment, renderbuffertarget, renderbuffer);
			#endif
		}

		public static void FramebufferRenderbufferOES(GLFramebufferTarget target, GLFramebufferAttachment attachment, GLRenderbufferTarget renderbuffertarget, uint renderbuffer)
		{
			FramebufferRenderbufferOESNative(target, attachment, renderbuffertarget, renderbuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FramebufferTexture2DOESNative(GLFramebufferTarget target, GLFramebufferAttachment attachment, GLTextureTarget textarget, uint texture, int level)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, GLTextureTarget, uint, int, void>)funcTable[63])(target, attachment, textarget, texture, level);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, GLTextureTarget, uint, int, void>)funcTable[63])(target, attachment, textarget, texture, level);
			#endif
		}

		public static void FramebufferTexture2DOES(GLFramebufferTarget target, GLFramebufferAttachment attachment, GLTextureTarget textarget, uint texture, int level)
		{
			FramebufferTexture2DOESNative(target, attachment, textarget, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FramebufferTexture3DOESNative(GLFramebufferTarget target, GLFramebufferAttachment attachment, GLTextureTarget textarget, uint texture, int level, int zoffset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, GLTextureTarget, uint, int, int, void>)funcTable[64])(target, attachment, textarget, texture, level, zoffset);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, GLTextureTarget, uint, int, int, void>)funcTable[64])(target, attachment, textarget, texture, level, zoffset);
			#endif
		}

		public static void FramebufferTexture3DOES(GLFramebufferTarget target, GLFramebufferAttachment attachment, GLTextureTarget textarget, uint texture, int level, int zoffset)
		{
			FramebufferTexture3DOESNative(target, attachment, textarget, texture, level, zoffset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FramebufferTextureOESNative(GLFramebufferTarget target, GLFramebufferAttachment attachment, uint texture, int level)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, uint, int, void>)funcTable[65])(target, attachment, texture, level);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, uint, int, void>)funcTable[65])(target, attachment, texture, level);
			#endif
		}

		public static void FramebufferTextureOES(GLFramebufferTarget target, GLFramebufferAttachment attachment, uint texture, int level)
		{
			FramebufferTextureOESNative(target, attachment, texture, level);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FrustumfOESNative(float l, float r, float b, float t, float n, float f)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, void>)funcTable[66])(l, r, b, t, n, f);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, void>)funcTable[66])(l, r, b, t, n, f);
			#endif
		}

		public static void FrustumfOES(float l, float r, float b, float t, float n, float f)
		{
			FrustumfOESNative(l, r, b, t, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FrustumxOESNative(int l, int r, int b, int t, int n, int f)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, void>)funcTable[67])(l, r, b, t, n, f);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, void>)funcTable[67])(l, r, b, t, n, f);
			#endif
		}

		public static void FrustumxOES(int l, int r, int b, int t, int n, int f)
		{
			FrustumxOESNative(l, r, b, t, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GenFramebuffersOESNative(int n, uint* framebuffers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[68])(n, framebuffers);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[68])(n, (nint)framebuffers);
			#endif
		}

		public static void GenFramebuffersOES(int n, uint* framebuffers)
		{
			GenFramebuffersOESNative(n, framebuffers);
		}

		public static void GenFramebuffersOES(int n, ref uint framebuffers)
		{
			fixed (uint* pframebuffers0 = &framebuffers)
			{
				GenFramebuffersOESNative(n, pframebuffers0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GenRenderbuffersOESNative(int n, uint* renderbuffers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[69])(n, renderbuffers);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[69])(n, (nint)renderbuffers);
			#endif
		}

		public static void GenRenderbuffersOES(int n, uint* renderbuffers)
		{
			GenRenderbuffersOESNative(n, renderbuffers);
		}

		public static void GenRenderbuffersOES(int n, ref uint renderbuffers)
		{
			fixed (uint* prenderbuffers0 = &renderbuffers)
			{
				GenRenderbuffersOESNative(n, prenderbuffers0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GenVertexArraysOESNative(int n, uint* arrays)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[70])(n, arrays);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[70])(n, (nint)arrays);
			#endif
		}

		public static void GenVertexArraysOES(int n, uint* arrays)
		{
			GenVertexArraysOESNative(n, arrays);
		}

		public static void GenVertexArraysOES(int n, ref uint arrays)
		{
			fixed (uint* parrays0 = &arrays)
			{
				GenVertexArraysOESNative(n, parrays0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GenerateMipmapOESNative(GLTextureTarget target)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, void>)funcTable[71])(target);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, void>)funcTable[71])(target);
			#endif
		}

		public static void GenerateMipmapOES(GLTextureTarget target)
		{
			GenerateMipmapOESNative(target);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetBufferPointervOESNative(GLBufferTargetARB target, GLBufferPointerNameARB pname, void** @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLBufferTargetARB, GLBufferPointerNameARB, void**, void>)funcTable[72])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLBufferTargetARB, GLBufferPointerNameARB, nint, void>)funcTable[72])(target, pname, (nint)@params);
			#endif
		}

		public static void GetBufferPointervOES(GLBufferTargetARB target, GLBufferPointerNameARB pname, void** @params)
		{
			GetBufferPointervOESNative(target, pname, @params);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetClipPlanefOESNative(GLClipPlaneName plane, float* equation)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLClipPlaneName, float*, void>)funcTable[73])(plane, equation);
			#else
			((delegate* unmanaged[Cdecl]<GLClipPlaneName, nint, void>)funcTable[73])(plane, (nint)equation);
			#endif
		}

		public static void GetClipPlanefOES(GLClipPlaneName plane, float* equation)
		{
			GetClipPlanefOESNative(plane, equation);
		}

		public static void GetClipPlanefOES(GLClipPlaneName plane, ref float equation)
		{
			fixed (float* pequation0 = &equation)
			{
				GetClipPlanefOESNative(plane, pequation0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetClipPlanexOESNative(GLClipPlaneName plane, int* equation)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLClipPlaneName, int*, void>)funcTable[74])(plane, equation);
			#else
			((delegate* unmanaged[Cdecl]<GLClipPlaneName, nint, void>)funcTable[74])(plane, (nint)equation);
			#endif
		}

		public static void GetClipPlanexOES(GLClipPlaneName plane, int* equation)
		{
			GetClipPlanexOESNative(plane, equation);
		}

		public static void GetClipPlanexOES(GLClipPlaneName plane, ref int equation)
		{
			fixed (int* pequation0 = &equation)
			{
				GetClipPlanexOESNative(plane, pequation0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetConvolutionParameterxvOESNative(GLEnum target, GLEnum pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, GLEnum, int*, void>)funcTable[75])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, GLEnum, nint, void>)funcTable[75])(target, pname, (nint)@params);
			#endif
		}

		public static void GetConvolutionParameterxvOES(GLEnum target, GLEnum pname, int* @params)
		{
			GetConvolutionParameterxvOESNative(target, pname, @params);
		}

		public static void GetConvolutionParameterxvOES(GLEnum target, GLEnum pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetConvolutionParameterxvOESNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetFixedvOESNative(GLGetPName pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLGetPName, int*, void>)funcTable[76])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLGetPName, nint, void>)funcTable[76])(pname, (nint)@params);
			#endif
		}

		public static void GetFixedvOES(GLGetPName pname, int* @params)
		{
			GetFixedvOESNative(pname, @params);
		}

		public static void GetFixedvOES(GLGetPName pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetFixedvOESNative(pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetFloati_vOESNative(GLGetPName target, uint index, float* data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLGetPName, uint, float*, void>)funcTable[77])(target, index, data);
			#else
			((delegate* unmanaged[Cdecl]<GLGetPName, uint, nint, void>)funcTable[77])(target, index, (nint)data);
			#endif
		}

		public static void GetFloati_vOES(GLGetPName target, uint index, float* data)
		{
			GetFloati_vOESNative(target, index, data);
		}

		public static void GetFloati_vOES(GLGetPName target, uint index, ref float data)
		{
			fixed (float* pdata0 = &data)
			{
				GetFloati_vOESNative(target, index, pdata0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetFramebufferAttachmentParameterivOESNative(GLFramebufferTarget target, GLFramebufferAttachment attachment, GLFramebufferAttachmentParameterName pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, GLFramebufferAttachmentParameterName, int*, void>)funcTable[78])(target, attachment, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLFramebufferTarget, GLFramebufferAttachment, GLFramebufferAttachmentParameterName, nint, void>)funcTable[78])(target, attachment, pname, (nint)@params);
			#endif
		}

		public static void GetFramebufferAttachmentParameterivOES(GLFramebufferTarget target, GLFramebufferAttachment attachment, GLFramebufferAttachmentParameterName pname, int* @params)
		{
			GetFramebufferAttachmentParameterivOESNative(target, attachment, pname, @params);
		}

		public static void GetFramebufferAttachmentParameterivOES(GLFramebufferTarget target, GLFramebufferAttachment attachment, GLFramebufferAttachmentParameterName pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetFramebufferAttachmentParameterivOESNative(target, attachment, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetHistogramParameterxvOESNative(GLHistogramTargetEXT target, GLGetHistogramParameterPNameEXT pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, GLGetHistogramParameterPNameEXT, int*, void>)funcTable[79])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLHistogramTargetEXT, GLGetHistogramParameterPNameEXT, nint, void>)funcTable[79])(target, pname, (nint)@params);
			#endif
		}

		public static void GetHistogramParameterxvOES(GLHistogramTargetEXT target, GLGetHistogramParameterPNameEXT pname, int* @params)
		{
			GetHistogramParameterxvOESNative(target, pname, @params);
		}

		public static void GetHistogramParameterxvOES(GLHistogramTargetEXT target, GLGetHistogramParameterPNameEXT pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetHistogramParameterxvOESNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetLightxOESNative(GLLightName light, GLLightParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLLightName, GLLightParameter, int*, void>)funcTable[80])(light, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLLightName, GLLightParameter, nint, void>)funcTable[80])(light, pname, (nint)@params);
			#endif
		}

		public static void GetLightxOES(GLLightName light, GLLightParameter pname, int* @params)
		{
			GetLightxOESNative(light, pname, @params);
		}

		public static void GetLightxOES(GLLightName light, GLLightParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetLightxOESNative(light, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetLightxvOESNative(GLLightName light, GLLightParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLLightName, GLLightParameter, int*, void>)funcTable[81])(light, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLLightName, GLLightParameter, nint, void>)funcTable[81])(light, pname, (nint)@params);
			#endif
		}

		public static void GetLightxvOES(GLLightName light, GLLightParameter pname, int* @params)
		{
			GetLightxvOESNative(light, pname, @params);
		}

		public static void GetLightxvOES(GLLightName light, GLLightParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetLightxvOESNative(light, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetMapxvOESNative(GLMapTarget target, GLGetMapQuery query, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMapTarget, GLGetMapQuery, int*, void>)funcTable[82])(target, query, v);
			#else
			((delegate* unmanaged[Cdecl]<GLMapTarget, GLGetMapQuery, nint, void>)funcTable[82])(target, query, (nint)v);
			#endif
		}

		public static void GetMapxvOES(GLMapTarget target, GLGetMapQuery query, int* v)
		{
			GetMapxvOESNative(target, query, v);
		}

		public static void GetMapxvOES(GLMapTarget target, GLGetMapQuery query, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				GetMapxvOESNative(target, query, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetMaterialxOESNative(GLTriangleFace face, GLMaterialParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLMaterialParameter, int, void>)funcTable[83])(face, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLMaterialParameter, int, void>)funcTable[83])(face, pname, param);
			#endif
		}

		public static void GetMaterialxOES(GLTriangleFace face, GLMaterialParameter pname, int param)
		{
			GetMaterialxOESNative(face, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetMaterialxvOESNative(GLTriangleFace face, GLMaterialParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLMaterialParameter, int*, void>)funcTable[84])(face, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLMaterialParameter, nint, void>)funcTable[84])(face, pname, (nint)@params);
			#endif
		}

		public static void GetMaterialxvOES(GLTriangleFace face, GLMaterialParameter pname, int* @params)
		{
			GetMaterialxvOESNative(face, pname, @params);
		}

		public static void GetMaterialxvOES(GLTriangleFace face, GLMaterialParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetMaterialxvOESNative(face, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetPixelMapxvNative(GLPixelMap map, int size, int* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelMap, int, int*, void>)funcTable[85])(map, size, values);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelMap, int, nint, void>)funcTable[85])(map, size, (nint)values);
			#endif
		}

		public static void GetPixelMapxv(GLPixelMap map, int size, int* values)
		{
			GetPixelMapxvNative(map, size, values);
		}

		public static void GetPixelMapxv(GLPixelMap map, int size, ref int values)
		{
			fixed (int* pvalues0 = &values)
			{
				GetPixelMapxvNative(map, size, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetProgramBinaryOESNative(uint program, int bufSize, int* length, GLEnum* binaryFormat, void* binary)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int*, GLEnum*, void*, void>)funcTable[86])(program, bufSize, length, binaryFormat, binary);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, nint, void>)funcTable[86])(program, bufSize, (nint)length, (nint)binaryFormat, (nint)binary);
			#endif
		}

		public static void GetProgramBinaryOES(uint program, int bufSize, int* length, GLEnum* binaryFormat, void* binary)
		{
			GetProgramBinaryOESNative(program, bufSize, length, binaryFormat, binary);
		}

		public static void GetProgramBinaryOES(uint program, int bufSize, ref int length, GLEnum* binaryFormat, void* binary)
		{
			fixed (int* plength0 = &length)
			{
				GetProgramBinaryOESNative(program, bufSize, plength0, binaryFormat, binary);
			}
		}

		public static void GetProgramBinaryOES(uint program, int bufSize, int* length, ref GLEnum binaryFormat, void* binary)
		{
			fixed (GLEnum* pbinaryFormat0 = &binaryFormat)
			{
				GetProgramBinaryOESNative(program, bufSize, length, pbinaryFormat0, binary);
			}
		}

		public static void GetProgramBinaryOES(uint program, int bufSize, ref int length, ref GLEnum binaryFormat, void* binary)
		{
			fixed (int* plength0 = &length)
			{
				fixed (GLEnum* pbinaryFormat1 = &binaryFormat)
				{
					GetProgramBinaryOESNative(program, bufSize, plength0, pbinaryFormat1, binary);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetRenderbufferParameterivOESNative(GLRenderbufferTarget target, GLRenderbufferParameterName pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, GLRenderbufferParameterName, int*, void>)funcTable[87])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, GLRenderbufferParameterName, nint, void>)funcTable[87])(target, pname, (nint)@params);
			#endif
		}

		public static void GetRenderbufferParameterivOES(GLRenderbufferTarget target, GLRenderbufferParameterName pname, int* @params)
		{
			GetRenderbufferParameterivOESNative(target, pname, @params);
		}

		public static void GetRenderbufferParameterivOES(GLRenderbufferTarget target, GLRenderbufferParameterName pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetRenderbufferParameterivOESNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetSamplerParameterIivOESNative(uint sampler, GLSamplerParameterI pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int*, void>)funcTable[88])(sampler, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, nint, void>)funcTable[88])(sampler, pname, (nint)@params);
			#endif
		}

		public static void GetSamplerParameterIivOES(uint sampler, GLSamplerParameterI pname, int* @params)
		{
			GetSamplerParameterIivOESNative(sampler, pname, @params);
		}

		public static void GetSamplerParameterIivOES(uint sampler, GLSamplerParameterI pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetSamplerParameterIivOESNative(sampler, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetSamplerParameterIuivOESNative(uint sampler, GLSamplerParameterI pname, uint* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, uint*, void>)funcTable[89])(sampler, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, nint, void>)funcTable[89])(sampler, pname, (nint)@params);
			#endif
		}

		public static void GetSamplerParameterIuivOES(uint sampler, GLSamplerParameterI pname, uint* @params)
		{
			GetSamplerParameterIuivOESNative(sampler, pname, @params);
		}

		public static void GetSamplerParameterIuivOES(uint sampler, GLSamplerParameterI pname, ref uint @params)
		{
			fixed (uint* pparams0 = &@params)
			{
				GetSamplerParameterIuivOESNative(sampler, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetTexEnvxvOESNative(GLTextureEnvTarget target, GLTextureEnvParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureEnvTarget, GLTextureEnvParameter, int*, void>)funcTable[90])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureEnvTarget, GLTextureEnvParameter, nint, void>)funcTable[90])(target, pname, (nint)@params);
			#endif
		}

		public static void GetTexEnvxvOES(GLTextureEnvTarget target, GLTextureEnvParameter pname, int* @params)
		{
			GetTexEnvxvOESNative(target, pname, @params);
		}

		public static void GetTexEnvxvOES(GLTextureEnvTarget target, GLTextureEnvParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetTexEnvxvOESNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetTexGenfvOESNative(GLTextureCoordName coord, GLTextureGenParameter pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, float*, void>)funcTable[91])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, nint, void>)funcTable[91])(coord, pname, (nint)@params);
			#endif
		}

		public static void GetTexGenfvOES(GLTextureCoordName coord, GLTextureGenParameter pname, float* @params)
		{
			GetTexGenfvOESNative(coord, pname, @params);
		}

		public static void GetTexGenfvOES(GLTextureCoordName coord, GLTextureGenParameter pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				GetTexGenfvOESNative(coord, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetTexGenivOESNative(GLTextureCoordName coord, GLTextureGenParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, int*, void>)funcTable[92])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, nint, void>)funcTable[92])(coord, pname, (nint)@params);
			#endif
		}

		public static void GetTexGenivOES(GLTextureCoordName coord, GLTextureGenParameter pname, int* @params)
		{
			GetTexGenivOESNative(coord, pname, @params);
		}

		public static void GetTexGenivOES(GLTextureCoordName coord, GLTextureGenParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetTexGenivOESNative(coord, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetTexGenxvOESNative(GLTextureCoordName coord, GLTextureGenParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, int*, void>)funcTable[93])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, nint, void>)funcTable[93])(coord, pname, (nint)@params);
			#endif
		}

		public static void GetTexGenxvOES(GLTextureCoordName coord, GLTextureGenParameter pname, int* @params)
		{
			GetTexGenxvOESNative(coord, pname, @params);
		}

		public static void GetTexGenxvOES(GLTextureCoordName coord, GLTextureGenParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetTexGenxvOESNative(coord, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetTexLevelParameterxvOESNative(GLTextureTarget target, int level, GLGetTextureParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLGetTextureParameter, int*, void>)funcTable[94])(target, level, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLGetTextureParameter, nint, void>)funcTable[94])(target, level, pname, (nint)@params);
			#endif
		}

		public static void GetTexLevelParameterxvOES(GLTextureTarget target, int level, GLGetTextureParameter pname, int* @params)
		{
			GetTexLevelParameterxvOESNative(target, level, pname, @params);
		}

		public static void GetTexLevelParameterxvOES(GLTextureTarget target, int level, GLGetTextureParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetTexLevelParameterxvOESNative(target, level, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetTexParameterIivOESNative(GLTextureTarget target, GLGetTextureParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLGetTextureParameter, int*, void>)funcTable[95])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLGetTextureParameter, nint, void>)funcTable[95])(target, pname, (nint)@params);
			#endif
		}

		public static void GetTexParameterIivOES(GLTextureTarget target, GLGetTextureParameter pname, int* @params)
		{
			GetTexParameterIivOESNative(target, pname, @params);
		}

		public static void GetTexParameterIivOES(GLTextureTarget target, GLGetTextureParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetTexParameterIivOESNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetTexParameterIuivOESNative(GLTextureTarget target, GLGetTextureParameter pname, uint* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLGetTextureParameter, uint*, void>)funcTable[96])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLGetTextureParameter, nint, void>)funcTable[96])(target, pname, (nint)@params);
			#endif
		}

		public static void GetTexParameterIuivOES(GLTextureTarget target, GLGetTextureParameter pname, uint* @params)
		{
			GetTexParameterIuivOESNative(target, pname, @params);
		}

		public static void GetTexParameterIuivOES(GLTextureTarget target, GLGetTextureParameter pname, ref uint @params)
		{
			fixed (uint* pparams0 = &@params)
			{
				GetTexParameterIuivOESNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetTexParameterxvOESNative(GLTextureTarget target, GLGetTextureParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLGetTextureParameter, int*, void>)funcTable[97])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLGetTextureParameter, nint, void>)funcTable[97])(target, pname, (nint)@params);
			#endif
		}

		public static void GetTexParameterxvOES(GLTextureTarget target, GLGetTextureParameter pname, int* @params)
		{
			GetTexParameterxvOESNative(target, pname, @params);
		}

		public static void GetTexParameterxvOES(GLTextureTarget target, GLGetTextureParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetTexParameterxvOESNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void IndexxOESNative(int component)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[98])(component);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[98])(component);
			#endif
		}

		public static void IndexxOES(int component)
		{
			IndexxOESNative(component);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void IndexxvOESNative(int* component)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[99])(component);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[99])((nint)component);
			#endif
		}

		public static void IndexxvOES(int* component)
		{
			IndexxvOESNative(component);
		}

		public static void IndexxvOES(ref int component)
		{
			fixed (int* pcomponent0 = &component)
			{
				IndexxvOESNative(pcomponent0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsEnablediOESNative(GLEnableCap target, uint index)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLEnableCap, uint, byte>)funcTable[100])(target, index);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<GLEnableCap, uint, byte>)funcTable[100])(target, index);
			#endif
		}

		public static bool IsEnablediOES(GLEnableCap target, uint index)
		{
			byte ret = IsEnablediOESNative(target, index);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsFramebufferOESNative(uint framebuffer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[101])(framebuffer);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[101])(framebuffer);
			#endif
		}

		public static bool IsFramebufferOES(uint framebuffer)
		{
			byte ret = IsFramebufferOESNative(framebuffer);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsRenderbufferOESNative(uint renderbuffer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[102])(renderbuffer);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[102])(renderbuffer);
			#endif
		}

		public static bool IsRenderbufferOES(uint renderbuffer)
		{
			byte ret = IsRenderbufferOESNative(renderbuffer);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsVertexArrayOESNative(uint array)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[103])(array);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[103])(array);
			#endif
		}

		public static bool IsVertexArrayOES(uint array)
		{
			byte ret = IsVertexArrayOESNative(array);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LightModelxOESNative(GLLightModelParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLLightModelParameter, int, void>)funcTable[104])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLLightModelParameter, int, void>)funcTable[104])(pname, param);
			#endif
		}

		public static void LightModelxOES(GLLightModelParameter pname, int param)
		{
			LightModelxOESNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LightModelxvOESNative(GLLightModelParameter pname, int* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLLightModelParameter, int*, void>)funcTable[105])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLLightModelParameter, nint, void>)funcTable[105])(pname, (nint)param);
			#endif
		}

		public static void LightModelxvOES(GLLightModelParameter pname, int* param)
		{
			LightModelxvOESNative(pname, param);
		}

		public static void LightModelxvOES(GLLightModelParameter pname, ref int param)
		{
			fixed (int* pparam0 = &param)
			{
				LightModelxvOESNative(pname, pparam0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LightxOESNative(GLLightName light, GLLightParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLLightName, GLLightParameter, int, void>)funcTable[106])(light, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLLightName, GLLightParameter, int, void>)funcTable[106])(light, pname, param);
			#endif
		}

		public static void LightxOES(GLLightName light, GLLightParameter pname, int param)
		{
			LightxOESNative(light, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LightxvOESNative(GLLightName light, GLLightParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLLightName, GLLightParameter, int*, void>)funcTable[107])(light, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLLightName, GLLightParameter, nint, void>)funcTable[107])(light, pname, (nint)@params);
			#endif
		}

		public static void LightxvOES(GLLightName light, GLLightParameter pname, int* @params)
		{
			LightxvOESNative(light, pname, @params);
		}

		public static void LightxvOES(GLLightName light, GLLightParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				LightxvOESNative(light, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LineWidthxOESNative(int width)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[108])(width);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[108])(width);
			#endif
		}

		public static void LineWidthxOES(int width)
		{
			LineWidthxOESNative(width);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LoadMatrixxOESNative(int* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[109])(m);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[109])((nint)m);
			#endif
		}

		public static void LoadMatrixxOES(int* m)
		{
			LoadMatrixxOESNative(m);
		}

		public static void LoadMatrixxOES(ref int m)
		{
			fixed (int* pm0 = &m)
			{
				LoadMatrixxOESNative(pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LoadPaletteFromModelViewMatrixOESNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[110])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[110])();
			#endif
		}

		public static void LoadPaletteFromModelViewMatrixOES()
		{
			LoadPaletteFromModelViewMatrixOESNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LoadTransposeMatrixxOESNative(int* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[111])(m);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[111])((nint)m);
			#endif
		}

		public static void LoadTransposeMatrixxOES(int* m)
		{
			LoadTransposeMatrixxOESNative(m);
		}

		public static void LoadTransposeMatrixxOES(ref int m)
		{
			fixed (int* pm0 = &m)
			{
				LoadTransposeMatrixxOESNative(pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Map1xOESNative(GLMapTarget target, int u1, int u2, int stride, int order, int points)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMapTarget, int, int, int, int, int, void>)funcTable[112])(target, u1, u2, stride, order, points);
			#else
			((delegate* unmanaged[Cdecl]<GLMapTarget, int, int, int, int, int, void>)funcTable[112])(target, u1, u2, stride, order, points);
			#endif
		}

		public static void Map1xOES(GLMapTarget target, int u1, int u2, int stride, int order, int points)
		{
			Map1xOESNative(target, u1, u2, stride, order, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Map2xOESNative(GLMapTarget target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLMapTarget, int, int, int, int, int, int, int, int, int, void>)funcTable[113])(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
			#else
			((delegate* unmanaged[Cdecl]<GLMapTarget, int, int, int, int, int, int, int, int, int, void>)funcTable[113])(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
			#endif
		}

		public static void Map2xOES(GLMapTarget target, int u1, int u2, int ustride, int uorder, int v1, int v2, int vstride, int vorder, int points)
		{
			Map2xOESNative(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void* MapBufferOESNative(GLBufferTargetARB target, GLBufferAccessARB access)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLBufferTargetARB, GLBufferAccessARB, void*>)funcTable[114])(target, access);
			#else
			return (void*)((delegate* unmanaged[Cdecl]<GLBufferTargetARB, GLBufferAccessARB, nint>)funcTable[114])(target, access);
			#endif
		}

		public static void* MapBufferOES(GLBufferTargetARB target, GLBufferAccessARB access)
		{
			void* ret = MapBufferOESNative(target, access);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MapGrid1xOESNative(int n, int u1, int u2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[115])(n, u1, u2);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[115])(n, u1, u2);
			#endif
		}

		public static void MapGrid1xOES(int n, int u1, int u2)
		{
			MapGrid1xOESNative(n, u1, u2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MapGrid2xOESNative(int n, int u1, int u2, int v1, int v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, void>)funcTable[116])(n, u1, u2, v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, void>)funcTable[116])(n, u1, u2, v1, v2);
			#endif
		}

		public static void MapGrid2xOES(int n, int u1, int u2, int v1, int v2)
		{
			MapGrid2xOESNative(n, u1, u2, v1, v2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MaterialxOESNative(GLTriangleFace face, GLMaterialParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLMaterialParameter, int, void>)funcTable[117])(face, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLMaterialParameter, int, void>)funcTable[117])(face, pname, param);
			#endif
		}

		public static void MaterialxOES(GLTriangleFace face, GLMaterialParameter pname, int param)
		{
			MaterialxOESNative(face, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MaterialxvOESNative(GLTriangleFace face, GLMaterialParameter pname, int* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLMaterialParameter, int*, void>)funcTable[118])(face, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTriangleFace, GLMaterialParameter, nint, void>)funcTable[118])(face, pname, (nint)param);
			#endif
		}

		public static void MaterialxvOES(GLTriangleFace face, GLMaterialParameter pname, int* param)
		{
			MaterialxvOESNative(face, pname, param);
		}

		public static void MaterialxvOES(GLTriangleFace face, GLMaterialParameter pname, ref int param)
		{
			fixed (int* pparam0 = &param)
			{
				MaterialxvOESNative(face, pname, pparam0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MatrixIndexPointerOESNative(int size, GLMatrixIndexPointerTypeARB type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, GLMatrixIndexPointerTypeARB, int, void*, void>)funcTable[119])(size, type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, GLMatrixIndexPointerTypeARB, int, nint, void>)funcTable[119])(size, type, stride, (nint)pointer);
			#endif
		}

		public static void MatrixIndexPointerOES(int size, GLMatrixIndexPointerTypeARB type, int stride, void* pointer)
		{
			MatrixIndexPointerOESNative(size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MinSampleShadingOESNative(float value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[120])(value);
			#else
			((delegate* unmanaged[Cdecl]<float, void>)funcTable[120])(value);
			#endif
		}

		public static void MinSampleShadingOES(float value)
		{
			MinSampleShadingOESNative(value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultMatrixxOESNative(int* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[121])(m);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[121])((nint)m);
			#endif
		}

		public static void MultMatrixxOES(int* m)
		{
			MultMatrixxOESNative(m);
		}

		public static void MultMatrixxOES(ref int m)
		{
			fixed (int* pm0 = &m)
			{
				MultMatrixxOESNative(pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultTransposeMatrixxOESNative(int* m)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[122])(m);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[122])((nint)m);
			#endif
		}

		public static void MultTransposeMatrixxOES(int* m)
		{
			MultTransposeMatrixxOESNative(m);
		}

		public static void MultTransposeMatrixxOES(ref int m)
		{
			fixed (int* pm0 = &m)
			{
				MultTransposeMatrixxOESNative(pm0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiDrawElementsBaseVertexEXTNative(GLPrimitiveType mode, int* count, GLDrawElementsType type, void** indices, int drawcount, int* basevertex)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int*, GLDrawElementsType, void**, int, int*, void>)funcTable[123])(mode, count, type, indices, drawcount, basevertex);
			#else
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, nint, GLDrawElementsType, nint, int, nint, void>)funcTable[123])(mode, (nint)count, type, (nint)indices, drawcount, (nint)basevertex);
			#endif
		}

		public static void MultiDrawElementsBaseVertexEXT(GLPrimitiveType mode, int* count, GLDrawElementsType type, void** indices, int drawcount, int* basevertex)
		{
			MultiDrawElementsBaseVertexEXTNative(mode, count, type, indices, drawcount, basevertex);
		}

		public static void MultiDrawElementsBaseVertexEXT(GLPrimitiveType mode, ref int count, GLDrawElementsType type, void** indices, int drawcount, int* basevertex)
		{
			fixed (int* pcount0 = &count)
			{
				MultiDrawElementsBaseVertexEXTNative(mode, pcount0, type, indices, drawcount, basevertex);
			}
		}

		public static void MultiDrawElementsBaseVertexEXT(GLPrimitiveType mode, int* count, GLDrawElementsType type, void** indices, int drawcount, ref int basevertex)
		{
			fixed (int* pbasevertex0 = &basevertex)
			{
				MultiDrawElementsBaseVertexEXTNative(mode, count, type, indices, drawcount, pbasevertex0);
			}
		}

		public static void MultiDrawElementsBaseVertexEXT(GLPrimitiveType mode, ref int count, GLDrawElementsType type, void** indices, int drawcount, ref int basevertex)
		{
			fixed (int* pcount0 = &count)
			{
				fixed (int* pbasevertex1 = &basevertex)
				{
					MultiDrawElementsBaseVertexEXTNative(mode, pcount0, type, indices, drawcount, pbasevertex1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord1bOESNative(GLTextureUnit texture, sbyte s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, sbyte, void>)funcTable[124])(texture, s);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, sbyte, void>)funcTable[124])(texture, s);
			#endif
		}

		public static void MultiTexCoord1bOES(GLTextureUnit texture, sbyte s)
		{
			MultiTexCoord1bOESNative(texture, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord1bvOESNative(GLTextureUnit texture, sbyte* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, sbyte*, void>)funcTable[125])(texture, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[125])(texture, (nint)coords);
			#endif
		}

		public static void MultiTexCoord1bvOES(GLTextureUnit texture, sbyte* coords)
		{
			MultiTexCoord1bvOESNative(texture, coords);
		}

		public static void MultiTexCoord1bvOES(GLTextureUnit texture, ref sbyte coords)
		{
			fixed (sbyte* pcoords0 = &coords)
			{
				MultiTexCoord1bvOESNative(texture, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord1xOESNative(GLTextureUnit texture, int s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, void>)funcTable[126])(texture, s);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, void>)funcTable[126])(texture, s);
			#endif
		}

		public static void MultiTexCoord1xOES(GLTextureUnit texture, int s)
		{
			MultiTexCoord1xOESNative(texture, s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord1xvOESNative(GLTextureUnit texture, int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int*, void>)funcTable[127])(texture, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[127])(texture, (nint)coords);
			#endif
		}

		public static void MultiTexCoord1xvOES(GLTextureUnit texture, int* coords)
		{
			MultiTexCoord1xvOESNative(texture, coords);
		}

		public static void MultiTexCoord1xvOES(GLTextureUnit texture, ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				MultiTexCoord1xvOESNative(texture, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2bOESNative(GLTextureUnit texture, sbyte s, sbyte t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, sbyte, sbyte, void>)funcTable[128])(texture, s, t);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, sbyte, sbyte, void>)funcTable[128])(texture, s, t);
			#endif
		}

		public static void MultiTexCoord2bOES(GLTextureUnit texture, sbyte s, sbyte t)
		{
			MultiTexCoord2bOESNative(texture, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2bvOESNative(GLTextureUnit texture, sbyte* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, sbyte*, void>)funcTable[129])(texture, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[129])(texture, (nint)coords);
			#endif
		}

		public static void MultiTexCoord2bvOES(GLTextureUnit texture, sbyte* coords)
		{
			MultiTexCoord2bvOESNative(texture, coords);
		}

		public static void MultiTexCoord2bvOES(GLTextureUnit texture, ref sbyte coords)
		{
			fixed (sbyte* pcoords0 = &coords)
			{
				MultiTexCoord2bvOESNative(texture, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2xOESNative(GLTextureUnit texture, int s, int t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, void>)funcTable[130])(texture, s, t);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, void>)funcTable[130])(texture, s, t);
			#endif
		}

		public static void MultiTexCoord2xOES(GLTextureUnit texture, int s, int t)
		{
			MultiTexCoord2xOESNative(texture, s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord2xvOESNative(GLTextureUnit texture, int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int*, void>)funcTable[131])(texture, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[131])(texture, (nint)coords);
			#endif
		}

		public static void MultiTexCoord2xvOES(GLTextureUnit texture, int* coords)
		{
			MultiTexCoord2xvOESNative(texture, coords);
		}

		public static void MultiTexCoord2xvOES(GLTextureUnit texture, ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				MultiTexCoord2xvOESNative(texture, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3bOESNative(GLTextureUnit texture, sbyte s, sbyte t, sbyte r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, sbyte, sbyte, sbyte, void>)funcTable[132])(texture, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, sbyte, sbyte, sbyte, void>)funcTable[132])(texture, s, t, r);
			#endif
		}

		public static void MultiTexCoord3bOES(GLTextureUnit texture, sbyte s, sbyte t, sbyte r)
		{
			MultiTexCoord3bOESNative(texture, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3bvOESNative(GLTextureUnit texture, sbyte* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, sbyte*, void>)funcTable[133])(texture, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[133])(texture, (nint)coords);
			#endif
		}

		public static void MultiTexCoord3bvOES(GLTextureUnit texture, sbyte* coords)
		{
			MultiTexCoord3bvOESNative(texture, coords);
		}

		public static void MultiTexCoord3bvOES(GLTextureUnit texture, ref sbyte coords)
		{
			fixed (sbyte* pcoords0 = &coords)
			{
				MultiTexCoord3bvOESNative(texture, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3xOESNative(GLTextureUnit texture, int s, int t, int r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, int, void>)funcTable[134])(texture, s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, int, void>)funcTable[134])(texture, s, t, r);
			#endif
		}

		public static void MultiTexCoord3xOES(GLTextureUnit texture, int s, int t, int r)
		{
			MultiTexCoord3xOESNative(texture, s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord3xvOESNative(GLTextureUnit texture, int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int*, void>)funcTable[135])(texture, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[135])(texture, (nint)coords);
			#endif
		}

		public static void MultiTexCoord3xvOES(GLTextureUnit texture, int* coords)
		{
			MultiTexCoord3xvOESNative(texture, coords);
		}

		public static void MultiTexCoord3xvOES(GLTextureUnit texture, ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				MultiTexCoord3xvOESNative(texture, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4bOESNative(GLTextureUnit texture, sbyte s, sbyte t, sbyte r, sbyte q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, sbyte, sbyte, sbyte, sbyte, void>)funcTable[136])(texture, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, sbyte, sbyte, sbyte, sbyte, void>)funcTable[136])(texture, s, t, r, q);
			#endif
		}

		public static void MultiTexCoord4bOES(GLTextureUnit texture, sbyte s, sbyte t, sbyte r, sbyte q)
		{
			MultiTexCoord4bOESNative(texture, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4bvOESNative(GLTextureUnit texture, sbyte* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, sbyte*, void>)funcTable[137])(texture, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[137])(texture, (nint)coords);
			#endif
		}

		public static void MultiTexCoord4bvOES(GLTextureUnit texture, sbyte* coords)
		{
			MultiTexCoord4bvOESNative(texture, coords);
		}

		public static void MultiTexCoord4bvOES(GLTextureUnit texture, ref sbyte coords)
		{
			fixed (sbyte* pcoords0 = &coords)
			{
				MultiTexCoord4bvOESNative(texture, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4xOESNative(GLTextureUnit texture, int s, int t, int r, int q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, int, int, void>)funcTable[138])(texture, s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int, int, int, int, void>)funcTable[138])(texture, s, t, r, q);
			#endif
		}

		public static void MultiTexCoord4xOES(GLTextureUnit texture, int s, int t, int r, int q)
		{
			MultiTexCoord4xOESNative(texture, s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiTexCoord4xvOESNative(GLTextureUnit texture, int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureUnit, int*, void>)funcTable[139])(texture, coords);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureUnit, nint, void>)funcTable[139])(texture, (nint)coords);
			#endif
		}

		public static void MultiTexCoord4xvOES(GLTextureUnit texture, int* coords)
		{
			MultiTexCoord4xvOESNative(texture, coords);
		}

		public static void MultiTexCoord4xvOES(GLTextureUnit texture, ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				MultiTexCoord4xvOESNative(texture, pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Normal3xOESNative(int nx, int ny, int nz)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[140])(nx, ny, nz);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[140])(nx, ny, nz);
			#endif
		}

		public static void Normal3xOES(int nx, int ny, int nz)
		{
			Normal3xOESNative(nx, ny, nz);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Normal3xvOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[141])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[141])((nint)coords);
			#endif
		}

		public static void Normal3xvOES(int* coords)
		{
			Normal3xvOESNative(coords);
		}

		public static void Normal3xvOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				Normal3xvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void OrthofOESNative(float l, float r, float b, float t, float n, float f)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, void>)funcTable[142])(l, r, b, t, n, f);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, void>)funcTable[142])(l, r, b, t, n, f);
			#endif
		}

		public static void OrthofOES(float l, float r, float b, float t, float n, float f)
		{
			OrthofOESNative(l, r, b, t, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void OrthoxOESNative(int l, int r, int b, int t, int n, int f)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, void>)funcTable[143])(l, r, b, t, n, f);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, int, int, void>)funcTable[143])(l, r, b, t, n, f);
			#endif
		}

		public static void OrthoxOES(int l, int r, int b, int t, int n, int f)
		{
			OrthoxOESNative(l, r, b, t, n, f);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PassThroughxOESNative(int token)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[144])(token);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[144])(token);
			#endif
		}

		public static void PassThroughxOES(int token)
		{
			PassThroughxOESNative(token);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PatchParameteriOESNative(GLPatchParameterName pname, int value)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPatchParameterName, int, void>)funcTable[145])(pname, value);
			#else
			((delegate* unmanaged[Cdecl]<GLPatchParameterName, int, void>)funcTable[145])(pname, value);
			#endif
		}

		public static void PatchParameteriOES(GLPatchParameterName pname, int value)
		{
			PatchParameteriOESNative(pname, value);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelMapxNative(GLPixelMap map, int size, int* values)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelMap, int, int*, void>)funcTable[146])(map, size, values);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelMap, int, nint, void>)funcTable[146])(map, size, (nint)values);
			#endif
		}

		public static void PixelMapx(GLPixelMap map, int size, int* values)
		{
			PixelMapxNative(map, size, values);
		}

		public static void PixelMapx(GLPixelMap map, int size, ref int values)
		{
			fixed (int* pvalues0 = &values)
			{
				PixelMapxNative(map, size, pvalues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelStorexNative(GLPixelStoreParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelStoreParameter, int, void>)funcTable[147])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelStoreParameter, int, void>)funcTable[147])(pname, param);
			#endif
		}

		public static void PixelStorex(GLPixelStoreParameter pname, int param)
		{
			PixelStorexNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelTransferxOESNative(GLPixelTransferParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPixelTransferParameter, int, void>)funcTable[148])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLPixelTransferParameter, int, void>)funcTable[148])(pname, param);
			#endif
		}

		public static void PixelTransferxOES(GLPixelTransferParameter pname, int param)
		{
			PixelTransferxOESNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PixelZoomxOESNative(int xfactor, int yfactor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[149])(xfactor, yfactor);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[149])(xfactor, yfactor);
			#endif
		}

		public static void PixelZoomxOES(int xfactor, int yfactor)
		{
			PixelZoomxOESNative(xfactor, yfactor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PointParameterxOESNative(GLPointParameterNameARB pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, int, void>)funcTable[150])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, int, void>)funcTable[150])(pname, param);
			#endif
		}

		public static void PointParameterxOES(GLPointParameterNameARB pname, int param)
		{
			PointParameterxOESNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PointParameterxvOESNative(GLPointParameterNameARB pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, int*, void>)funcTable[151])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLPointParameterNameARB, nint, void>)funcTable[151])(pname, (nint)@params);
			#endif
		}

		public static void PointParameterxvOES(GLPointParameterNameARB pname, int* @params)
		{
			PointParameterxvOESNative(pname, @params);
		}

		public static void PointParameterxvOES(GLPointParameterNameARB pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				PointParameterxvOESNative(pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PointSizePointerOESNative(GLEnum type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, int, void*, void>)funcTable[152])(type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, int, nint, void>)funcTable[152])(type, stride, (nint)pointer);
			#endif
		}

		public static void PointSizePointerOES(GLEnum type, int stride, void* pointer)
		{
			PointSizePointerOESNative(type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PointSizexOESNative(int size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[153])(size);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[153])(size);
			#endif
		}

		public static void PointSizexOES(int size)
		{
			PointSizexOESNative(size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PolygonOffsetxOESNative(int factor, int units)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[154])(factor, units);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[154])(factor, units);
			#endif
		}

		public static void PolygonOffsetxOES(int factor, int units)
		{
			PolygonOffsetxOESNative(factor, units);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PrimitiveBoundingBoxOESNative(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, float, float, void>)funcTable[155])(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
			#else
			((delegate* unmanaged[Cdecl]<float, float, float, float, float, float, float, float, void>)funcTable[155])(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
			#endif
		}

		public static void PrimitiveBoundingBoxOES(float minX, float minY, float minZ, float minW, float maxX, float maxY, float maxZ, float maxW)
		{
			PrimitiveBoundingBoxOESNative(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PrioritizeTexturesxOESNative(int n, uint* textures, int* priorities)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, int*, void>)funcTable[156])(n, textures, priorities);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, nint, void>)funcTable[156])(n, (nint)textures, (nint)priorities);
			#endif
		}

		public static void PrioritizeTexturesxOES(int n, uint* textures, int* priorities)
		{
			PrioritizeTexturesxOESNative(n, textures, priorities);
		}

		public static void PrioritizeTexturesxOES(int n, ref uint textures, int* priorities)
		{
			fixed (uint* ptextures0 = &textures)
			{
				PrioritizeTexturesxOESNative(n, ptextures0, priorities);
			}
		}

		public static void PrioritizeTexturesxOES(int n, uint* textures, ref int priorities)
		{
			fixed (int* ppriorities0 = &priorities)
			{
				PrioritizeTexturesxOESNative(n, textures, ppriorities0);
			}
		}

		public static void PrioritizeTexturesxOES(int n, ref uint textures, ref int priorities)
		{
			fixed (uint* ptextures0 = &textures)
			{
				fixed (int* ppriorities1 = &priorities)
				{
					PrioritizeTexturesxOESNative(n, ptextures0, ppriorities1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramBinaryOESNative(uint program, GLEnum binaryFormat, void* binary, int length)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, void*, int, void>)funcTable[157])(program, binaryFormat, binary, length);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, nint, int, void>)funcTable[157])(program, binaryFormat, (nint)binary, length);
			#endif
		}

		public static void ProgramBinaryOES(uint program, GLEnum binaryFormat, void* binary, int length)
		{
			ProgramBinaryOESNative(program, binaryFormat, binary, length);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint QueryMatrixxOESNative(int* mantissa, int* exponent)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int*, int*, uint>)funcTable[158])(mantissa, exponent);
			#else
			return (uint)((delegate* unmanaged[Cdecl]<nint, nint, uint>)funcTable[158])((nint)mantissa, (nint)exponent);
			#endif
		}

		public static uint QueryMatrixxOES(int* mantissa, int* exponent)
		{
			uint ret = QueryMatrixxOESNative(mantissa, exponent);
			return ret;
		}

		public static uint QueryMatrixxOES(ref int mantissa, int* exponent)
		{
			fixed (int* pmantissa0 = &mantissa)
			{
				uint ret = QueryMatrixxOESNative(pmantissa0, exponent);
				return ret;
			}
		}

		public static uint QueryMatrixxOES(int* mantissa, ref int exponent)
		{
			fixed (int* pexponent0 = &exponent)
			{
				uint ret = QueryMatrixxOESNative(mantissa, pexponent0);
				return ret;
			}
		}

		public static uint QueryMatrixxOES(ref int mantissa, ref int exponent)
		{
			fixed (int* pmantissa0 = &mantissa)
			{
				fixed (int* pexponent1 = &exponent)
				{
					uint ret = QueryMatrixxOESNative(pmantissa0, pexponent1);
					return ret;
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2xOESNative(int x, int y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[159])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[159])(x, y);
			#endif
		}

		public static void RasterPos2xOES(int x, int y)
		{
			RasterPos2xOESNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos2xvOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[160])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[160])((nint)coords);
			#endif
		}

		public static void RasterPos2xvOES(int* coords)
		{
			RasterPos2xvOESNative(coords);
		}

		public static void RasterPos2xvOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				RasterPos2xvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3xOESNative(int x, int y, int z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[161])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[161])(x, y, z);
			#endif
		}

		public static void RasterPos3xOES(int x, int y, int z)
		{
			RasterPos3xOESNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos3xvOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[162])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[162])((nint)coords);
			#endif
		}

		public static void RasterPos3xvOES(int* coords)
		{
			RasterPos3xvOESNative(coords);
		}

		public static void RasterPos3xvOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				RasterPos3xvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4xOESNative(int x, int y, int z, int w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[163])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[163])(x, y, z, w);
			#endif
		}

		public static void RasterPos4xOES(int x, int y, int z, int w)
		{
			RasterPos4xOESNative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RasterPos4xvOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[164])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[164])((nint)coords);
			#endif
		}

		public static void RasterPos4xvOES(int* coords)
		{
			RasterPos4xvOESNative(coords);
		}

		public static void RasterPos4xvOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				RasterPos4xvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectxOESNative(int x1, int y1, int x2, int y2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[165])(x1, y1, x2, y2);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[165])(x1, y1, x2, y2);
			#endif
		}

		public static void RectxOES(int x1, int y1, int x2, int y2)
		{
			RectxOESNative(x1, y1, x2, y2);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RectxvOESNative(int* v1, int* v2)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, int*, void>)funcTable[166])(v1, v2);
			#else
			((delegate* unmanaged[Cdecl]<nint, nint, void>)funcTable[166])((nint)v1, (nint)v2);
			#endif
		}

		public static void RectxvOES(int* v1, int* v2)
		{
			RectxvOESNative(v1, v2);
		}

		public static void RectxvOES(ref int v1, int* v2)
		{
			fixed (int* pv10 = &v1)
			{
				RectxvOESNative(pv10, v2);
			}
		}

		public static void RectxvOES(int* v1, ref int v2)
		{
			fixed (int* pv20 = &v2)
			{
				RectxvOESNative(v1, pv20);
			}
		}

		public static void RectxvOES(ref int v1, ref int v2)
		{
			fixed (int* pv10 = &v1)
			{
				fixed (int* pv21 = &v2)
				{
					RectxvOESNative(pv10, pv21);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RenderbufferStorageOESNative(GLRenderbufferTarget target, GLInternalFormat internalformat, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, GLInternalFormat, int, int, void>)funcTable[167])(target, internalformat, width, height);
			#else
			((delegate* unmanaged[Cdecl]<GLRenderbufferTarget, GLInternalFormat, int, int, void>)funcTable[167])(target, internalformat, width, height);
			#endif
		}

		public static void RenderbufferStorageOES(GLRenderbufferTarget target, GLInternalFormat internalformat, int width, int height)
		{
			RenderbufferStorageOESNative(target, internalformat, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RotatexOESNative(int angle, int x, int y, int z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[168])(angle, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[168])(angle, x, y, z);
			#endif
		}

		public static void RotatexOES(int angle, int x, int y, int z)
		{
			RotatexOESNative(angle, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SampleCoveragexOESNative(int value, byte invert)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, byte, void>)funcTable[169])(value, invert);
			#else
			((delegate* unmanaged[Cdecl]<int, byte, void>)funcTable[169])(value, invert);
			#endif
		}

		public static void SampleCoveragexOES(int value, byte invert)
		{
			SampleCoveragexOESNative(value, invert);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplerParameterIivOESNative(uint sampler, GLSamplerParameterI pname, int* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, int*, void>)funcTable[170])(sampler, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, nint, void>)funcTable[170])(sampler, pname, (nint)param);
			#endif
		}

		public static void SamplerParameterIivOES(uint sampler, GLSamplerParameterI pname, int* param)
		{
			SamplerParameterIivOESNative(sampler, pname, param);
		}

		public static void SamplerParameterIivOES(uint sampler, GLSamplerParameterI pname, ref int param)
		{
			fixed (int* pparam0 = &param)
			{
				SamplerParameterIivOESNative(sampler, pname, pparam0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SamplerParameterIuivOESNative(uint sampler, GLSamplerParameterI pname, uint* param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, uint*, void>)funcTable[171])(sampler, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLSamplerParameterI, nint, void>)funcTable[171])(sampler, pname, (nint)param);
			#endif
		}

		public static void SamplerParameterIuivOES(uint sampler, GLSamplerParameterI pname, uint* param)
		{
			SamplerParameterIuivOESNative(sampler, pname, param);
		}

		public static void SamplerParameterIuivOES(uint sampler, GLSamplerParameterI pname, ref uint param)
		{
			fixed (uint* pparam0 = &param)
			{
				SamplerParameterIuivOESNative(sampler, pname, pparam0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScalexOESNative(int x, int y, int z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[172])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[172])(x, y, z);
			#endif
		}

		public static void ScalexOES(int x, int y, int z)
		{
			ScalexOESNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScissorArrayvOESNative(uint first, int count, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int*, void>)funcTable[173])(first, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[173])(first, count, (nint)v);
			#endif
		}

		public static void ScissorArrayvOES(uint first, int count, int* v)
		{
			ScissorArrayvOESNative(first, count, v);
		}

		public static void ScissorArrayvOES(uint first, int count, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				ScissorArrayvOESNative(first, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScissorIndexedOESNative(uint index, int left, int bottom, int width, int height)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[174])(index, left, bottom, width, height);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[174])(index, left, bottom, width, height);
			#endif
		}

		public static void ScissorIndexedOES(uint index, int left, int bottom, int width, int height)
		{
			ScissorIndexedOESNative(index, left, bottom, width, height);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ScissorIndexedvOESNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[175])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[175])(index, (nint)v);
			#endif
		}

		public static void ScissorIndexedvOES(uint index, int* v)
		{
			ScissorIndexedvOESNative(index, v);
		}

		public static void ScissorIndexedvOES(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				ScissorIndexedvOESNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexBufferOESNative(GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, uint, void>)funcTable[176])(target, internalformat, buffer);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, uint, void>)funcTable[176])(target, internalformat, buffer);
			#endif
		}

		public static void TexBufferOES(GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer)
		{
			TexBufferOESNative(target, internalformat, buffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexBufferRangeOESNative(GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer, nint offset, nint size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, uint, nint, nint, void>)funcTable[177])(target, internalformat, buffer, offset, size);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLSizedInternalFormat, uint, nint, nint, void>)funcTable[177])(target, internalformat, buffer, offset, size);
			#endif
		}

		public static void TexBufferRangeOES(GLTextureTarget target, GLSizedInternalFormat internalformat, uint buffer, nint offset, nint size)
		{
			TexBufferRangeOESNative(target, internalformat, buffer, offset, size);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord1bOESNative(sbyte s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte, void>)funcTable[178])(s);
			#else
			((delegate* unmanaged[Cdecl]<sbyte, void>)funcTable[178])(s);
			#endif
		}

		public static void TexCoord1bOES(sbyte s)
		{
			TexCoord1bOESNative(s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord1bvOESNative(sbyte* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte*, void>)funcTable[179])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[179])((nint)coords);
			#endif
		}

		public static void TexCoord1bvOES(sbyte* coords)
		{
			TexCoord1bvOESNative(coords);
		}

		public static void TexCoord1bvOES(ref sbyte coords)
		{
			fixed (sbyte* pcoords0 = &coords)
			{
				TexCoord1bvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord1xOESNative(int s)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[180])(s);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[180])(s);
			#endif
		}

		public static void TexCoord1xOES(int s)
		{
			TexCoord1xOESNative(s);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord1xvOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[181])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[181])((nint)coords);
			#endif
		}

		public static void TexCoord1xvOES(int* coords)
		{
			TexCoord1xvOESNative(coords);
		}

		public static void TexCoord1xvOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				TexCoord1xvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord2bOESNative(sbyte s, sbyte t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, void>)funcTable[182])(s, t);
			#else
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, void>)funcTable[182])(s, t);
			#endif
		}

		public static void TexCoord2bOES(sbyte s, sbyte t)
		{
			TexCoord2bOESNative(s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord2bvOESNative(sbyte* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte*, void>)funcTable[183])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[183])((nint)coords);
			#endif
		}

		public static void TexCoord2bvOES(sbyte* coords)
		{
			TexCoord2bvOESNative(coords);
		}

		public static void TexCoord2bvOES(ref sbyte coords)
		{
			fixed (sbyte* pcoords0 = &coords)
			{
				TexCoord2bvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord2xOESNative(int s, int t)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[184])(s, t);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[184])(s, t);
			#endif
		}

		public static void TexCoord2xOES(int s, int t)
		{
			TexCoord2xOESNative(s, t);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord2xvOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[185])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[185])((nint)coords);
			#endif
		}

		public static void TexCoord2xvOES(int* coords)
		{
			TexCoord2xvOESNative(coords);
		}

		public static void TexCoord2xvOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				TexCoord2xvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord3bOESNative(sbyte s, sbyte t, sbyte r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)funcTable[186])(s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)funcTable[186])(s, t, r);
			#endif
		}

		public static void TexCoord3bOES(sbyte s, sbyte t, sbyte r)
		{
			TexCoord3bOESNative(s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord3bvOESNative(sbyte* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte*, void>)funcTable[187])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[187])((nint)coords);
			#endif
		}

		public static void TexCoord3bvOES(sbyte* coords)
		{
			TexCoord3bvOESNative(coords);
		}

		public static void TexCoord3bvOES(ref sbyte coords)
		{
			fixed (sbyte* pcoords0 = &coords)
			{
				TexCoord3bvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord3xOESNative(int s, int t, int r)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[188])(s, t, r);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[188])(s, t, r);
			#endif
		}

		public static void TexCoord3xOES(int s, int t, int r)
		{
			TexCoord3xOESNative(s, t, r);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord3xvOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[189])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[189])((nint)coords);
			#endif
		}

		public static void TexCoord3xvOES(int* coords)
		{
			TexCoord3xvOESNative(coords);
		}

		public static void TexCoord3xvOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				TexCoord3xvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord4bOESNative(sbyte s, sbyte t, sbyte r, sbyte q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, sbyte, void>)funcTable[190])(s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, sbyte, void>)funcTable[190])(s, t, r, q);
			#endif
		}

		public static void TexCoord4bOES(sbyte s, sbyte t, sbyte r, sbyte q)
		{
			TexCoord4bOESNative(s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord4bvOESNative(sbyte* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte*, void>)funcTable[191])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[191])((nint)coords);
			#endif
		}

		public static void TexCoord4bvOES(sbyte* coords)
		{
			TexCoord4bvOESNative(coords);
		}

		public static void TexCoord4bvOES(ref sbyte coords)
		{
			fixed (sbyte* pcoords0 = &coords)
			{
				TexCoord4bvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord4xOESNative(int s, int t, int r, int q)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[192])(s, t, r, q);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, int, void>)funcTable[192])(s, t, r, q);
			#endif
		}

		public static void TexCoord4xOES(int s, int t, int r, int q)
		{
			TexCoord4xOESNative(s, t, r, q);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexCoord4xvOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[193])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[193])((nint)coords);
			#endif
		}

		public static void TexCoord4xvOES(int* coords)
		{
			TexCoord4xvOESNative(coords);
		}

		public static void TexCoord4xvOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				TexCoord4xvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexEnvxOESNative(GLTextureEnvTarget target, GLTextureEnvParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureEnvTarget, GLTextureEnvParameter, int, void>)funcTable[194])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureEnvTarget, GLTextureEnvParameter, int, void>)funcTable[194])(target, pname, param);
			#endif
		}

		public static void TexEnvxOES(GLTextureEnvTarget target, GLTextureEnvParameter pname, int param)
		{
			TexEnvxOESNative(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexEnvxvOESNative(GLTextureEnvTarget target, GLTextureEnvParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureEnvTarget, GLTextureEnvParameter, int*, void>)funcTable[195])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureEnvTarget, GLTextureEnvParameter, nint, void>)funcTable[195])(target, pname, (nint)@params);
			#endif
		}

		public static void TexEnvxvOES(GLTextureEnvTarget target, GLTextureEnvParameter pname, int* @params)
		{
			TexEnvxvOESNative(target, pname, @params);
		}

		public static void TexEnvxvOES(GLTextureEnvTarget target, GLTextureEnvParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				TexEnvxvOESNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexGenfOESNative(GLTextureCoordName coord, GLTextureGenParameter pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, float, void>)funcTable[196])(coord, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, float, void>)funcTable[196])(coord, pname, param);
			#endif
		}

		public static void TexGenfOES(GLTextureCoordName coord, GLTextureGenParameter pname, float param)
		{
			TexGenfOESNative(coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexGenfvOESNative(GLTextureCoordName coord, GLTextureGenParameter pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, float*, void>)funcTable[197])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, nint, void>)funcTable[197])(coord, pname, (nint)@params);
			#endif
		}

		public static void TexGenfvOES(GLTextureCoordName coord, GLTextureGenParameter pname, float* @params)
		{
			TexGenfvOESNative(coord, pname, @params);
		}

		public static void TexGenfvOES(GLTextureCoordName coord, GLTextureGenParameter pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				TexGenfvOESNative(coord, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexGeniOESNative(GLTextureCoordName coord, GLTextureGenParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, int, void>)funcTable[198])(coord, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, int, void>)funcTable[198])(coord, pname, param);
			#endif
		}

		public static void TexGeniOES(GLTextureCoordName coord, GLTextureGenParameter pname, int param)
		{
			TexGeniOESNative(coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexGenivOESNative(GLTextureCoordName coord, GLTextureGenParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, int*, void>)funcTable[199])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, nint, void>)funcTable[199])(coord, pname, (nint)@params);
			#endif
		}

		public static void TexGenivOES(GLTextureCoordName coord, GLTextureGenParameter pname, int* @params)
		{
			TexGenivOESNative(coord, pname, @params);
		}

		public static void TexGenivOES(GLTextureCoordName coord, GLTextureGenParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				TexGenivOESNative(coord, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexGenxOESNative(GLTextureCoordName coord, GLTextureGenParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, int, void>)funcTable[200])(coord, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, int, void>)funcTable[200])(coord, pname, param);
			#endif
		}

		public static void TexGenxOES(GLTextureCoordName coord, GLTextureGenParameter pname, int param)
		{
			TexGenxOESNative(coord, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexGenxvOESNative(GLTextureCoordName coord, GLTextureGenParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, int*, void>)funcTable[201])(coord, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureCoordName, GLTextureGenParameter, nint, void>)funcTable[201])(coord, pname, (nint)@params);
			#endif
		}

		public static void TexGenxvOES(GLTextureCoordName coord, GLTextureGenParameter pname, int* @params)
		{
			TexGenxvOESNative(coord, pname, @params);
		}

		public static void TexGenxvOES(GLTextureCoordName coord, GLTextureGenParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				TexGenxvOESNative(coord, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexImage3DOESNative(GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int height, int depth, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLInternalFormat, int, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[202])(target, level, internalformat, width, height, depth, border, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLInternalFormat, int, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[202])(target, level, internalformat, width, height, depth, border, format, type, (nint)pixels);
			#endif
		}

		public static void TexImage3DOES(GLTextureTarget target, int level, GLInternalFormat internalformat, int width, int height, int depth, int border, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TexImage3DOESNative(target, level, internalformat, width, height, depth, border, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexParameterIivOESNative(GLTextureTarget target, GLTextureParameterName pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLTextureParameterName, int*, void>)funcTable[203])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLTextureParameterName, nint, void>)funcTable[203])(target, pname, (nint)@params);
			#endif
		}

		public static void TexParameterIivOES(GLTextureTarget target, GLTextureParameterName pname, int* @params)
		{
			TexParameterIivOESNative(target, pname, @params);
		}

		public static void TexParameterIivOES(GLTextureTarget target, GLTextureParameterName pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				TexParameterIivOESNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexParameterIuivOESNative(GLTextureTarget target, GLTextureParameterName pname, uint* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLTextureParameterName, uint*, void>)funcTable[204])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLTextureParameterName, nint, void>)funcTable[204])(target, pname, (nint)@params);
			#endif
		}

		public static void TexParameterIuivOES(GLTextureTarget target, GLTextureParameterName pname, uint* @params)
		{
			TexParameterIuivOESNative(target, pname, @params);
		}

		public static void TexParameterIuivOES(GLTextureTarget target, GLTextureParameterName pname, ref uint @params)
		{
			fixed (uint* pparams0 = &@params)
			{
				TexParameterIuivOESNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexParameterxOESNative(GLTextureTarget target, GLGetTextureParameter pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLGetTextureParameter, int, void>)funcTable[205])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLGetTextureParameter, int, void>)funcTable[205])(target, pname, param);
			#endif
		}

		public static void TexParameterxOES(GLTextureTarget target, GLGetTextureParameter pname, int param)
		{
			TexParameterxOESNative(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexParameterxvOESNative(GLTextureTarget target, GLGetTextureParameter pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLGetTextureParameter, int*, void>)funcTable[206])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, GLGetTextureParameter, nint, void>)funcTable[206])(target, pname, (nint)@params);
			#endif
		}

		public static void TexParameterxvOES(GLTextureTarget target, GLGetTextureParameter pname, int* @params)
		{
			TexParameterxvOESNative(target, pname, @params);
		}

		public static void TexParameterxvOES(GLTextureTarget target, GLGetTextureParameter pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				TexParameterxvOESNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexStorage3DMultisampleOESNative(GLTextureTarget target, int samples, GLSizedInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, int, byte, void>)funcTable[207])(target, samples, internalformat, width, height, depth, fixedsamplelocations);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, GLSizedInternalFormat, int, int, int, byte, void>)funcTable[207])(target, samples, internalformat, width, height, depth, fixedsamplelocations);
			#endif
		}

		public static void TexStorage3DMultisampleOES(GLTextureTarget target, int samples, GLSizedInternalFormat internalformat, int width, int height, int depth, byte fixedsamplelocations)
		{
			TexStorage3DMultisampleOESNative(target, samples, internalformat, width, height, depth, fixedsamplelocations);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TexSubImage3DOESNative(GLTextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, int, int, int, int, int, int, GLPixelFormat, GLPixelType, void*, void>)funcTable[208])(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
			#else
			((delegate* unmanaged[Cdecl]<GLTextureTarget, int, int, int, int, int, int, int, GLPixelFormat, GLPixelType, nint, void>)funcTable[208])(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, (nint)pixels);
			#endif
		}

		public static void TexSubImage3DOES(GLTextureTarget target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, GLPixelFormat format, GLPixelType type, void* pixels)
		{
			TexSubImage3DOESNative(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TextureViewOESNative(uint texture, GLTextureTarget target, uint origtexture, GLSizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, uint, GLSizedInternalFormat, uint, uint, uint, uint, void>)funcTable[209])(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLTextureTarget, uint, GLSizedInternalFormat, uint, uint, uint, uint, void>)funcTable[209])(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
			#endif
		}

		public static void TextureViewOES(uint texture, GLTextureTarget target, uint origtexture, GLSizedInternalFormat internalformat, uint minlevel, uint numlevels, uint minlayer, uint numlayers)
		{
			TextureViewOESNative(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TranslatexOESNative(int x, int y, int z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[210])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[210])(x, y, z);
			#endif
		}

		public static void TranslatexOES(int x, int y, int z)
		{
			TranslatexOESNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte UnmapBufferOESNative(GLEnum target)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLEnum, byte>)funcTable[211])(target);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<GLEnum, byte>)funcTable[211])(target);
			#endif
		}

		public static bool UnmapBufferOES(GLEnum target)
		{
			byte ret = UnmapBufferOESNative(target);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex2bOESNative(sbyte x, sbyte y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, void>)funcTable[212])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, void>)funcTable[212])(x, y);
			#endif
		}

		public static void Vertex2bOES(sbyte x, sbyte y)
		{
			Vertex2bOESNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex2bvOESNative(sbyte* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte*, void>)funcTable[213])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[213])((nint)coords);
			#endif
		}

		public static void Vertex2bvOES(sbyte* coords)
		{
			Vertex2bvOESNative(coords);
		}

		public static void Vertex2bvOES(ref sbyte coords)
		{
			fixed (sbyte* pcoords0 = &coords)
			{
				Vertex2bvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex2xOESNative(int x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[214])(x);
			#else
			((delegate* unmanaged[Cdecl]<int, void>)funcTable[214])(x);
			#endif
		}

		public static void Vertex2xOES(int x)
		{
			Vertex2xOESNative(x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex2xvOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[215])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[215])((nint)coords);
			#endif
		}

		public static void Vertex2xvOES(int* coords)
		{
			Vertex2xvOESNative(coords);
		}

		public static void Vertex2xvOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				Vertex2xvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex3bOESNative(sbyte x, sbyte y, sbyte z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)funcTable[216])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, void>)funcTable[216])(x, y, z);
			#endif
		}

		public static void Vertex3bOES(sbyte x, sbyte y, sbyte z)
		{
			Vertex3bOESNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex3bvOESNative(sbyte* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte*, void>)funcTable[217])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[217])((nint)coords);
			#endif
		}

		public static void Vertex3bvOES(sbyte* coords)
		{
			Vertex3bvOESNative(coords);
		}

		public static void Vertex3bvOES(ref sbyte coords)
		{
			fixed (sbyte* pcoords0 = &coords)
			{
				Vertex3bvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex3xOESNative(int x, int y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[218])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<int, int, void>)funcTable[218])(x, y);
			#endif
		}

		public static void Vertex3xOES(int x, int y)
		{
			Vertex3xOESNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex3xvOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[219])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[219])((nint)coords);
			#endif
		}

		public static void Vertex3xvOES(int* coords)
		{
			Vertex3xvOESNative(coords);
		}

		public static void Vertex3xvOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				Vertex3xvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex4bOESNative(sbyte x, sbyte y, sbyte z, sbyte w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, sbyte, void>)funcTable[220])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<sbyte, sbyte, sbyte, sbyte, void>)funcTable[220])(x, y, z, w);
			#endif
		}

		public static void Vertex4bOES(sbyte x, sbyte y, sbyte z, sbyte w)
		{
			Vertex4bOESNative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex4bvOESNative(sbyte* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<sbyte*, void>)funcTable[221])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[221])((nint)coords);
			#endif
		}

		public static void Vertex4bvOES(sbyte* coords)
		{
			Vertex4bvOESNative(coords);
		}

		public static void Vertex4bvOES(ref sbyte coords)
		{
			fixed (sbyte* pcoords0 = &coords)
			{
				Vertex4bvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex4xOESNative(int x, int y, int z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[222])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<int, int, int, void>)funcTable[222])(x, y, z);
			#endif
		}

		public static void Vertex4xOES(int x, int y, int z)
		{
			Vertex4xOESNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex4xvOESNative(int* coords)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int*, void>)funcTable[223])(coords);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[223])((nint)coords);
			#endif
		}

		public static void Vertex4xvOES(int* coords)
		{
			Vertex4xvOESNative(coords);
		}

		public static void Vertex4xvOES(ref int coords)
		{
			fixed (int* pcoords0 = &coords)
			{
				Vertex4xvOESNative(pcoords0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ViewportArrayvOESNative(uint first, int count, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[224])(first, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[224])(first, count, (nint)v);
			#endif
		}

		public static void ViewportArrayvOES(uint first, int count, float* v)
		{
			ViewportArrayvOESNative(first, count, v);
		}

		public static void ViewportArrayvOES(uint first, int count, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				ViewportArrayvOESNative(first, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ViewportIndexedfOESNative(uint index, float x, float y, float w, float h)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[225])(index, x, y, w, h);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[225])(index, x, y, w, h);
			#endif
		}

		public static void ViewportIndexedfOES(uint index, float x, float y, float w, float h)
		{
			ViewportIndexedfOESNative(index, x, y, w, h);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ViewportIndexedfvOESNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[226])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[226])(index, (nint)v);
			#endif
		}

		public static void ViewportIndexedfvOES(uint index, float* v)
		{
			ViewportIndexedfvOESNative(index, v);
		}

		public static void ViewportIndexedfvOES(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				ViewportIndexedfvOESNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightPointerOESNative(int size, GLEnum type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, GLEnum, int, void*, void>)funcTable[227])(size, type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, GLEnum, int, nint, void>)funcTable[227])(size, type, stride, (nint)pointer);
			#endif
		}

		public static void WeightPointerOES(int size, GLEnum type, int stride, void* pointer)
		{
			WeightPointerOESNative(size, type, stride, pointer);
		}

	}
}
