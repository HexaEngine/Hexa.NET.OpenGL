// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Numerics;
using Hexa.NET.OpenGLES;

namespace Hexa.NET.OpenGLES.OES
{
	public unsafe partial class GLOESFramebufferObject : GLExtension, IDisposable
	{
		public const string ExtensionName = "GL_OES_framebuffer_object";

		public GLOESFramebufferObject() : base(15)
		{
		}

		public override bool IsSupported(IGLContext context)
		{
			return context.IsExtensionSupported(ExtensionName);
		}

		protected override void InitTable(FunctionTable funcTable)
		{
			funcTable.Load(0, "glBindFramebufferOES");
			funcTable.Load(1, "glBindRenderbufferOES");
			funcTable.Load(2, "glCheckFramebufferStatusOES");
			funcTable.Load(3, "glDeleteFramebuffersOES");
			funcTable.Load(4, "glDeleteRenderbuffersOES");
			funcTable.Load(5, "glFramebufferRenderbufferOES");
			funcTable.Load(6, "glFramebufferTexture2DOES");
			funcTable.Load(7, "glGenFramebuffersOES");
			funcTable.Load(8, "glGenRenderbuffersOES");
			funcTable.Load(9, "glGenerateMipmapOES");
			funcTable.Load(10, "glGetFramebufferAttachmentParameterivOES");
			funcTable.Load(11, "glGetRenderbufferParameterivOES");
			funcTable.Load(12, "glIsFramebufferOES");
			funcTable.Load(13, "glIsRenderbufferOES");
			funcTable.Load(14, "glRenderbufferStorageOES");
		}

		public void Dispose()
		{
			funcTable.Dispose();
		}
	}
}
