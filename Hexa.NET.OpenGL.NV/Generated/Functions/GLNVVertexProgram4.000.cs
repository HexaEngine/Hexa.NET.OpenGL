// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.NV
{
	public static unsafe partial class GLNVVertexProgram4
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribIivEXTNative(uint index, GLVertexAttribEnum pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, int*, void>)funcTable[0])(index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, nint, void>)funcTable[0])(index, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void GetVertexAttribIivEXT(uint index, GLVertexAttribEnum pname, int* @params)
		{
			GetVertexAttribIivEXTNative(index, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void GetVertexAttribIivEXT(uint index, GLVertexAttribEnum pname, Span<int> @params)
		{
			fixed (int* pparams0 = @params)
			{
				GetVertexAttribIivEXTNative(index, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void GetVertexAttribIivEXT(uint index, GLVertexAttribEnum pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetVertexAttribIivEXTNative(index, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribIuivEXTNative(uint index, GLVertexAttribEnum pname, uint* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, uint*, void>)funcTable[1])(index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnum, nint, void>)funcTable[1])(index, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void GetVertexAttribIuivEXT(uint index, GLVertexAttribEnum pname, uint* @params)
		{
			GetVertexAttribIuivEXTNative(index, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void GetVertexAttribIuivEXT(uint index, GLVertexAttribEnum pname, Span<uint> @params)
		{
			fixed (uint* pparams0 = @params)
			{
				GetVertexAttribIuivEXTNative(index, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void GetVertexAttribIuivEXT(uint index, GLVertexAttribEnum pname, ref uint @params)
		{
			fixed (uint* pparams0 = &@params)
			{
				GetVertexAttribIuivEXTNative(index, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI1iEXTNative(uint index, int x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[2])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[2])(index, x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI1iEXT(uint index, int x)
		{
			VertexAttribI1iEXTNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI1ivEXTNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[3])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[3])(index, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI1ivEXT(uint index, int* v)
		{
			VertexAttribI1ivEXTNative(index, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI1ivEXT(uint index, Span<int> v)
		{
			fixed (int* pv0 = v)
			{
				VertexAttribI1ivEXTNative(index, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI1ivEXT(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				VertexAttribI1ivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI1uiEXTNative(uint index, uint x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[4])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[4])(index, x);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI1uiEXT(uint index, uint x)
		{
			VertexAttribI1uiEXTNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI1uivEXTNative(uint index, uint* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[5])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[5])(index, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI1uivEXT(uint index, uint* v)
		{
			VertexAttribI1uivEXTNative(index, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI1uivEXT(uint index, Span<uint> v)
		{
			fixed (uint* pv0 = v)
			{
				VertexAttribI1uivEXTNative(index, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI1uivEXT(uint index, ref uint v)
		{
			fixed (uint* pv0 = &v)
			{
				VertexAttribI1uivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI2iEXTNative(uint index, int x, int y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[6])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[6])(index, x, y);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI2iEXT(uint index, int x, int y)
		{
			VertexAttribI2iEXTNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI2ivEXTNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[7])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[7])(index, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI2ivEXT(uint index, int* v)
		{
			VertexAttribI2ivEXTNative(index, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI2ivEXT(uint index, Span<int> v)
		{
			fixed (int* pv0 = v)
			{
				VertexAttribI2ivEXTNative(index, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI2ivEXT(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				VertexAttribI2ivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI2uiEXTNative(uint index, uint x, uint y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[8])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[8])(index, x, y);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI2uiEXT(uint index, uint x, uint y)
		{
			VertexAttribI2uiEXTNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI2uivEXTNative(uint index, uint* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[9])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[9])(index, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI2uivEXT(uint index, uint* v)
		{
			VertexAttribI2uivEXTNative(index, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI2uivEXT(uint index, Span<uint> v)
		{
			fixed (uint* pv0 = v)
			{
				VertexAttribI2uivEXTNative(index, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI2uivEXT(uint index, ref uint v)
		{
			fixed (uint* pv0 = &v)
			{
				VertexAttribI2uivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI3iEXTNative(uint index, int x, int y, int z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[10])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[10])(index, x, y, z);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI3iEXT(uint index, int x, int y, int z)
		{
			VertexAttribI3iEXTNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI3ivEXTNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[11])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[11])(index, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI3ivEXT(uint index, int* v)
		{
			VertexAttribI3ivEXTNative(index, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI3ivEXT(uint index, Span<int> v)
		{
			fixed (int* pv0 = v)
			{
				VertexAttribI3ivEXTNative(index, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI3ivEXT(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				VertexAttribI3ivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI3uiEXTNative(uint index, uint x, uint y, uint z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)funcTable[12])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)funcTable[12])(index, x, y, z);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI3uiEXT(uint index, uint x, uint y, uint z)
		{
			VertexAttribI3uiEXTNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI3uivEXTNative(uint index, uint* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[13])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[13])(index, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI3uivEXT(uint index, uint* v)
		{
			VertexAttribI3uivEXTNative(index, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI3uivEXT(uint index, Span<uint> v)
		{
			fixed (uint* pv0 = v)
			{
				VertexAttribI3uivEXTNative(index, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI3uivEXT(uint index, ref uint v)
		{
			fixed (uint* pv0 = &v)
			{
				VertexAttribI3uivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4bvEXTNative(uint index, sbyte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)funcTable[14])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[14])(index, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4bvEXT(uint index, sbyte* v)
		{
			VertexAttribI4bvEXTNative(index, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4bvEXT(uint index, Span<sbyte> v)
		{
			fixed (sbyte* pv0 = v)
			{
				VertexAttribI4bvEXTNative(index, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4bvEXT(uint index, ref sbyte v)
		{
			fixed (sbyte* pv0 = &v)
			{
				VertexAttribI4bvEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4iEXTNative(uint index, int x, int y, int z, int w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[15])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[15])(index, x, y, z, w);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4iEXT(uint index, int x, int y, int z, int w)
		{
			VertexAttribI4iEXTNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4ivEXTNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[16])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[16])(index, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4ivEXT(uint index, int* v)
		{
			VertexAttribI4ivEXTNative(index, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4ivEXT(uint index, Span<int> v)
		{
			fixed (int* pv0 = v)
			{
				VertexAttribI4ivEXTNative(index, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4ivEXT(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				VertexAttribI4ivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4svEXTNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[17])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[17])(index, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4svEXT(uint index, short* v)
		{
			VertexAttribI4svEXTNative(index, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4svEXT(uint index, Span<short> v)
		{
			fixed (short* pv0 = v)
			{
				VertexAttribI4svEXTNative(index, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4svEXT(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttribI4svEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4ubvEXTNative(uint index, byte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte*, void>)funcTable[18])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[18])(index, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4ubvEXT(uint index, byte* v)
		{
			VertexAttribI4ubvEXTNative(index, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4ubvEXT(uint index, string v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (v != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(v);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(v, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VertexAttribI4ubvEXTNative(index, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4ubvEXT(uint index, Span<byte> v)
		{
			fixed (byte* pv0 = v)
			{
				VertexAttribI4ubvEXTNative(index, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4ubvEXT(uint index, ref byte v)
		{
			fixed (byte* pv0 = &v)
			{
				VertexAttribI4ubvEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4uiEXTNative(uint index, uint x, uint y, uint z, uint w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)funcTable[19])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)funcTable[19])(index, x, y, z, w);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4uiEXT(uint index, uint x, uint y, uint z, uint w)
		{
			VertexAttribI4uiEXTNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4uivEXTNative(uint index, uint* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[20])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[20])(index, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4uivEXT(uint index, uint* v)
		{
			VertexAttribI4uivEXTNative(index, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4uivEXT(uint index, Span<uint> v)
		{
			fixed (uint* pv0 = v)
			{
				VertexAttribI4uivEXTNative(index, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4uivEXT(uint index, ref uint v)
		{
			fixed (uint* pv0 = &v)
			{
				VertexAttribI4uivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4usvEXTNative(uint index, ushort* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ushort*, void>)funcTable[21])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[21])(index, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4usvEXT(uint index, ushort* v)
		{
			VertexAttribI4usvEXTNative(index, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4usvEXT(uint index, Span<ushort> v)
		{
			fixed (ushort* pv0 = v)
			{
				VertexAttribI4usvEXTNative(index, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribI4usvEXT(uint index, ref ushort v)
		{
			fixed (ushort* pv0 = &v)
			{
				VertexAttribI4usvEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribIPointerEXTNative(uint index, int size, GLVertexAttribIType type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribIType, int, void*, void>)funcTable[22])(index, size, type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribIType, int, nint, void>)funcTable[22])(index, size, type, stride, (nint)pointer);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribIPointerEXT(uint index, int size, GLVertexAttribIType type, int stride, void* pointer)
		{
			VertexAttribIPointerEXTNative(index, size, type, stride, pointer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribIPointerEXT(uint index, int size, GLVertexAttribIType type, int stride, nint pointer)
		{
			VertexAttribIPointerEXTNative(index, size, type, stride, (void*)pointer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_EXT_gpu_shader4<br/>GL_NV_vertex_program4</remarks>
		public static void VertexAttribIPointerEXT<TPointer>(uint index, int size, GLVertexAttribIType type, int stride, Span<TPointer> pointer) where TPointer : unmanaged
		{
			fixed (TPointer* ppointer0 = pointer)
			{
				VertexAttribIPointerEXTNative(index, size, type, stride, ppointer0);
			}
		}

	}
}
