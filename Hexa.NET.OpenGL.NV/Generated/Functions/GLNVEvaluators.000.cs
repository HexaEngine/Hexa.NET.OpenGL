// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.NV
{
	public static unsafe partial class GLNVEvaluators
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EvalMapsNVNative(GLEvalTargetNV target, GLEvalMapsModeNV mode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, GLEvalMapsModeNV, void>)funcTable[0])(target, mode);
			#else
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, GLEvalMapsModeNV, void>)funcTable[0])(target, mode);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void EvalMapsNV(GLEvalTargetNV target, GLEvalMapsModeNV mode)
		{
			EvalMapsNVNative(target, mode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetMapAttribParameterfvNVNative(GLEvalTargetNV target, uint index, GLMapAttribParameterNV pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, uint, GLMapAttribParameterNV, float*, void>)funcTable[1])(target, index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, uint, GLMapAttribParameterNV, nint, void>)funcTable[1])(target, index, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapAttribParameterfvNV(GLEvalTargetNV target, uint index, GLMapAttribParameterNV pname, float* @params)
		{
			GetMapAttribParameterfvNVNative(target, index, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapAttribParameterfvNV(GLEvalTargetNV target, uint index, GLMapAttribParameterNV pname, Span<float> @params)
		{
			fixed (float* pparams0 = @params)
			{
				GetMapAttribParameterfvNVNative(target, index, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapAttribParameterfvNV(GLEvalTargetNV target, uint index, GLMapAttribParameterNV pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				GetMapAttribParameterfvNVNative(target, index, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetMapAttribParameterivNVNative(GLEvalTargetNV target, uint index, GLMapAttribParameterNV pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, uint, GLMapAttribParameterNV, int*, void>)funcTable[2])(target, index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, uint, GLMapAttribParameterNV, nint, void>)funcTable[2])(target, index, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapAttribParameterivNV(GLEvalTargetNV target, uint index, GLMapAttribParameterNV pname, int* @params)
		{
			GetMapAttribParameterivNVNative(target, index, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapAttribParameterivNV(GLEvalTargetNV target, uint index, GLMapAttribParameterNV pname, Span<int> @params)
		{
			fixed (int* pparams0 = @params)
			{
				GetMapAttribParameterivNVNative(target, index, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapAttribParameterivNV(GLEvalTargetNV target, uint index, GLMapAttribParameterNV pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetMapAttribParameterivNVNative(target, index, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetMapControlPointsNVNative(GLEvalTargetNV target, uint index, GLMapTypeNV type, int ustride, int vstride, bool packed, void* points)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, uint, GLMapTypeNV, int, int, byte, void*, void>)funcTable[3])(target, index, type, ustride, vstride, *((byte*)(&packed)), points);
			#else
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, uint, GLMapTypeNV, int, int, byte, nint, void>)funcTable[3])(target, index, type, ustride, vstride, *((byte*)(&packed)), (nint)points);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapControlPointsNV(GLEvalTargetNV target, uint index, GLMapTypeNV type, int ustride, int vstride, bool packed, void* points)
		{
			GetMapControlPointsNVNative(target, index, type, ustride, vstride, packed, points);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapControlPointsNV(GLEvalTargetNV target, uint index, GLMapTypeNV type, int ustride, int vstride, bool packed, nint points)
		{
			GetMapControlPointsNVNative(target, index, type, ustride, vstride, packed, (void*)points);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapControlPointsNV<TPoints>(GLEvalTargetNV target, uint index, GLMapTypeNV type, int ustride, int vstride, bool packed, Span<TPoints> points) where TPoints : unmanaged
		{
			fixed (TPoints* ppoints0 = points)
			{
				GetMapControlPointsNVNative(target, index, type, ustride, vstride, packed, ppoints0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetMapParameterfvNVNative(GLEvalTargetNV target, GLMapParameterNV pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, GLMapParameterNV, float*, void>)funcTable[4])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, GLMapParameterNV, nint, void>)funcTable[4])(target, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapParameterfvNV(GLEvalTargetNV target, GLMapParameterNV pname, float* @params)
		{
			GetMapParameterfvNVNative(target, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapParameterfvNV(GLEvalTargetNV target, GLMapParameterNV pname, Span<float> @params)
		{
			fixed (float* pparams0 = @params)
			{
				GetMapParameterfvNVNative(target, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapParameterfvNV(GLEvalTargetNV target, GLMapParameterNV pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				GetMapParameterfvNVNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetMapParameterivNVNative(GLEvalTargetNV target, GLMapParameterNV pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, GLMapParameterNV, int*, void>)funcTable[5])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, GLMapParameterNV, nint, void>)funcTable[5])(target, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapParameterivNV(GLEvalTargetNV target, GLMapParameterNV pname, int* @params)
		{
			GetMapParameterivNVNative(target, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapParameterivNV(GLEvalTargetNV target, GLMapParameterNV pname, Span<int> @params)
		{
			fixed (int* pparams0 = @params)
			{
				GetMapParameterivNVNative(target, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void GetMapParameterivNV(GLEvalTargetNV target, GLMapParameterNV pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetMapParameterivNVNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MapControlPointsNVNative(GLEvalTargetNV target, uint index, GLMapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, void* points)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, uint, GLMapTypeNV, int, int, int, int, byte, void*, void>)funcTable[6])(target, index, type, ustride, vstride, uorder, vorder, *((byte*)(&packed)), points);
			#else
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, uint, GLMapTypeNV, int, int, int, int, byte, nint, void>)funcTable[6])(target, index, type, ustride, vstride, uorder, vorder, *((byte*)(&packed)), (nint)points);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void MapControlPointsNV(GLEvalTargetNV target, uint index, GLMapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, void* points)
		{
			MapControlPointsNVNative(target, index, type, ustride, vstride, uorder, vorder, packed, points);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void MapControlPointsNV(GLEvalTargetNV target, uint index, GLMapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, nint points)
		{
			MapControlPointsNVNative(target, index, type, ustride, vstride, uorder, vorder, packed, (void*)points);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void MapControlPointsNV<TPoints>(GLEvalTargetNV target, uint index, GLMapTypeNV type, int ustride, int vstride, int uorder, int vorder, bool packed, Span<TPoints> points) where TPoints : unmanaged
		{
			fixed (TPoints* ppoints0 = points)
			{
				MapControlPointsNVNative(target, index, type, ustride, vstride, uorder, vorder, packed, ppoints0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MapParameterfvNVNative(GLEvalTargetNV target, GLMapParameterNV pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, GLMapParameterNV, float*, void>)funcTable[7])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, GLMapParameterNV, nint, void>)funcTable[7])(target, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void MapParameterfvNV(GLEvalTargetNV target, GLMapParameterNV pname, float* @params)
		{
			MapParameterfvNVNative(target, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void MapParameterfvNV(GLEvalTargetNV target, GLMapParameterNV pname, Span<float> @params)
		{
			fixed (float* pparams0 = @params)
			{
				MapParameterfvNVNative(target, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void MapParameterfvNV(GLEvalTargetNV target, GLMapParameterNV pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				MapParameterfvNVNative(target, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MapParameterivNVNative(GLEvalTargetNV target, GLMapParameterNV pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, GLMapParameterNV, int*, void>)funcTable[8])(target, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLEvalTargetNV, GLMapParameterNV, nint, void>)funcTable[8])(target, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void MapParameterivNV(GLEvalTargetNV target, GLMapParameterNV pname, int* @params)
		{
			MapParameterivNVNative(target, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void MapParameterivNV(GLEvalTargetNV target, GLMapParameterNV pname, Span<int> @params)
		{
			fixed (int* pparams0 = @params)
			{
				MapParameterivNVNative(target, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_evaluators</remarks>
		public static void MapParameterivNV(GLEvalTargetNV target, GLMapParameterNV pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				MapParameterivNVNative(target, pname, pparams0);
			}
		}

	}
}
