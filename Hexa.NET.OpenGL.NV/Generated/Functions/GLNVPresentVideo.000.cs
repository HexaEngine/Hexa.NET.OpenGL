// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.NV
{
	public static unsafe partial class GLNVPresentVideo
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVideoi64vNVNative(uint videoSlot, GLEnum pname, long* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, long*, void>)funcTable[0])(videoSlot, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, nint, void>)funcTable[0])(videoSlot, pname, (nint)@params);
			#endif
		}

		public static void GetVideoi64vNV(uint videoSlot, GLEnum pname, long* @params)
		{
			GetVideoi64vNVNative(videoSlot, pname, @params);
		}

		public static void GetVideoi64vNV(uint videoSlot, GLEnum pname, out long @params)
		{
			long pparams;
			GetVideoi64vNVNative(videoSlot, pname, &pparams);
			@params = pparams;
		}

		public static void GetVideoi64vNV(uint videoSlot, GLEnum pname, Span<long> @params)
		{
			fixed (long* pparams = @params)
			{
				GetVideoi64vNVNative(videoSlot, pname, pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVideoivNVNative(uint videoSlot, GLEnum pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, int*, void>)funcTable[1])(videoSlot, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, nint, void>)funcTable[1])(videoSlot, pname, (nint)@params);
			#endif
		}

		public static void GetVideoivNV(uint videoSlot, GLEnum pname, int* @params)
		{
			GetVideoivNVNative(videoSlot, pname, @params);
		}

		public static void GetVideoivNV(uint videoSlot, GLEnum pname, out int @params)
		{
			int pparams;
			GetVideoivNVNative(videoSlot, pname, &pparams);
			@params = pparams;
		}

		public static void GetVideoivNV(uint videoSlot, GLEnum pname, Span<int> @params)
		{
			fixed (int* pparams = @params)
			{
				GetVideoivNVNative(videoSlot, pname, pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVideoui64vNVNative(uint videoSlot, GLEnum pname, ulong* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, ulong*, void>)funcTable[2])(videoSlot, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, nint, void>)funcTable[2])(videoSlot, pname, (nint)@params);
			#endif
		}

		public static void GetVideoui64vNV(uint videoSlot, GLEnum pname, ulong* @params)
		{
			GetVideoui64vNVNative(videoSlot, pname, @params);
		}

		public static void GetVideoui64vNV(uint videoSlot, GLEnum pname, out ulong @params)
		{
			ulong pparams;
			GetVideoui64vNVNative(videoSlot, pname, &pparams);
			@params = pparams;
		}

		public static void GetVideoui64vNV(uint videoSlot, GLEnum pname, Span<ulong> @params)
		{
			fixed (ulong* pparams = @params)
			{
				GetVideoui64vNVNative(videoSlot, pname, pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVideouivNVNative(uint videoSlot, GLEnum pname, uint* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, uint*, void>)funcTable[3])(videoSlot, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, nint, void>)funcTable[3])(videoSlot, pname, (nint)@params);
			#endif
		}

		public static void GetVideouivNV(uint videoSlot, GLEnum pname, uint* @params)
		{
			GetVideouivNVNative(videoSlot, pname, @params);
		}

		public static void GetVideouivNV(uint videoSlot, GLEnum pname, out uint @params)
		{
			uint pparams;
			GetVideouivNVNative(videoSlot, pname, &pparams);
			@params = pparams;
		}

		public static void GetVideouivNV(uint videoSlot, GLEnum pname, Span<uint> @params)
		{
			fixed (uint* pparams = @params)
			{
				GetVideouivNVNative(videoSlot, pname, pparams);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PresentFrameDualFillNVNative(uint videoSlot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, GLEnum type, GLEnum target0, uint fill0, GLEnum target1, uint fill1, GLEnum target2, uint fill2, GLEnum target3, uint fill3)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong, uint, uint, GLEnum, GLEnum, uint, GLEnum, uint, GLEnum, uint, GLEnum, uint, void>)funcTable[4])(videoSlot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
			#else
			((delegate* unmanaged[Cdecl]<uint, ulong, uint, uint, GLEnum, GLEnum, uint, GLEnum, uint, GLEnum, uint, GLEnum, uint, void>)funcTable[4])(videoSlot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
			#endif
		}

		public static void PresentFrameDualFillNV(uint videoSlot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, GLEnum type, GLEnum target0, uint fill0, GLEnum target1, uint fill1, GLEnum target2, uint fill2, GLEnum target3, uint fill3)
		{
			PresentFrameDualFillNVNative(videoSlot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PresentFrameKeyedNVNative(uint videoSlot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, GLEnum type, GLEnum target0, uint fill0, uint key0, GLEnum target1, uint fill1, uint key1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong, uint, uint, GLEnum, GLEnum, uint, uint, GLEnum, uint, uint, void>)funcTable[5])(videoSlot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
			#else
			((delegate* unmanaged[Cdecl]<uint, ulong, uint, uint, GLEnum, GLEnum, uint, uint, GLEnum, uint, uint, void>)funcTable[5])(videoSlot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
			#endif
		}

		public static void PresentFrameKeyedNV(uint videoSlot, ulong minPresentTime, uint beginPresentTimeId, uint presentDurationId, GLEnum type, GLEnum target0, uint fill0, uint key0, GLEnum target1, uint fill1, uint key1)
		{
			PresentFrameKeyedNVNative(videoSlot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
		}

	}
}
