// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.NV
{
	public unsafe partial class GLNVRegisterCombiners
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CombinerInputNVNative(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerVariableNV variable, GLCombinerRegisterNV input, GLCombinerMappingNV mapping, GLCombinerComponentUsageNV componentUsage)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCombinerStageNV, GLCombinerPortionNV, GLCombinerVariableNV, GLCombinerRegisterNV, GLCombinerMappingNV, GLCombinerComponentUsageNV, void>)funcTable[0])(stage, portion, variable, input, mapping, componentUsage);
			#else
			((delegate* unmanaged[Cdecl]<GLCombinerStageNV, GLCombinerPortionNV, GLCombinerVariableNV, GLCombinerRegisterNV, GLCombinerMappingNV, GLCombinerComponentUsageNV, void>)funcTable[0])(stage, portion, variable, input, mapping, componentUsage);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void CombinerInputNV(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerVariableNV variable, GLCombinerRegisterNV input, GLCombinerMappingNV mapping, GLCombinerComponentUsageNV componentUsage)
		{
			CombinerInputNVNative(stage, portion, variable, input, mapping, componentUsage);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CombinerOutputNVNative(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerRegisterNV abOutput, GLCombinerRegisterNV cdOutput, GLCombinerRegisterNV sumOutput, GLCombinerScaleNV scale, GLCombinerBiasNV bias, bool abDotProduct, bool cdDotProduct, bool muxSum)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCombinerStageNV, GLCombinerPortionNV, GLCombinerRegisterNV, GLCombinerRegisterNV, GLCombinerRegisterNV, GLCombinerScaleNV, GLCombinerBiasNV, byte, byte, byte, void>)funcTable[1])(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, *((byte*)(&abDotProduct)), *((byte*)(&cdDotProduct)), *((byte*)(&muxSum)));
			#else
			((delegate* unmanaged[Cdecl]<GLCombinerStageNV, GLCombinerPortionNV, GLCombinerRegisterNV, GLCombinerRegisterNV, GLCombinerRegisterNV, GLCombinerScaleNV, GLCombinerBiasNV, byte, byte, byte, void>)funcTable[1])(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, *((byte*)(&abDotProduct)), *((byte*)(&cdDotProduct)), *((byte*)(&muxSum)));
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void CombinerOutputNV(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerRegisterNV abOutput, GLCombinerRegisterNV cdOutput, GLCombinerRegisterNV sumOutput, GLCombinerScaleNV scale, GLCombinerBiasNV bias, bool abDotProduct, bool cdDotProduct, bool muxSum)
		{
			CombinerOutputNVNative(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CombinerParameterfNVNative(GLCombinerParameterNV pname, float param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCombinerParameterNV, float, void>)funcTable[2])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLCombinerParameterNV, float, void>)funcTable[2])(pname, param);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void CombinerParameterfNV(GLCombinerParameterNV pname, float param)
		{
			CombinerParameterfNVNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CombinerParameterfvNVNative(GLCombinerParameterNV pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCombinerParameterNV, float*, void>)funcTable[3])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLCombinerParameterNV, nint, void>)funcTable[3])(pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void CombinerParameterfvNV(GLCombinerParameterNV pname, float* @params)
		{
			CombinerParameterfvNVNative(pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void CombinerParameterfvNV(GLCombinerParameterNV pname, Span<float> @params)
		{
			fixed (float* pparams0 = @params)
			{
				CombinerParameterfvNVNative(pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void CombinerParameterfvNV(GLCombinerParameterNV pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				CombinerParameterfvNVNative(pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CombinerParameteriNVNative(GLCombinerParameterNV pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCombinerParameterNV, int, void>)funcTable[4])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLCombinerParameterNV, int, void>)funcTable[4])(pname, param);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void CombinerParameteriNV(GLCombinerParameterNV pname, int param)
		{
			CombinerParameteriNVNative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CombinerParameterivNVNative(GLCombinerParameterNV pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCombinerParameterNV, int*, void>)funcTable[5])(pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLCombinerParameterNV, nint, void>)funcTable[5])(pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void CombinerParameterivNV(GLCombinerParameterNV pname, int* @params)
		{
			CombinerParameterivNVNative(pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void CombinerParameterivNV(GLCombinerParameterNV pname, Span<int> @params)
		{
			fixed (int* pparams0 = @params)
			{
				CombinerParameterivNVNative(pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void CombinerParameterivNV(GLCombinerParameterNV pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				CombinerParameterivNVNative(pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void FinalCombinerInputNVNative(GLCombinerVariableNV variable, GLCombinerRegisterNV input, GLCombinerMappingNV mapping, GLCombinerComponentUsageNV componentUsage)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCombinerVariableNV, GLCombinerRegisterNV, GLCombinerMappingNV, GLCombinerComponentUsageNV, void>)funcTable[6])(variable, input, mapping, componentUsage);
			#else
			((delegate* unmanaged[Cdecl]<GLCombinerVariableNV, GLCombinerRegisterNV, GLCombinerMappingNV, GLCombinerComponentUsageNV, void>)funcTable[6])(variable, input, mapping, componentUsage);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void FinalCombinerInputNV(GLCombinerVariableNV variable, GLCombinerRegisterNV input, GLCombinerMappingNV mapping, GLCombinerComponentUsageNV componentUsage)
		{
			FinalCombinerInputNVNative(variable, input, mapping, componentUsage);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetCombinerInputParameterfvNVNative(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerVariableNV variable, GLCombinerParameterNV pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCombinerStageNV, GLCombinerPortionNV, GLCombinerVariableNV, GLCombinerParameterNV, float*, void>)funcTable[7])(stage, portion, variable, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLCombinerStageNV, GLCombinerPortionNV, GLCombinerVariableNV, GLCombinerParameterNV, nint, void>)funcTable[7])(stage, portion, variable, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetCombinerInputParameterfvNV(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerVariableNV variable, GLCombinerParameterNV pname, float* @params)
		{
			GetCombinerInputParameterfvNVNative(stage, portion, variable, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetCombinerInputParameterfvNV(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerVariableNV variable, GLCombinerParameterNV pname, Span<float> @params)
		{
			fixed (float* pparams0 = @params)
			{
				GetCombinerInputParameterfvNVNative(stage, portion, variable, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetCombinerInputParameterfvNV(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerVariableNV variable, GLCombinerParameterNV pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				GetCombinerInputParameterfvNVNative(stage, portion, variable, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetCombinerInputParameterivNVNative(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerVariableNV variable, GLCombinerParameterNV pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCombinerStageNV, GLCombinerPortionNV, GLCombinerVariableNV, GLCombinerParameterNV, int*, void>)funcTable[8])(stage, portion, variable, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLCombinerStageNV, GLCombinerPortionNV, GLCombinerVariableNV, GLCombinerParameterNV, nint, void>)funcTable[8])(stage, portion, variable, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetCombinerInputParameterivNV(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerVariableNV variable, GLCombinerParameterNV pname, int* @params)
		{
			GetCombinerInputParameterivNVNative(stage, portion, variable, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetCombinerInputParameterivNV(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerVariableNV variable, GLCombinerParameterNV pname, Span<int> @params)
		{
			fixed (int* pparams0 = @params)
			{
				GetCombinerInputParameterivNVNative(stage, portion, variable, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetCombinerInputParameterivNV(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerVariableNV variable, GLCombinerParameterNV pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetCombinerInputParameterivNVNative(stage, portion, variable, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetCombinerOutputParameterfvNVNative(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerParameterNV pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCombinerStageNV, GLCombinerPortionNV, GLCombinerParameterNV, float*, void>)funcTable[9])(stage, portion, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLCombinerStageNV, GLCombinerPortionNV, GLCombinerParameterNV, nint, void>)funcTable[9])(stage, portion, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetCombinerOutputParameterfvNV(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerParameterNV pname, float* @params)
		{
			GetCombinerOutputParameterfvNVNative(stage, portion, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetCombinerOutputParameterfvNV(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerParameterNV pname, Span<float> @params)
		{
			fixed (float* pparams0 = @params)
			{
				GetCombinerOutputParameterfvNVNative(stage, portion, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetCombinerOutputParameterfvNV(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerParameterNV pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				GetCombinerOutputParameterfvNVNative(stage, portion, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetCombinerOutputParameterivNVNative(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerParameterNV pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCombinerStageNV, GLCombinerPortionNV, GLCombinerParameterNV, int*, void>)funcTable[10])(stage, portion, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLCombinerStageNV, GLCombinerPortionNV, GLCombinerParameterNV, nint, void>)funcTable[10])(stage, portion, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetCombinerOutputParameterivNV(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerParameterNV pname, int* @params)
		{
			GetCombinerOutputParameterivNVNative(stage, portion, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetCombinerOutputParameterivNV(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerParameterNV pname, Span<int> @params)
		{
			fixed (int* pparams0 = @params)
			{
				GetCombinerOutputParameterivNVNative(stage, portion, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetCombinerOutputParameterivNV(GLCombinerStageNV stage, GLCombinerPortionNV portion, GLCombinerParameterNV pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetCombinerOutputParameterivNVNative(stage, portion, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetFinalCombinerInputParameterfvNVNative(GLCombinerVariableNV variable, GLCombinerParameterNV pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCombinerVariableNV, GLCombinerParameterNV, float*, void>)funcTable[11])(variable, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLCombinerVariableNV, GLCombinerParameterNV, nint, void>)funcTable[11])(variable, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetFinalCombinerInputParameterfvNV(GLCombinerVariableNV variable, GLCombinerParameterNV pname, float* @params)
		{
			GetFinalCombinerInputParameterfvNVNative(variable, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetFinalCombinerInputParameterfvNV(GLCombinerVariableNV variable, GLCombinerParameterNV pname, Span<float> @params)
		{
			fixed (float* pparams0 = @params)
			{
				GetFinalCombinerInputParameterfvNVNative(variable, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetFinalCombinerInputParameterfvNV(GLCombinerVariableNV variable, GLCombinerParameterNV pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				GetFinalCombinerInputParameterfvNVNative(variable, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetFinalCombinerInputParameterivNVNative(GLCombinerVariableNV variable, GLCombinerParameterNV pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLCombinerVariableNV, GLCombinerParameterNV, int*, void>)funcTable[12])(variable, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLCombinerVariableNV, GLCombinerParameterNV, nint, void>)funcTable[12])(variable, pname, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetFinalCombinerInputParameterivNV(GLCombinerVariableNV variable, GLCombinerParameterNV pname, int* @params)
		{
			GetFinalCombinerInputParameterivNVNative(variable, pname, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetFinalCombinerInputParameterivNV(GLCombinerVariableNV variable, GLCombinerParameterNV pname, Span<int> @params)
		{
			fixed (int* pparams0 = @params)
			{
				GetFinalCombinerInputParameterivNVNative(variable, pname, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_register_combiners</remarks>
		public void GetFinalCombinerInputParameterivNV(GLCombinerVariableNV variable, GLCombinerParameterNV pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetFinalCombinerInputParameterivNVNative(variable, pname, pparams0);
			}
		}

	}
}
