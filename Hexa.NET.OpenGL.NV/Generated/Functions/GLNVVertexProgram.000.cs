// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.NV
{
	public static unsafe partial class GLNVVertexProgram
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte AreProgramsResidentNVNative(int n, uint* programs, byte* residences)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<int, uint*, byte*, byte>)funcTable[0])(n, programs, residences);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<int, nint, nint, byte>)funcTable[0])(n, (nint)programs, (nint)residences);
			#endif
		}

		public static bool AreProgramsResidentNV(int n, uint* programs, byte* residences)
		{
			byte ret = AreProgramsResidentNVNative(n, programs, residences);
			return ret != 0;
		}

		public static bool AreProgramsResidentNV(int n, ref uint programs, byte* residences)
		{
			fixed (uint* pprograms0 = &programs)
			{
				byte ret = AreProgramsResidentNVNative(n, pprograms0, residences);
				return ret != 0;
			}
		}

		public static bool AreProgramsResidentNV(int n, uint* programs, string residences)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (residences != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(residences);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(residences, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			byte ret = AreProgramsResidentNVNative(n, programs, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret != 0;
		}

		public static bool AreProgramsResidentNV(int n, uint* programs, ReadOnlySpan<byte> residences)
		{
			fixed (byte* presidences0 = residences)
			{
				byte ret = AreProgramsResidentNVNative(n, programs, presidences0);
				return ret != 0;
			}
		}

		public static bool AreProgramsResidentNV(int n, uint* programs, ref byte residences)
		{
			fixed (byte* presidences0 = &residences)
			{
				byte ret = AreProgramsResidentNVNative(n, programs, presidences0);
				return ret != 0;
			}
		}

		public static bool AreProgramsResidentNV(int n, ref uint programs, ref byte residences)
		{
			fixed (uint* pprograms0 = &programs)
			{
				fixed (byte* presidences1 = &residences)
				{
					byte ret = AreProgramsResidentNVNative(n, pprograms0, presidences1);
					return ret != 0;
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BindProgramNVNative(GLVertexAttribEnumNV target, uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, void>)funcTable[1])(target, id);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, void>)funcTable[1])(target, id);
			#endif
		}

		public static void BindProgramNV(GLVertexAttribEnumNV target, uint id)
		{
			BindProgramNVNative(target, id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DeleteProgramsNVNative(int n, uint* programs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[2])(n, programs);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[2])(n, (nint)programs);
			#endif
		}

		public static void DeleteProgramsNV(int n, uint* programs)
		{
			DeleteProgramsNVNative(n, programs);
		}

		public static void DeleteProgramsNV(int n, ref uint programs)
		{
			fixed (uint* pprograms0 = &programs)
			{
				DeleteProgramsNVNative(n, pprograms0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ExecuteProgramNVNative(GLVertexAttribEnumNV target, uint id, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, float*, void>)funcTable[3])(target, id, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, nint, void>)funcTable[3])(target, id, (nint)@params);
			#endif
		}

		public static void ExecuteProgramNV(GLVertexAttribEnumNV target, uint id, float* @params)
		{
			ExecuteProgramNVNative(target, id, @params);
		}

		public static void ExecuteProgramNV(GLVertexAttribEnumNV target, uint id, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				ExecuteProgramNVNative(target, id, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GenProgramsNVNative(int n, uint* programs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[4])(n, programs);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[4])(n, (nint)programs);
			#endif
		}

		public static void GenProgramsNV(int n, uint* programs)
		{
			GenProgramsNVNative(n, programs);
		}

		public static void GenProgramsNV(int n, ref uint programs)
		{
			fixed (uint* pprograms0 = &programs)
			{
				GenProgramsNVNative(n, pprograms0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetProgramParameterdvNVNative(GLVertexAttribEnumNV target, uint index, GLVertexAttribEnumNV pname, double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, GLVertexAttribEnumNV, double*, void>)funcTable[5])(target, index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, GLVertexAttribEnumNV, nint, void>)funcTable[5])(target, index, pname, (nint)@params);
			#endif
		}

		public static void GetProgramParameterdvNV(GLVertexAttribEnumNV target, uint index, GLVertexAttribEnumNV pname, double* @params)
		{
			GetProgramParameterdvNVNative(target, index, pname, @params);
		}

		public static void GetProgramParameterdvNV(GLVertexAttribEnumNV target, uint index, GLVertexAttribEnumNV pname, ref double @params)
		{
			fixed (double* pparams0 = &@params)
			{
				GetProgramParameterdvNVNative(target, index, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetProgramParameterfvNVNative(GLVertexAttribEnumNV target, uint index, GLVertexAttribEnumNV pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, GLVertexAttribEnumNV, float*, void>)funcTable[6])(target, index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, GLVertexAttribEnumNV, nint, void>)funcTable[6])(target, index, pname, (nint)@params);
			#endif
		}

		public static void GetProgramParameterfvNV(GLVertexAttribEnumNV target, uint index, GLVertexAttribEnumNV pname, float* @params)
		{
			GetProgramParameterfvNVNative(target, index, pname, @params);
		}

		public static void GetProgramParameterfvNV(GLVertexAttribEnumNV target, uint index, GLVertexAttribEnumNV pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				GetProgramParameterfvNVNative(target, index, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetProgramStringNVNative(uint id, GLVertexAttribEnumNV pname, byte* program)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnumNV, byte*, void>)funcTable[7])(id, pname, program);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnumNV, nint, void>)funcTable[7])(id, pname, (nint)program);
			#endif
		}

		public static void GetProgramStringNV(uint id, GLVertexAttribEnumNV pname, byte* program)
		{
			GetProgramStringNVNative(id, pname, program);
		}

		public static void GetProgramStringNV(uint id, GLVertexAttribEnumNV pname, string program)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (program != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(program);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(program, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			GetProgramStringNVNative(id, pname, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void GetProgramStringNV(uint id, GLVertexAttribEnumNV pname, ReadOnlySpan<byte> program)
		{
			fixed (byte* pprogram0 = program)
			{
				GetProgramStringNVNative(id, pname, pprogram0);
			}
		}

		public static void GetProgramStringNV(uint id, GLVertexAttribEnumNV pname, ref byte program)
		{
			fixed (byte* pprogram0 = &program)
			{
				GetProgramStringNVNative(id, pname, pprogram0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetProgramivNVNative(uint id, GLVertexAttribEnumNV pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnumNV, int*, void>)funcTable[8])(id, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnumNV, nint, void>)funcTable[8])(id, pname, (nint)@params);
			#endif
		}

		public static void GetProgramivNV(uint id, GLVertexAttribEnumNV pname, int* @params)
		{
			GetProgramivNVNative(id, pname, @params);
		}

		public static void GetProgramivNV(uint id, GLVertexAttribEnumNV pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetProgramivNVNative(id, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetTrackMatrixivNVNative(GLVertexAttribEnumNV target, uint address, GLVertexAttribEnumNV pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, GLVertexAttribEnumNV, int*, void>)funcTable[9])(target, address, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, GLVertexAttribEnumNV, nint, void>)funcTable[9])(target, address, pname, (nint)@params);
			#endif
		}

		public static void GetTrackMatrixivNV(GLVertexAttribEnumNV target, uint address, GLVertexAttribEnumNV pname, int* @params)
		{
			GetTrackMatrixivNVNative(target, address, pname, @params);
		}

		public static void GetTrackMatrixivNV(GLVertexAttribEnumNV target, uint address, GLVertexAttribEnumNV pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetTrackMatrixivNVNative(target, address, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribPointervNVNative(uint index, GLVertexAttribEnumNV pname, void** pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnumNV, void**, void>)funcTable[10])(index, pname, pointer);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnumNV, nint, void>)funcTable[10])(index, pname, (nint)pointer);
			#endif
		}

		public static void GetVertexAttribPointervNV(uint index, GLVertexAttribEnumNV pname, void** pointer)
		{
			GetVertexAttribPointervNVNative(index, pname, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribdvNVNative(uint index, GLVertexAttribEnumNV pname, double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnumNV, double*, void>)funcTable[11])(index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnumNV, nint, void>)funcTable[11])(index, pname, (nint)@params);
			#endif
		}

		public static void GetVertexAttribdvNV(uint index, GLVertexAttribEnumNV pname, double* @params)
		{
			GetVertexAttribdvNVNative(index, pname, @params);
		}

		public static void GetVertexAttribdvNV(uint index, GLVertexAttribEnumNV pname, ref double @params)
		{
			fixed (double* pparams0 = &@params)
			{
				GetVertexAttribdvNVNative(index, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribfvNVNative(uint index, GLVertexAttribEnumNV pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnumNV, float*, void>)funcTable[12])(index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnumNV, nint, void>)funcTable[12])(index, pname, (nint)@params);
			#endif
		}

		public static void GetVertexAttribfvNV(uint index, GLVertexAttribEnumNV pname, float* @params)
		{
			GetVertexAttribfvNVNative(index, pname, @params);
		}

		public static void GetVertexAttribfvNV(uint index, GLVertexAttribEnumNV pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				GetVertexAttribfvNVNative(index, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetVertexAttribivNVNative(uint index, GLVertexAttribEnumNV pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnumNV, int*, void>)funcTable[13])(index, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLVertexAttribEnumNV, nint, void>)funcTable[13])(index, pname, (nint)@params);
			#endif
		}

		public static void GetVertexAttribivNV(uint index, GLVertexAttribEnumNV pname, int* @params)
		{
			GetVertexAttribivNVNative(index, pname, @params);
		}

		public static void GetVertexAttribivNV(uint index, GLVertexAttribEnumNV pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				GetVertexAttribivNVNative(index, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsProgramNVNative(uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[14])(id);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[14])(id);
			#endif
		}

		public static bool IsProgramNV(uint id)
		{
			byte ret = IsProgramNVNative(id);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void LoadProgramNVNative(GLVertexAttribEnumNV target, uint id, int len, byte* program)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, int, byte*, void>)funcTable[15])(target, id, len, program);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, int, nint, void>)funcTable[15])(target, id, len, (nint)program);
			#endif
		}

		public static void LoadProgramNV(GLVertexAttribEnumNV target, uint id, int len, byte* program)
		{
			LoadProgramNVNative(target, id, len, program);
		}

		public static void LoadProgramNV(GLVertexAttribEnumNV target, uint id, int len, string program)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (program != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(program);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(program, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			LoadProgramNVNative(target, id, len, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void LoadProgramNV(GLVertexAttribEnumNV target, uint id, int len, ReadOnlySpan<byte> program)
		{
			fixed (byte* pprogram0 = program)
			{
				LoadProgramNVNative(target, id, len, pprogram0);
			}
		}

		public static void LoadProgramNV(GLVertexAttribEnumNV target, uint id, int len, ref byte program)
		{
			fixed (byte* pprogram0 = &program)
			{
				LoadProgramNVNative(target, id, len, pprogram0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramParameter4dNVNative(GLVertexAttribEnumNV target, uint index, double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, double, double, double, double, void>)funcTable[16])(target, index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, double, double, double, double, void>)funcTable[16])(target, index, x, y, z, w);
			#endif
		}

		public static void ProgramParameter4dNV(GLVertexAttribEnumNV target, uint index, double x, double y, double z, double w)
		{
			ProgramParameter4dNVNative(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramParameter4dvNVNative(GLVertexAttribEnumNV target, uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, double*, void>)funcTable[17])(target, index, v);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, nint, void>)funcTable[17])(target, index, (nint)v);
			#endif
		}

		public static void ProgramParameter4dvNV(GLVertexAttribEnumNV target, uint index, double* v)
		{
			ProgramParameter4dvNVNative(target, index, v);
		}

		public static void ProgramParameter4dvNV(GLVertexAttribEnumNV target, uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				ProgramParameter4dvNVNative(target, index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramParameter4fNVNative(GLVertexAttribEnumNV target, uint index, float x, float y, float z, float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, float, float, float, float, void>)funcTable[18])(target, index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, float, float, float, float, void>)funcTable[18])(target, index, x, y, z, w);
			#endif
		}

		public static void ProgramParameter4fNV(GLVertexAttribEnumNV target, uint index, float x, float y, float z, float w)
		{
			ProgramParameter4fNVNative(target, index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramParameter4fvNVNative(GLVertexAttribEnumNV target, uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, float*, void>)funcTable[19])(target, index, v);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, nint, void>)funcTable[19])(target, index, (nint)v);
			#endif
		}

		public static void ProgramParameter4fvNV(GLVertexAttribEnumNV target, uint index, float* v)
		{
			ProgramParameter4fvNVNative(target, index, v);
		}

		public static void ProgramParameter4fvNV(GLVertexAttribEnumNV target, uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				ProgramParameter4fvNVNative(target, index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramParameters4dvNVNative(GLVertexAttribEnumNV target, uint index, int count, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, int, double*, void>)funcTable[20])(target, index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, int, nint, void>)funcTable[20])(target, index, count, (nint)v);
			#endif
		}

		public static void ProgramParameters4dvNV(GLVertexAttribEnumNV target, uint index, int count, double* v)
		{
			ProgramParameters4dvNVNative(target, index, count, v);
		}

		public static void ProgramParameters4dvNV(GLVertexAttribEnumNV target, uint index, int count, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				ProgramParameters4dvNVNative(target, index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramParameters4fvNVNative(GLVertexAttribEnumNV target, uint index, int count, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, int, float*, void>)funcTable[21])(target, index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, int, nint, void>)funcTable[21])(target, index, count, (nint)v);
			#endif
		}

		public static void ProgramParameters4fvNV(GLVertexAttribEnumNV target, uint index, int count, float* v)
		{
			ProgramParameters4fvNVNative(target, index, count, v);
		}

		public static void ProgramParameters4fvNV(GLVertexAttribEnumNV target, uint index, int count, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				ProgramParameters4fvNVNative(target, index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void RequestResidentProgramsNVNative(int n, uint* programs)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[22])(n, programs);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[22])(n, (nint)programs);
			#endif
		}

		public static void RequestResidentProgramsNV(int n, uint* programs)
		{
			RequestResidentProgramsNVNative(n, programs);
		}

		public static void RequestResidentProgramsNV(int n, ref uint programs)
		{
			fixed (uint* pprograms0 = &programs)
			{
				RequestResidentProgramsNVNative(n, pprograms0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void TrackMatrixNVNative(GLVertexAttribEnumNV target, uint address, GLVertexAttribEnumNV matrix, GLVertexAttribEnumNV transform)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, GLVertexAttribEnumNV, GLVertexAttribEnumNV, void>)funcTable[23])(target, address, matrix, transform);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexAttribEnumNV, uint, GLVertexAttribEnumNV, GLVertexAttribEnumNV, void>)funcTable[23])(target, address, matrix, transform);
			#endif
		}

		public static void TrackMatrixNV(GLVertexAttribEnumNV target, uint address, GLVertexAttribEnumNV matrix, GLVertexAttribEnumNV transform)
		{
			TrackMatrixNVNative(target, address, matrix, transform);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1dNVNative(uint index, double x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[24])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[24])(index, x);
			#endif
		}

		public static void VertexAttrib1dNV(uint index, double x)
		{
			VertexAttrib1dNVNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1dvNVNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[25])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[25])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib1dvNV(uint index, double* v)
		{
			VertexAttrib1dvNVNative(index, v);
		}

		public static void VertexAttrib1dvNV(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib1dvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1fNVNative(uint index, float x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[26])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[26])(index, x);
			#endif
		}

		public static void VertexAttrib1fNV(uint index, float x)
		{
			VertexAttrib1fNVNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1fvNVNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[27])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[27])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib1fvNV(uint index, float* v)
		{
			VertexAttrib1fvNVNative(index, v);
		}

		public static void VertexAttrib1fvNV(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib1fvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1sNVNative(uint index, short x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[28])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[28])(index, x);
			#endif
		}

		public static void VertexAttrib1sNV(uint index, short x)
		{
			VertexAttrib1sNVNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1svNVNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[29])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[29])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib1svNV(uint index, short* v)
		{
			VertexAttrib1svNVNative(index, v);
		}

		public static void VertexAttrib1svNV(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib1svNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2dNVNative(uint index, double x, double y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[30])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[30])(index, x, y);
			#endif
		}

		public static void VertexAttrib2dNV(uint index, double x, double y)
		{
			VertexAttrib2dNVNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2dvNVNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[31])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[31])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib2dvNV(uint index, double* v)
		{
			VertexAttrib2dvNVNative(index, v);
		}

		public static void VertexAttrib2dvNV(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib2dvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2fNVNative(uint index, float x, float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[32])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[32])(index, x, y);
			#endif
		}

		public static void VertexAttrib2fNV(uint index, float x, float y)
		{
			VertexAttrib2fNVNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2fvNVNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[33])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[33])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib2fvNV(uint index, float* v)
		{
			VertexAttrib2fvNVNative(index, v);
		}

		public static void VertexAttrib2fvNV(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib2fvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2sNVNative(uint index, short x, short y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[34])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[34])(index, x, y);
			#endif
		}

		public static void VertexAttrib2sNV(uint index, short x, short y)
		{
			VertexAttrib2sNVNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2svNVNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[35])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[35])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib2svNV(uint index, short* v)
		{
			VertexAttrib2svNVNative(index, v);
		}

		public static void VertexAttrib2svNV(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib2svNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3dNVNative(uint index, double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[36])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[36])(index, x, y, z);
			#endif
		}

		public static void VertexAttrib3dNV(uint index, double x, double y, double z)
		{
			VertexAttrib3dNVNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3dvNVNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[37])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[37])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib3dvNV(uint index, double* v)
		{
			VertexAttrib3dvNVNative(index, v);
		}

		public static void VertexAttrib3dvNV(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib3dvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3fNVNative(uint index, float x, float y, float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[38])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[38])(index, x, y, z);
			#endif
		}

		public static void VertexAttrib3fNV(uint index, float x, float y, float z)
		{
			VertexAttrib3fNVNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3fvNVNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[39])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[39])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib3fvNV(uint index, float* v)
		{
			VertexAttrib3fvNVNative(index, v);
		}

		public static void VertexAttrib3fvNV(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib3fvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3sNVNative(uint index, short x, short y, short z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[40])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[40])(index, x, y, z);
			#endif
		}

		public static void VertexAttrib3sNV(uint index, short x, short y, short z)
		{
			VertexAttrib3sNVNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3svNVNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[41])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[41])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib3svNV(uint index, short* v)
		{
			VertexAttrib3svNVNative(index, v);
		}

		public static void VertexAttrib3svNV(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib3svNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4dNVNative(uint index, double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[42])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[42])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4dNV(uint index, double x, double y, double z, double w)
		{
			VertexAttrib4dNVNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4dvNVNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[43])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[43])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4dvNV(uint index, double* v)
		{
			VertexAttrib4dvNVNative(index, v);
		}

		public static void VertexAttrib4dvNV(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib4dvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4fNVNative(uint index, float x, float y, float z, float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[44])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[44])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4fNV(uint index, float x, float y, float z, float w)
		{
			VertexAttrib4fNVNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4fvNVNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[45])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[45])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4fvNV(uint index, float* v)
		{
			VertexAttrib4fvNVNative(index, v);
		}

		public static void VertexAttrib4fvNV(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib4fvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4sNVNative(uint index, short x, short y, short z, short w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[46])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[46])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4sNV(uint index, short x, short y, short z, short w)
		{
			VertexAttrib4sNVNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4svNVNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[47])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[47])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4svNV(uint index, short* v)
		{
			VertexAttrib4svNVNative(index, v);
		}

		public static void VertexAttrib4svNV(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib4svNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4ubNVNative(uint index, byte x, byte y, byte z, byte w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)funcTable[48])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)funcTable[48])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4ubNV(uint index, byte x, byte y, byte z, byte w)
		{
			VertexAttrib4ubNVNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4ubvNVNative(uint index, byte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte*, void>)funcTable[49])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[49])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4ubvNV(uint index, byte* v)
		{
			VertexAttrib4ubvNVNative(index, v);
		}

		public static void VertexAttrib4ubvNV(uint index, string v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (v != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(v);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(v, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VertexAttrib4ubvNVNative(index, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void VertexAttrib4ubvNV(uint index, ReadOnlySpan<byte> v)
		{
			fixed (byte* pv0 = v)
			{
				VertexAttrib4ubvNVNative(index, pv0);
			}
		}

		public static void VertexAttrib4ubvNV(uint index, ref byte v)
		{
			fixed (byte* pv0 = &v)
			{
				VertexAttrib4ubvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribPointerNVNative(uint index, int fsize, GLVertexAttribEnumNV type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribEnumNV, int, void*, void>)funcTable[50])(index, fsize, type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribEnumNV, int, nint, void>)funcTable[50])(index, fsize, type, stride, (nint)pointer);
			#endif
		}

		public static void VertexAttribPointerNV(uint index, int fsize, GLVertexAttribEnumNV type, int stride, void* pointer)
		{
			VertexAttribPointerNVNative(index, fsize, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs1dvNVNative(uint index, int count, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double*, void>)funcTable[51])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[51])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs1dvNV(uint index, int count, double* v)
		{
			VertexAttribs1dvNVNative(index, count, v);
		}

		public static void VertexAttribs1dvNV(uint index, int count, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribs1dvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs1fvNVNative(uint index, int count, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[52])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[52])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs1fvNV(uint index, int count, float* v)
		{
			VertexAttribs1fvNVNative(index, count, v);
		}

		public static void VertexAttribs1fvNV(uint index, int count, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttribs1fvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs1svNVNative(uint index, int count, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, short*, void>)funcTable[53])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[53])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs1svNV(uint index, int count, short* v)
		{
			VertexAttribs1svNVNative(index, count, v);
		}

		public static void VertexAttribs1svNV(uint index, int count, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttribs1svNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs2dvNVNative(uint index, int count, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double*, void>)funcTable[54])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[54])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs2dvNV(uint index, int count, double* v)
		{
			VertexAttribs2dvNVNative(index, count, v);
		}

		public static void VertexAttribs2dvNV(uint index, int count, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribs2dvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs2fvNVNative(uint index, int count, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[55])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[55])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs2fvNV(uint index, int count, float* v)
		{
			VertexAttribs2fvNVNative(index, count, v);
		}

		public static void VertexAttribs2fvNV(uint index, int count, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttribs2fvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs2svNVNative(uint index, int count, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, short*, void>)funcTable[56])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[56])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs2svNV(uint index, int count, short* v)
		{
			VertexAttribs2svNVNative(index, count, v);
		}

		public static void VertexAttribs2svNV(uint index, int count, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttribs2svNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs3dvNVNative(uint index, int count, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double*, void>)funcTable[57])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[57])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs3dvNV(uint index, int count, double* v)
		{
			VertexAttribs3dvNVNative(index, count, v);
		}

		public static void VertexAttribs3dvNV(uint index, int count, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribs3dvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs3fvNVNative(uint index, int count, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[58])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[58])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs3fvNV(uint index, int count, float* v)
		{
			VertexAttribs3fvNVNative(index, count, v);
		}

		public static void VertexAttribs3fvNV(uint index, int count, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttribs3fvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs3svNVNative(uint index, int count, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, short*, void>)funcTable[59])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[59])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs3svNV(uint index, int count, short* v)
		{
			VertexAttribs3svNVNative(index, count, v);
		}

		public static void VertexAttribs3svNV(uint index, int count, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttribs3svNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs4dvNVNative(uint index, int count, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double*, void>)funcTable[60])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[60])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs4dvNV(uint index, int count, double* v)
		{
			VertexAttribs4dvNVNative(index, count, v);
		}

		public static void VertexAttribs4dvNV(uint index, int count, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribs4dvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs4fvNVNative(uint index, int count, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[61])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[61])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs4fvNV(uint index, int count, float* v)
		{
			VertexAttribs4fvNVNative(index, count, v);
		}

		public static void VertexAttribs4fvNV(uint index, int count, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttribs4fvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs4svNVNative(uint index, int count, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, short*, void>)funcTable[62])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[62])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs4svNV(uint index, int count, short* v)
		{
			VertexAttribs4svNVNative(index, count, v);
		}

		public static void VertexAttribs4svNV(uint index, int count, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttribs4svNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs4ubvNVNative(uint index, int count, byte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, byte*, void>)funcTable[63])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[63])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs4ubvNV(uint index, int count, byte* v)
		{
			VertexAttribs4ubvNVNative(index, count, v);
		}

		public static void VertexAttribs4ubvNV(uint index, int count, string v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (v != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(v);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(v, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VertexAttribs4ubvNVNative(index, count, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void VertexAttribs4ubvNV(uint index, int count, ReadOnlySpan<byte> v)
		{
			fixed (byte* pv0 = v)
			{
				VertexAttribs4ubvNVNative(index, count, pv0);
			}
		}

		public static void VertexAttribs4ubvNV(uint index, int count, ref byte v)
		{
			fixed (byte* pv0 = &v)
			{
				VertexAttribs4ubvNVNative(index, count, pv0);
			}
		}

	}
}
