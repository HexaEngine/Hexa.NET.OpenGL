// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.NV
{
	public static unsafe partial class GLNVTransformFeedback2
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BindTransformFeedbackNVNative(GLBufferTargetARB target, uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLBufferTargetARB, uint, void>)funcTable[0])(target, id);
			#else
			((delegate* unmanaged[Cdecl]<GLBufferTargetARB, uint, void>)funcTable[0])(target, id);
			#endif
		}

		public static void BindTransformFeedbackNV(GLBufferTargetARB target, uint id)
		{
			BindTransformFeedbackNVNative(target, id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DeleteTransformFeedbacksNVNative(int n, uint* ids)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[1])(n, ids);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[1])(n, (nint)ids);
			#endif
		}

		public static void DeleteTransformFeedbacksNV(int n, uint* ids)
		{
			DeleteTransformFeedbacksNVNative(n, ids);
		}

		public static void DeleteTransformFeedbacksN(uint id)
		{
			DeleteTransformFeedbacksNVNative(1, &id);
		}

		public static void DeleteTransformFeedbacksNV(int n, ref uint ids)
		{
			fixed (uint* pids0 = &ids)
			{
				DeleteTransformFeedbacksNVNative(n, pids0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawTransformFeedbackNVNative(GLPrimitiveType mode, uint id)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, uint, void>)funcTable[2])(mode, id);
			#else
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, uint, void>)funcTable[2])(mode, id);
			#endif
		}

		public static void DrawTransformFeedbackNV(GLPrimitiveType mode, uint id)
		{
			DrawTransformFeedbackNVNative(mode, id);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GenTransformFeedbacksNVNative(int n, uint* ids)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[3])(n, ids);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[3])(n, (nint)ids);
			#endif
		}

		public static void GenTransformFeedbacksNV(int n, uint* ids)
		{
			GenTransformFeedbacksNVNative(n, ids);
		}

		public static uint GenTransformFeedbacksN()
		{
			uint result;
			GenTransformFeedbacksNVNative(1, &result);
			return result;
		}

		public static void GenTransformFeedbacksNV(int n, ref uint ids)
		{
			fixed (uint* pids0 = &ids)
			{
				GenTransformFeedbacksNVNative(n, pids0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsTransformFeedbackNVNative(uint id)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[4])(id);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[4])(id);
			#endif
		}

		public static bool IsTransformFeedbackNV(uint id)
		{
			byte ret = IsTransformFeedbackNVNative(id);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void PauseTransformFeedbackNVNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[5])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[5])();
			#endif
		}

		public static void PauseTransformFeedbackNV()
		{
			PauseTransformFeedbackNVNative();
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ResumeTransformFeedbackNVNative()
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<void>)funcTable[6])();
			#else
			((delegate* unmanaged[Cdecl]<void>)funcTable[6])();
			#endif
		}

		public static void ResumeTransformFeedbackNV()
		{
			ResumeTransformFeedbackNVNative();
		}

	}
}
