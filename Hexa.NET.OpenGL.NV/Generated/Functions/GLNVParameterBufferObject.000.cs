// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.NV
{
	public unsafe partial class GLNVParameterBufferObject
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void ProgramBufferParametersIivNVNative(GLProgramTarget target, uint bindingIndex, uint wordIndex, int count, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, uint, int, int*, void>)funcTable[0])(target, bindingIndex, wordIndex, count, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, uint, int, nint, void>)funcTable[0])(target, bindingIndex, wordIndex, count, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_parameter_buffer_object</remarks>
		public void ProgramBufferParametersIivNV(GLProgramTarget target, uint bindingIndex, uint wordIndex, int count, int* @params)
		{
			ProgramBufferParametersIivNVNative(target, bindingIndex, wordIndex, count, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_parameter_buffer_object</remarks>
		public void ProgramBufferParametersIivNV(GLProgramTarget target, uint bindingIndex, uint wordIndex, int count, Span<int> @params)
		{
			fixed (int* pparams0 = @params)
			{
				ProgramBufferParametersIivNVNative(target, bindingIndex, wordIndex, count, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_parameter_buffer_object</remarks>
		public void ProgramBufferParametersIivNV(GLProgramTarget target, uint bindingIndex, uint wordIndex, int count, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				ProgramBufferParametersIivNVNative(target, bindingIndex, wordIndex, count, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void ProgramBufferParametersIuivNVNative(GLProgramTarget target, uint bindingIndex, uint wordIndex, int count, uint* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, uint, int, uint*, void>)funcTable[1])(target, bindingIndex, wordIndex, count, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, uint, int, nint, void>)funcTable[1])(target, bindingIndex, wordIndex, count, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_parameter_buffer_object</remarks>
		public void ProgramBufferParametersIuivNV(GLProgramTarget target, uint bindingIndex, uint wordIndex, int count, uint* @params)
		{
			ProgramBufferParametersIuivNVNative(target, bindingIndex, wordIndex, count, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_parameter_buffer_object</remarks>
		public void ProgramBufferParametersIuivNV(GLProgramTarget target, uint bindingIndex, uint wordIndex, int count, Span<uint> @params)
		{
			fixed (uint* pparams0 = @params)
			{
				ProgramBufferParametersIuivNVNative(target, bindingIndex, wordIndex, count, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_parameter_buffer_object</remarks>
		public void ProgramBufferParametersIuivNV(GLProgramTarget target, uint bindingIndex, uint wordIndex, int count, ref uint @params)
		{
			fixed (uint* pparams0 = &@params)
			{
				ProgramBufferParametersIuivNVNative(target, bindingIndex, wordIndex, count, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void ProgramBufferParametersfvNVNative(GLProgramTarget target, uint bindingIndex, uint wordIndex, int count, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, uint, int, float*, void>)funcTable[2])(target, bindingIndex, wordIndex, count, @params);
			#else
			((delegate* unmanaged[Cdecl]<GLProgramTarget, uint, uint, int, nint, void>)funcTable[2])(target, bindingIndex, wordIndex, count, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_parameter_buffer_object</remarks>
		public void ProgramBufferParametersfvNV(GLProgramTarget target, uint bindingIndex, uint wordIndex, int count, float* @params)
		{
			ProgramBufferParametersfvNVNative(target, bindingIndex, wordIndex, count, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_parameter_buffer_object</remarks>
		public void ProgramBufferParametersfvNV(GLProgramTarget target, uint bindingIndex, uint wordIndex, int count, Span<float> @params)
		{
			fixed (float* pparams0 = @params)
			{
				ProgramBufferParametersfvNVNative(target, bindingIndex, wordIndex, count, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_parameter_buffer_object</remarks>
		public void ProgramBufferParametersfvNV(GLProgramTarget target, uint bindingIndex, uint wordIndex, int count, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				ProgramBufferParametersfvNVNative(target, bindingIndex, wordIndex, count, pparams0);
			}
		}

	}
}
