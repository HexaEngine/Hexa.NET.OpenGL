// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.NV
{
	public static unsafe partial class GLNVQueryResource
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static int QueryResourceNVNative(GLEnum queryType, int tagId, uint count, int* buffer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLEnum, int, uint, int*, int>)funcTable[0])(queryType, tagId, count, buffer);
			#else
			return (int)((delegate* unmanaged[Cdecl]<GLEnum, int, uint, nint, int>)funcTable[0])(queryType, tagId, count, (nint)buffer);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_query_resource</remarks>
		public static int QueryResourceNV(GLEnum queryType, int tagId, uint count, int* buffer)
		{
			int ret = QueryResourceNVNative(queryType, tagId, count, buffer);
			return ret;
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_query_resource</remarks>
		public static int QueryResourceNV(GLEnum queryType, int tagId, uint count, Span<int> buffer)
		{
			fixed (int* pbuffer0 = buffer)
			{
				int ret = QueryResourceNVNative(queryType, tagId, count, pbuffer0);
				return ret;
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_query_resource</remarks>
		public static int QueryResourceNV(GLEnum queryType, int tagId, uint count, ref int buffer)
		{
			fixed (int* pbuffer0 = &buffer)
			{
				int ret = QueryResourceNVNative(queryType, tagId, count, pbuffer0);
				return ret;
			}
		}

	}
}
