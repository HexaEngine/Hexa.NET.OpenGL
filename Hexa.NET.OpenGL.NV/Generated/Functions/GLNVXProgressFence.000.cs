// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.NV
{
	public static unsafe partial class GLNVXProgressFence
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ClientWaitSemaphoreui64NVXNative(int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, ulong*, void>)funcTable[0])(fenceObjectCount, semaphoreArray, fenceValueArray);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, nint, void>)funcTable[0])(fenceObjectCount, (nint)semaphoreArray, (nint)fenceValueArray);
			#endif
		}

		public static void ClientWaitSemaphoreui64NVX(int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray)
		{
			ClientWaitSemaphoreui64NVXNative(fenceObjectCount, semaphoreArray, fenceValueArray);
		}

		public static void ClientWaitSemaphoreui64NVX(int fenceObjectCount, ref uint semaphoreArray, ulong* fenceValueArray)
		{
			fixed (uint* psemaphoreArray0 = &semaphoreArray)
			{
				ClientWaitSemaphoreui64NVXNative(fenceObjectCount, psemaphoreArray0, fenceValueArray);
			}
		}

		public static void ClientWaitSemaphoreui64NVX(int fenceObjectCount, uint* semaphoreArray, ref ulong fenceValueArray)
		{
			fixed (ulong* pfenceValueArray0 = &fenceValueArray)
			{
				ClientWaitSemaphoreui64NVXNative(fenceObjectCount, semaphoreArray, pfenceValueArray0);
			}
		}

		public static void ClientWaitSemaphoreui64NVX(int fenceObjectCount, ref uint semaphoreArray, ref ulong fenceValueArray)
		{
			fixed (uint* psemaphoreArray0 = &semaphoreArray)
			{
				fixed (ulong* pfenceValueArray1 = &fenceValueArray)
				{
					ClientWaitSemaphoreui64NVXNative(fenceObjectCount, psemaphoreArray0, pfenceValueArray1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static uint CreateProgressFenceNVXNative()
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint>)funcTable[1])();
			#else
			return (uint)((delegate* unmanaged[Cdecl]<uint>)funcTable[1])();
			#endif
		}

		public static uint CreateProgressFenceNVX()
		{
			uint ret = CreateProgressFenceNVXNative();
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SignalSemaphoreui64NVXNative(uint signalGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint*, ulong*, void>)funcTable[2])(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, void>)funcTable[2])(signalGpu, fenceObjectCount, (nint)semaphoreArray, (nint)fenceValueArray);
			#endif
		}

		public static void SignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray)
		{
			SignalSemaphoreui64NVXNative(signalGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
		}

		public static void SignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, ref uint semaphoreArray, ulong* fenceValueArray)
		{
			fixed (uint* psemaphoreArray0 = &semaphoreArray)
			{
				SignalSemaphoreui64NVXNative(signalGpu, fenceObjectCount, psemaphoreArray0, fenceValueArray);
			}
		}

		public static void SignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, uint* semaphoreArray, ref ulong fenceValueArray)
		{
			fixed (ulong* pfenceValueArray0 = &fenceValueArray)
			{
				SignalSemaphoreui64NVXNative(signalGpu, fenceObjectCount, semaphoreArray, pfenceValueArray0);
			}
		}

		public static void SignalSemaphoreui64NVX(uint signalGpu, int fenceObjectCount, ref uint semaphoreArray, ref ulong fenceValueArray)
		{
			fixed (uint* psemaphoreArray0 = &semaphoreArray)
			{
				fixed (ulong* pfenceValueArray1 = &fenceValueArray)
				{
					SignalSemaphoreui64NVXNative(signalGpu, fenceObjectCount, psemaphoreArray0, pfenceValueArray1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WaitSemaphoreui64NVXNative(uint waitGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint*, ulong*, void>)funcTable[3])(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, void>)funcTable[3])(waitGpu, fenceObjectCount, (nint)semaphoreArray, (nint)fenceValueArray);
			#endif
		}

		public static void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray)
		{
			WaitSemaphoreui64NVXNative(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
		}

		public static void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, ref uint semaphoreArray, ulong* fenceValueArray)
		{
			fixed (uint* psemaphoreArray0 = &semaphoreArray)
			{
				WaitSemaphoreui64NVXNative(waitGpu, fenceObjectCount, psemaphoreArray0, fenceValueArray);
			}
		}

		public static void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, uint* semaphoreArray, ref ulong fenceValueArray)
		{
			fixed (ulong* pfenceValueArray0 = &fenceValueArray)
			{
				WaitSemaphoreui64NVXNative(waitGpu, fenceObjectCount, semaphoreArray, pfenceValueArray0);
			}
		}

		public static void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, ref uint semaphoreArray, ref ulong fenceValueArray)
		{
			fixed (uint* psemaphoreArray0 = &semaphoreArray)
			{
				fixed (ulong* pfenceValueArray1 = &fenceValueArray)
				{
					WaitSemaphoreui64NVXNative(waitGpu, fenceObjectCount, psemaphoreArray0, pfenceValueArray1);
				}
			}
		}

	}
}
