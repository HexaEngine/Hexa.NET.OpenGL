// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.NV
{
	public static unsafe partial class GLNVFragmentProgram
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetProgramNamedParameterdvNVNative(uint id, int len, byte* name, double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, byte*, double*, void>)funcTable[0])(id, len, name, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, void>)funcTable[0])(id, len, (nint)name, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterdvNV(uint id, int len, byte* name, double* @params)
		{
			GetProgramNamedParameterdvNVNative(id, len, name, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterdvNV(uint id, int len, string name, double* @params)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			GetProgramNamedParameterdvNVNative(id, len, pStr0, @params);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterdvNV(uint id, int len, Span<byte> name, double* @params)
		{
			fixed (byte* pname0 = name)
			{
				GetProgramNamedParameterdvNVNative(id, len, pname0, @params);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterdvNV(uint id, int len, ref byte name, double* @params)
		{
			fixed (byte* pname0 = &name)
			{
				GetProgramNamedParameterdvNVNative(id, len, pname0, @params);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterdvNV(uint id, int len, byte* name, Span<double> @params)
		{
			fixed (double* pparams0 = @params)
			{
				GetProgramNamedParameterdvNVNative(id, len, name, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterdvNV(uint id, int len, byte* name, ref double @params)
		{
			fixed (double* pparams0 = &@params)
			{
				GetProgramNamedParameterdvNVNative(id, len, name, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterdvNV(uint id, int len, Span<byte> name, Span<double> @params)
		{
			fixed (byte* pname0 = name)
			{
				fixed (double* pparams1 = @params)
				{
					GetProgramNamedParameterdvNVNative(id, len, pname0, pparams1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterdvNV(uint id, int len, ref byte name, ref double @params)
		{
			fixed (byte* pname0 = &name)
			{
				fixed (double* pparams1 = &@params)
				{
					GetProgramNamedParameterdvNVNative(id, len, pname0, pparams1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GetProgramNamedParameterfvNVNative(uint id, int len, byte* name, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, byte*, float*, void>)funcTable[1])(id, len, name, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, void>)funcTable[1])(id, len, (nint)name, (nint)@params);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterfvNV(uint id, int len, byte* name, float* @params)
		{
			GetProgramNamedParameterfvNVNative(id, len, name, @params);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterfvNV(uint id, int len, string name, float* @params)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			GetProgramNamedParameterfvNVNative(id, len, pStr0, @params);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterfvNV(uint id, int len, Span<byte> name, float* @params)
		{
			fixed (byte* pname0 = name)
			{
				GetProgramNamedParameterfvNVNative(id, len, pname0, @params);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterfvNV(uint id, int len, ref byte name, float* @params)
		{
			fixed (byte* pname0 = &name)
			{
				GetProgramNamedParameterfvNVNative(id, len, pname0, @params);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterfvNV(uint id, int len, byte* name, Span<float> @params)
		{
			fixed (float* pparams0 = @params)
			{
				GetProgramNamedParameterfvNVNative(id, len, name, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterfvNV(uint id, int len, byte* name, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				GetProgramNamedParameterfvNVNative(id, len, name, pparams0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterfvNV(uint id, int len, Span<byte> name, Span<float> @params)
		{
			fixed (byte* pname0 = name)
			{
				fixed (float* pparams1 = @params)
				{
					GetProgramNamedParameterfvNVNative(id, len, pname0, pparams1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void GetProgramNamedParameterfvNV(uint id, int len, ref byte name, ref float @params)
		{
			fixed (byte* pname0 = &name)
			{
				fixed (float* pparams1 = &@params)
				{
					GetProgramNamedParameterfvNVNative(id, len, pname0, pparams1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramNamedParameter4dNVNative(uint id, int len, byte* name, double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, byte*, double, double, double, double, void>)funcTable[2])(id, len, name, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, double, double, double, double, void>)funcTable[2])(id, len, (nint)name, x, y, z, w);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4dNV(uint id, int len, byte* name, double x, double y, double z, double w)
		{
			ProgramNamedParameter4dNVNative(id, len, name, x, y, z, w);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4dNV(uint id, int len, string name, double x, double y, double z, double w)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ProgramNamedParameter4dNVNative(id, len, pStr0, x, y, z, w);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4dNV(uint id, int len, Span<byte> name, double x, double y, double z, double w)
		{
			fixed (byte* pname0 = name)
			{
				ProgramNamedParameter4dNVNative(id, len, pname0, x, y, z, w);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4dNV(uint id, int len, ref byte name, double x, double y, double z, double w)
		{
			fixed (byte* pname0 = &name)
			{
				ProgramNamedParameter4dNVNative(id, len, pname0, x, y, z, w);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramNamedParameter4dvNVNative(uint id, int len, byte* name, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, byte*, double*, void>)funcTable[3])(id, len, name, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, void>)funcTable[3])(id, len, (nint)name, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4dvNV(uint id, int len, byte* name, double* v)
		{
			ProgramNamedParameter4dvNVNative(id, len, name, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4dvNV(uint id, int len, string name, double* v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ProgramNamedParameter4dvNVNative(id, len, pStr0, v);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4dvNV(uint id, int len, Span<byte> name, double* v)
		{
			fixed (byte* pname0 = name)
			{
				ProgramNamedParameter4dvNVNative(id, len, pname0, v);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4dvNV(uint id, int len, ref byte name, double* v)
		{
			fixed (byte* pname0 = &name)
			{
				ProgramNamedParameter4dvNVNative(id, len, pname0, v);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4dvNV(uint id, int len, byte* name, Span<double> v)
		{
			fixed (double* pv0 = v)
			{
				ProgramNamedParameter4dvNVNative(id, len, name, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4dvNV(uint id, int len, byte* name, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				ProgramNamedParameter4dvNVNative(id, len, name, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4dvNV(uint id, int len, Span<byte> name, Span<double> v)
		{
			fixed (byte* pname0 = name)
			{
				fixed (double* pv1 = v)
				{
					ProgramNamedParameter4dvNVNative(id, len, pname0, pv1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4dvNV(uint id, int len, ref byte name, ref double v)
		{
			fixed (byte* pname0 = &name)
			{
				fixed (double* pv1 = &v)
				{
					ProgramNamedParameter4dvNVNative(id, len, pname0, pv1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramNamedParameter4fNVNative(uint id, int len, byte* name, float x, float y, float z, float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, byte*, float, float, float, float, void>)funcTable[4])(id, len, name, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, float, float, float, float, void>)funcTable[4])(id, len, (nint)name, x, y, z, w);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4fNV(uint id, int len, byte* name, float x, float y, float z, float w)
		{
			ProgramNamedParameter4fNVNative(id, len, name, x, y, z, w);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4fNV(uint id, int len, string name, float x, float y, float z, float w)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ProgramNamedParameter4fNVNative(id, len, pStr0, x, y, z, w);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4fNV(uint id, int len, Span<byte> name, float x, float y, float z, float w)
		{
			fixed (byte* pname0 = name)
			{
				ProgramNamedParameter4fNVNative(id, len, pname0, x, y, z, w);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4fNV(uint id, int len, ref byte name, float x, float y, float z, float w)
		{
			fixed (byte* pname0 = &name)
			{
				ProgramNamedParameter4fNVNative(id, len, pname0, x, y, z, w);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ProgramNamedParameter4fvNVNative(uint id, int len, byte* name, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, byte*, float*, void>)funcTable[5])(id, len, name, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, void>)funcTable[5])(id, len, (nint)name, (nint)v);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4fvNV(uint id, int len, byte* name, float* v)
		{
			ProgramNamedParameter4fvNVNative(id, len, name, v);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4fvNV(uint id, int len, string name, float* v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			ProgramNamedParameter4fvNVNative(id, len, pStr0, v);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4fvNV(uint id, int len, Span<byte> name, float* v)
		{
			fixed (byte* pname0 = name)
			{
				ProgramNamedParameter4fvNVNative(id, len, pname0, v);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4fvNV(uint id, int len, ref byte name, float* v)
		{
			fixed (byte* pname0 = &name)
			{
				ProgramNamedParameter4fvNVNative(id, len, pname0, v);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4fvNV(uint id, int len, byte* name, Span<float> v)
		{
			fixed (float* pv0 = v)
			{
				ProgramNamedParameter4fvNVNative(id, len, name, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4fvNV(uint id, int len, byte* name, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				ProgramNamedParameter4fvNVNative(id, len, name, pv0);
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4fvNV(uint id, int len, Span<byte> name, Span<float> v)
		{
			fixed (byte* pname0 = name)
			{
				fixed (float* pv1 = v)
				{
					ProgramNamedParameter4fvNVNative(id, len, pname0, pv1);
				}
			}
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_NV_fragment_program</remarks>
		public static void ProgramNamedParameter4fvNV(uint id, int len, ref byte name, ref float v)
		{
			fixed (byte* pname0 = &name)
			{
				fixed (float* pv1 = &v)
				{
					ProgramNamedParameter4fvNVNative(id, len, pname0, pv1);
				}
			}
		}

	}
}
