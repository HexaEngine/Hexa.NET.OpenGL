// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.NV
{
	public static unsafe partial class GLNv
	{

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VDPAUSurfaceAccessNVNative(GLvdpauSurfaceNV surface, GLEnum access)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLvdpauSurfaceNV, GLEnum, void>)funcTable[432])(surface, access);
			#else
			((delegate* unmanaged[Cdecl]<GLvdpauSurfaceNV, GLEnum, void>)funcTable[432])(surface, access);
			#endif
		}

		public static void VDPAUSurfaceAccessNV(GLvdpauSurfaceNV surface, GLEnum access)
		{
			VDPAUSurfaceAccessNVNative(surface, access);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VDPAUUnmapSurfacesNVNative(int numSurface, GLvdpauSurfaceNV* surfaces)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, GLvdpauSurfaceNV*, void>)funcTable[433])(numSurface, surfaces);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[433])(numSurface, (nint)surfaces);
			#endif
		}

		public static void VDPAUUnmapSurfacesNV(int numSurface, GLvdpauSurfaceNV* surfaces)
		{
			VDPAUUnmapSurfacesNVNative(numSurface, surfaces);
		}

		public static void VDPAUUnmapSurfacesNV(int numSurface, ref GLvdpauSurfaceNV surfaces)
		{
			fixed (GLvdpauSurfaceNV* psurfaces0 = &surfaces)
			{
				VDPAUUnmapSurfacesNVNative(numSurface, psurfaces0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VDPAUUnregisterSurfaceNVNative(GLvdpauSurfaceNV surface)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLvdpauSurfaceNV, void>)funcTable[434])(surface);
			#else
			((delegate* unmanaged[Cdecl]<GLvdpauSurfaceNV, void>)funcTable[434])(surface);
			#endif
		}

		public static void VDPAUUnregisterSurfaceNV(GLvdpauSurfaceNV surface)
		{
			VDPAUUnregisterSurfaceNVNative(surface);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex2hNVNative(Half x, Half y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Half, Half, void>)funcTable[435])(x, y);
			#else
			((delegate* unmanaged[Cdecl]<Half, Half, void>)funcTable[435])(x, y);
			#endif
		}

		public static void Vertex2hNV(Half x, Half y)
		{
			Vertex2hNVNative(x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex2hvNVNative(Half* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Half*, void>)funcTable[436])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[436])((nint)v);
			#endif
		}

		public static void Vertex2hvNV(Half* v)
		{
			Vertex2hvNVNative(v);
		}

		public static void Vertex2hvNV(ref Half v)
		{
			fixed (Half* pv0 = &v)
			{
				Vertex2hvNVNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex3hNVNative(Half x, Half y, Half z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Half, Half, Half, void>)funcTable[437])(x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<Half, Half, Half, void>)funcTable[437])(x, y, z);
			#endif
		}

		public static void Vertex3hNV(Half x, Half y, Half z)
		{
			Vertex3hNVNative(x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex3hvNVNative(Half* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Half*, void>)funcTable[438])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[438])((nint)v);
			#endif
		}

		public static void Vertex3hvNV(Half* v)
		{
			Vertex3hvNVNative(v);
		}

		public static void Vertex3hvNV(ref Half v)
		{
			fixed (Half* pv0 = &v)
			{
				Vertex3hvNVNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex4hNVNative(Half x, Half y, Half z, Half w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Half, Half, Half, Half, void>)funcTable[439])(x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<Half, Half, Half, Half, void>)funcTable[439])(x, y, z, w);
			#endif
		}

		public static void Vertex4hNV(Half x, Half y, Half z, Half w)
		{
			Vertex4hNVNative(x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void Vertex4hvNVNative(Half* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Half*, void>)funcTable[440])(v);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[440])((nint)v);
			#endif
		}

		public static void Vertex4hvNV(Half* v)
		{
			Vertex4hvNVNative(v);
		}

		public static void Vertex4hvNV(ref Half v)
		{
			fixed (Half* pv0 = &v)
			{
				Vertex4hvNVNative(pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexArrayRangeNVNative(int length, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void*, void>)funcTable[441])(length, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[441])(length, (nint)pointer);
			#endif
		}

		public static void VertexArrayRangeNV(int length, void* pointer)
		{
			VertexArrayRangeNVNative(length, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1dNVNative(uint index, double x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[442])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, void>)funcTable[442])(index, x);
			#endif
		}

		public static void VertexAttrib1dNV(uint index, double x)
		{
			VertexAttrib1dNVNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1dvNVNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[443])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[443])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib1dvNV(uint index, double* v)
		{
			VertexAttrib1dvNVNative(index, v);
		}

		public static void VertexAttrib1dvNV(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib1dvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1fNVNative(uint index, float x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[444])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, void>)funcTable[444])(index, x);
			#endif
		}

		public static void VertexAttrib1fNV(uint index, float x)
		{
			VertexAttrib1fNVNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1fvNVNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[445])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[445])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib1fvNV(uint index, float* v)
		{
			VertexAttrib1fvNVNative(index, v);
		}

		public static void VertexAttrib1fvNV(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib1fvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1hNVNative(uint index, Half x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, Half, void>)funcTable[446])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, Half, void>)funcTable[446])(index, x);
			#endif
		}

		public static void VertexAttrib1hNV(uint index, Half x)
		{
			VertexAttrib1hNVNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1hvNVNative(uint index, Half* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, Half*, void>)funcTable[447])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[447])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib1hvNV(uint index, Half* v)
		{
			VertexAttrib1hvNVNative(index, v);
		}

		public static void VertexAttrib1hvNV(uint index, ref Half v)
		{
			fixed (Half* pv0 = &v)
			{
				VertexAttrib1hvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1sNVNative(uint index, short x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[448])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, void>)funcTable[448])(index, x);
			#endif
		}

		public static void VertexAttrib1sNV(uint index, short x)
		{
			VertexAttrib1sNVNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib1svNVNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[449])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[449])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib1svNV(uint index, short* v)
		{
			VertexAttrib1svNVNative(index, v);
		}

		public static void VertexAttrib1svNV(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib1svNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2dNVNative(uint index, double x, double y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[450])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, void>)funcTable[450])(index, x, y);
			#endif
		}

		public static void VertexAttrib2dNV(uint index, double x, double y)
		{
			VertexAttrib2dNVNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2dvNVNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[451])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[451])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib2dvNV(uint index, double* v)
		{
			VertexAttrib2dvNVNative(index, v);
		}

		public static void VertexAttrib2dvNV(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib2dvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2fNVNative(uint index, float x, float y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[452])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[452])(index, x, y);
			#endif
		}

		public static void VertexAttrib2fNV(uint index, float x, float y)
		{
			VertexAttrib2fNVNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2fvNVNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[453])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[453])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib2fvNV(uint index, float* v)
		{
			VertexAttrib2fvNVNative(index, v);
		}

		public static void VertexAttrib2fvNV(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib2fvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2hNVNative(uint index, Half x, Half y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, Half, Half, void>)funcTable[454])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, Half, Half, void>)funcTable[454])(index, x, y);
			#endif
		}

		public static void VertexAttrib2hNV(uint index, Half x, Half y)
		{
			VertexAttrib2hNVNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2hvNVNative(uint index, Half* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, Half*, void>)funcTable[455])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[455])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib2hvNV(uint index, Half* v)
		{
			VertexAttrib2hvNVNative(index, v);
		}

		public static void VertexAttrib2hvNV(uint index, ref Half v)
		{
			fixed (Half* pv0 = &v)
			{
				VertexAttrib2hvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2sNVNative(uint index, short x, short y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[456])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, void>)funcTable[456])(index, x, y);
			#endif
		}

		public static void VertexAttrib2sNV(uint index, short x, short y)
		{
			VertexAttrib2sNVNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib2svNVNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[457])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[457])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib2svNV(uint index, short* v)
		{
			VertexAttrib2svNVNative(index, v);
		}

		public static void VertexAttrib2svNV(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib2svNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3dNVNative(uint index, double x, double y, double z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[458])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, void>)funcTable[458])(index, x, y, z);
			#endif
		}

		public static void VertexAttrib3dNV(uint index, double x, double y, double z)
		{
			VertexAttrib3dNVNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3dvNVNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[459])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[459])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib3dvNV(uint index, double* v)
		{
			VertexAttrib3dvNVNative(index, v);
		}

		public static void VertexAttrib3dvNV(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib3dvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3fNVNative(uint index, float x, float y, float z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[460])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, void>)funcTable[460])(index, x, y, z);
			#endif
		}

		public static void VertexAttrib3fNV(uint index, float x, float y, float z)
		{
			VertexAttrib3fNVNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3fvNVNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[461])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[461])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib3fvNV(uint index, float* v)
		{
			VertexAttrib3fvNVNative(index, v);
		}

		public static void VertexAttrib3fvNV(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib3fvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3hNVNative(uint index, Half x, Half y, Half z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, Half, Half, Half, void>)funcTable[462])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, Half, Half, Half, void>)funcTable[462])(index, x, y, z);
			#endif
		}

		public static void VertexAttrib3hNV(uint index, Half x, Half y, Half z)
		{
			VertexAttrib3hNVNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3hvNVNative(uint index, Half* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, Half*, void>)funcTable[463])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[463])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib3hvNV(uint index, Half* v)
		{
			VertexAttrib3hvNVNative(index, v);
		}

		public static void VertexAttrib3hvNV(uint index, ref Half v)
		{
			fixed (Half* pv0 = &v)
			{
				VertexAttrib3hvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3sNVNative(uint index, short x, short y, short z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[464])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, short, void>)funcTable[464])(index, x, y, z);
			#endif
		}

		public static void VertexAttrib3sNV(uint index, short x, short y, short z)
		{
			VertexAttrib3sNVNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib3svNVNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[465])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[465])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib3svNV(uint index, short* v)
		{
			VertexAttrib3svNVNative(index, v);
		}

		public static void VertexAttrib3svNV(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib3svNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4dNVNative(uint index, double x, double y, double z, double w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[466])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, double, double, double, double, void>)funcTable[466])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4dNV(uint index, double x, double y, double z, double w)
		{
			VertexAttrib4dNVNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4dvNVNative(uint index, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, double*, void>)funcTable[467])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[467])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4dvNV(uint index, double* v)
		{
			VertexAttrib4dvNVNative(index, v);
		}

		public static void VertexAttrib4dvNV(uint index, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttrib4dvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4fNVNative(uint index, float x, float y, float z, float w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[468])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, float, float, void>)funcTable[468])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4fNV(uint index, float x, float y, float z, float w)
		{
			VertexAttrib4fNVNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4fvNVNative(uint index, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float*, void>)funcTable[469])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[469])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4fvNV(uint index, float* v)
		{
			VertexAttrib4fvNVNative(index, v);
		}

		public static void VertexAttrib4fvNV(uint index, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttrib4fvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4hNVNative(uint index, Half x, Half y, Half z, Half w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, Half, Half, Half, Half, void>)funcTable[470])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, Half, Half, Half, Half, void>)funcTable[470])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4hNV(uint index, Half x, Half y, Half z, Half w)
		{
			VertexAttrib4hNVNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4hvNVNative(uint index, Half* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, Half*, void>)funcTable[471])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[471])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4hvNV(uint index, Half* v)
		{
			VertexAttrib4hvNVNative(index, v);
		}

		public static void VertexAttrib4hvNV(uint index, ref Half v)
		{
			fixed (Half* pv0 = &v)
			{
				VertexAttrib4hvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4sNVNative(uint index, short x, short y, short z, short w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[472])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, short, short, short, short, void>)funcTable[472])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4sNV(uint index, short x, short y, short z, short w)
		{
			VertexAttrib4sNVNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4svNVNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[473])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[473])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4svNV(uint index, short* v)
		{
			VertexAttrib4svNVNative(index, v);
		}

		public static void VertexAttrib4svNV(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttrib4svNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4ubNVNative(uint index, byte x, byte y, byte z, byte w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)funcTable[474])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, byte, byte, byte, byte, void>)funcTable[474])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttrib4ubNV(uint index, byte x, byte y, byte z, byte w)
		{
			VertexAttrib4ubNVNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttrib4ubvNVNative(uint index, byte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte*, void>)funcTable[475])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[475])(index, (nint)v);
			#endif
		}

		public static void VertexAttrib4ubvNV(uint index, byte* v)
		{
			VertexAttrib4ubvNVNative(index, v);
		}

		public static void VertexAttrib4ubvNV(uint index, string v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (v != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(v);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(v, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VertexAttrib4ubvNVNative(index, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void VertexAttrib4ubvNV(uint index, ReadOnlySpan<byte> v)
		{
			fixed (byte* pv0 = v)
			{
				VertexAttrib4ubvNVNative(index, pv0);
			}
		}

		public static void VertexAttrib4ubvNV(uint index, ref byte v)
		{
			fixed (byte* pv0 = &v)
			{
				VertexAttrib4ubvNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribFormatNVNative(uint index, int size, GLVertexAttribType type, byte normalized, int stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribType, byte, int, void>)funcTable[476])(index, size, type, normalized, stride);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribType, byte, int, void>)funcTable[476])(index, size, type, normalized, stride);
			#endif
		}

		public static void VertexAttribFormatNV(uint index, int size, GLVertexAttribType type, byte normalized, int stride)
		{
			VertexAttribFormatNVNative(index, size, type, normalized, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI1iEXTNative(uint index, int x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[477])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, void>)funcTable[477])(index, x);
			#endif
		}

		public static void VertexAttribI1iEXT(uint index, int x)
		{
			VertexAttribI1iEXTNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI1ivEXTNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[478])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[478])(index, (nint)v);
			#endif
		}

		public static void VertexAttribI1ivEXT(uint index, int* v)
		{
			VertexAttribI1ivEXTNative(index, v);
		}

		public static void VertexAttribI1ivEXT(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				VertexAttribI1ivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI1uiEXTNative(uint index, uint x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[479])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, void>)funcTable[479])(index, x);
			#endif
		}

		public static void VertexAttribI1uiEXT(uint index, uint x)
		{
			VertexAttribI1uiEXTNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI1uivEXTNative(uint index, uint* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[480])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[480])(index, (nint)v);
			#endif
		}

		public static void VertexAttribI1uivEXT(uint index, uint* v)
		{
			VertexAttribI1uivEXTNative(index, v);
		}

		public static void VertexAttribI1uivEXT(uint index, ref uint v)
		{
			fixed (uint* pv0 = &v)
			{
				VertexAttribI1uivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI2iEXTNative(uint index, int x, int y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[481])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, void>)funcTable[481])(index, x, y);
			#endif
		}

		public static void VertexAttribI2iEXT(uint index, int x, int y)
		{
			VertexAttribI2iEXTNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI2ivEXTNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[482])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[482])(index, (nint)v);
			#endif
		}

		public static void VertexAttribI2ivEXT(uint index, int* v)
		{
			VertexAttribI2ivEXTNative(index, v);
		}

		public static void VertexAttribI2ivEXT(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				VertexAttribI2ivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI2uiEXTNative(uint index, uint x, uint y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[483])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, void>)funcTable[483])(index, x, y);
			#endif
		}

		public static void VertexAttribI2uiEXT(uint index, uint x, uint y)
		{
			VertexAttribI2uiEXTNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI2uivEXTNative(uint index, uint* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[484])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[484])(index, (nint)v);
			#endif
		}

		public static void VertexAttribI2uivEXT(uint index, uint* v)
		{
			VertexAttribI2uivEXTNative(index, v);
		}

		public static void VertexAttribI2uivEXT(uint index, ref uint v)
		{
			fixed (uint* pv0 = &v)
			{
				VertexAttribI2uivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI3iEXTNative(uint index, int x, int y, int z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[485])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, void>)funcTable[485])(index, x, y, z);
			#endif
		}

		public static void VertexAttribI3iEXT(uint index, int x, int y, int z)
		{
			VertexAttribI3iEXTNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI3ivEXTNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[486])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[486])(index, (nint)v);
			#endif
		}

		public static void VertexAttribI3ivEXT(uint index, int* v)
		{
			VertexAttribI3ivEXTNative(index, v);
		}

		public static void VertexAttribI3ivEXT(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				VertexAttribI3ivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI3uiEXTNative(uint index, uint x, uint y, uint z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)funcTable[487])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, void>)funcTable[487])(index, x, y, z);
			#endif
		}

		public static void VertexAttribI3uiEXT(uint index, uint x, uint y, uint z)
		{
			VertexAttribI3uiEXTNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI3uivEXTNative(uint index, uint* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[488])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[488])(index, (nint)v);
			#endif
		}

		public static void VertexAttribI3uivEXT(uint index, uint* v)
		{
			VertexAttribI3uivEXTNative(index, v);
		}

		public static void VertexAttribI3uivEXT(uint index, ref uint v)
		{
			fixed (uint* pv0 = &v)
			{
				VertexAttribI3uivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4bvEXTNative(uint index, sbyte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, sbyte*, void>)funcTable[489])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[489])(index, (nint)v);
			#endif
		}

		public static void VertexAttribI4bvEXT(uint index, sbyte* v)
		{
			VertexAttribI4bvEXTNative(index, v);
		}

		public static void VertexAttribI4bvEXT(uint index, ref sbyte v)
		{
			fixed (sbyte* pv0 = &v)
			{
				VertexAttribI4bvEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4iEXTNative(uint index, int x, int y, int z, int w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[490])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, int, int, int, void>)funcTable[490])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttribI4iEXT(uint index, int x, int y, int z, int w)
		{
			VertexAttribI4iEXTNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4ivEXTNative(uint index, int* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int*, void>)funcTable[491])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[491])(index, (nint)v);
			#endif
		}

		public static void VertexAttribI4ivEXT(uint index, int* v)
		{
			VertexAttribI4ivEXTNative(index, v);
		}

		public static void VertexAttribI4ivEXT(uint index, ref int v)
		{
			fixed (int* pv0 = &v)
			{
				VertexAttribI4ivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4svEXTNative(uint index, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, short*, void>)funcTable[492])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[492])(index, (nint)v);
			#endif
		}

		public static void VertexAttribI4svEXT(uint index, short* v)
		{
			VertexAttribI4svEXTNative(index, v);
		}

		public static void VertexAttribI4svEXT(uint index, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttribI4svEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4ubvEXTNative(uint index, byte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, byte*, void>)funcTable[493])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[493])(index, (nint)v);
			#endif
		}

		public static void VertexAttribI4ubvEXT(uint index, byte* v)
		{
			VertexAttribI4ubvEXTNative(index, v);
		}

		public static void VertexAttribI4ubvEXT(uint index, string v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (v != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(v);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(v, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VertexAttribI4ubvEXTNative(index, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void VertexAttribI4ubvEXT(uint index, ReadOnlySpan<byte> v)
		{
			fixed (byte* pv0 = v)
			{
				VertexAttribI4ubvEXTNative(index, pv0);
			}
		}

		public static void VertexAttribI4ubvEXT(uint index, ref byte v)
		{
			fixed (byte* pv0 = &v)
			{
				VertexAttribI4ubvEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4uiEXTNative(uint index, uint x, uint y, uint z, uint w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)funcTable[494])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, uint, uint, uint, void>)funcTable[494])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttribI4uiEXT(uint index, uint x, uint y, uint z, uint w)
		{
			VertexAttribI4uiEXTNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4uivEXTNative(uint index, uint* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint*, void>)funcTable[495])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[495])(index, (nint)v);
			#endif
		}

		public static void VertexAttribI4uivEXT(uint index, uint* v)
		{
			VertexAttribI4uivEXTNative(index, v);
		}

		public static void VertexAttribI4uivEXT(uint index, ref uint v)
		{
			fixed (uint* pv0 = &v)
			{
				VertexAttribI4uivEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribI4usvEXTNative(uint index, ushort* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ushort*, void>)funcTable[496])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[496])(index, (nint)v);
			#endif
		}

		public static void VertexAttribI4usvEXT(uint index, ushort* v)
		{
			VertexAttribI4usvEXTNative(index, v);
		}

		public static void VertexAttribI4usvEXT(uint index, ref ushort v)
		{
			fixed (ushort* pv0 = &v)
			{
				VertexAttribI4usvEXTNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribIFormatNVNative(uint index, int size, GLVertexAttribIType type, int stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribIType, int, void>)funcTable[497])(index, size, type, stride);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribIType, int, void>)funcTable[497])(index, size, type, stride);
			#endif
		}

		public static void VertexAttribIFormatNV(uint index, int size, GLVertexAttribIType type, int stride)
		{
			VertexAttribIFormatNVNative(index, size, type, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribIPointerEXTNative(uint index, int size, GLVertexAttribIType type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribIType, int, void*, void>)funcTable[498])(index, size, type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribIType, int, nint, void>)funcTable[498])(index, size, type, stride, (nint)pointer);
			#endif
		}

		public static void VertexAttribIPointerEXT(uint index, int size, GLVertexAttribIType type, int stride, void* pointer)
		{
			VertexAttribIPointerEXTNative(index, size, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL1i64NVNative(uint index, long x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, long, void>)funcTable[499])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, long, void>)funcTable[499])(index, x);
			#endif
		}

		public static void VertexAttribL1i64NV(uint index, long x)
		{
			VertexAttribL1i64NVNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL1i64vNVNative(uint index, long* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, long*, void>)funcTable[500])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[500])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL1i64vNV(uint index, long* v)
		{
			VertexAttribL1i64vNVNative(index, v);
		}

		public static void VertexAttribL1i64vNV(uint index, ref long v)
		{
			fixed (long* pv0 = &v)
			{
				VertexAttribL1i64vNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL1ui64NVNative(uint index, ulong x)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong, void>)funcTable[501])(index, x);
			#else
			((delegate* unmanaged[Cdecl]<uint, ulong, void>)funcTable[501])(index, x);
			#endif
		}

		public static void VertexAttribL1ui64NV(uint index, ulong x)
		{
			VertexAttribL1ui64NVNative(index, x);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL1ui64vNVNative(uint index, ulong* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong*, void>)funcTable[502])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[502])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL1ui64vNV(uint index, ulong* v)
		{
			VertexAttribL1ui64vNVNative(index, v);
		}

		public static void VertexAttribL1ui64vNV(uint index, ref ulong v)
		{
			fixed (ulong* pv0 = &v)
			{
				VertexAttribL1ui64vNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL2i64NVNative(uint index, long x, long y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, long, long, void>)funcTable[503])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, long, long, void>)funcTable[503])(index, x, y);
			#endif
		}

		public static void VertexAttribL2i64NV(uint index, long x, long y)
		{
			VertexAttribL2i64NVNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL2i64vNVNative(uint index, long* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, long*, void>)funcTable[504])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[504])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL2i64vNV(uint index, long* v)
		{
			VertexAttribL2i64vNVNative(index, v);
		}

		public static void VertexAttribL2i64vNV(uint index, ref long v)
		{
			fixed (long* pv0 = &v)
			{
				VertexAttribL2i64vNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL2ui64NVNative(uint index, ulong x, ulong y)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong, ulong, void>)funcTable[505])(index, x, y);
			#else
			((delegate* unmanaged[Cdecl]<uint, ulong, ulong, void>)funcTable[505])(index, x, y);
			#endif
		}

		public static void VertexAttribL2ui64NV(uint index, ulong x, ulong y)
		{
			VertexAttribL2ui64NVNative(index, x, y);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL2ui64vNVNative(uint index, ulong* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong*, void>)funcTable[506])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[506])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL2ui64vNV(uint index, ulong* v)
		{
			VertexAttribL2ui64vNVNative(index, v);
		}

		public static void VertexAttribL2ui64vNV(uint index, ref ulong v)
		{
			fixed (ulong* pv0 = &v)
			{
				VertexAttribL2ui64vNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL3i64NVNative(uint index, long x, long y, long z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, long, long, long, void>)funcTable[507])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, long, long, long, void>)funcTable[507])(index, x, y, z);
			#endif
		}

		public static void VertexAttribL3i64NV(uint index, long x, long y, long z)
		{
			VertexAttribL3i64NVNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL3i64vNVNative(uint index, long* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, long*, void>)funcTable[508])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[508])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL3i64vNV(uint index, long* v)
		{
			VertexAttribL3i64vNVNative(index, v);
		}

		public static void VertexAttribL3i64vNV(uint index, ref long v)
		{
			fixed (long* pv0 = &v)
			{
				VertexAttribL3i64vNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL3ui64NVNative(uint index, ulong x, ulong y, ulong z)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong, ulong, ulong, void>)funcTable[509])(index, x, y, z);
			#else
			((delegate* unmanaged[Cdecl]<uint, ulong, ulong, ulong, void>)funcTable[509])(index, x, y, z);
			#endif
		}

		public static void VertexAttribL3ui64NV(uint index, ulong x, ulong y, ulong z)
		{
			VertexAttribL3ui64NVNative(index, x, y, z);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL3ui64vNVNative(uint index, ulong* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong*, void>)funcTable[510])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[510])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL3ui64vNV(uint index, ulong* v)
		{
			VertexAttribL3ui64vNVNative(index, v);
		}

		public static void VertexAttribL3ui64vNV(uint index, ref ulong v)
		{
			fixed (ulong* pv0 = &v)
			{
				VertexAttribL3ui64vNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL4i64NVNative(uint index, long x, long y, long z, long w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, long, long, long, long, void>)funcTable[511])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, long, long, long, long, void>)funcTable[511])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttribL4i64NV(uint index, long x, long y, long z, long w)
		{
			VertexAttribL4i64NVNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL4i64vNVNative(uint index, long* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, long*, void>)funcTable[512])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[512])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL4i64vNV(uint index, long* v)
		{
			VertexAttribL4i64vNVNative(index, v);
		}

		public static void VertexAttribL4i64vNV(uint index, ref long v)
		{
			fixed (long* pv0 = &v)
			{
				VertexAttribL4i64vNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL4ui64NVNative(uint index, ulong x, ulong y, ulong z, ulong w)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong, ulong, ulong, ulong, void>)funcTable[513])(index, x, y, z, w);
			#else
			((delegate* unmanaged[Cdecl]<uint, ulong, ulong, ulong, ulong, void>)funcTable[513])(index, x, y, z, w);
			#endif
		}

		public static void VertexAttribL4ui64NV(uint index, ulong x, ulong y, ulong z, ulong w)
		{
			VertexAttribL4ui64NVNative(index, x, y, z, w);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribL4ui64vNVNative(uint index, ulong* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, ulong*, void>)funcTable[514])(index, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, nint, void>)funcTable[514])(index, (nint)v);
			#endif
		}

		public static void VertexAttribL4ui64vNV(uint index, ulong* v)
		{
			VertexAttribL4ui64vNVNative(index, v);
		}

		public static void VertexAttribL4ui64vNV(uint index, ref ulong v)
		{
			fixed (ulong* pv0 = &v)
			{
				VertexAttribL4ui64vNVNative(index, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribLFormatNVNative(uint index, int size, GLVertexAttribLType type, int stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribLType, int, void>)funcTable[515])(index, size, type, stride);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribLType, int, void>)funcTable[515])(index, size, type, stride);
			#endif
		}

		public static void VertexAttribLFormatNV(uint index, int size, GLVertexAttribLType type, int stride)
		{
			VertexAttribLFormatNVNative(index, size, type, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribPointerNVNative(uint index, int fsize, GLVertexAttribEnumNV type, int stride, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribEnumNV, int, void*, void>)funcTable[516])(index, fsize, type, stride, pointer);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, GLVertexAttribEnumNV, int, nint, void>)funcTable[516])(index, fsize, type, stride, (nint)pointer);
			#endif
		}

		public static void VertexAttribPointerNV(uint index, int fsize, GLVertexAttribEnumNV type, int stride, void* pointer)
		{
			VertexAttribPointerNVNative(index, fsize, type, stride, pointer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs1dvNVNative(uint index, int count, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double*, void>)funcTable[517])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[517])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs1dvNV(uint index, int count, double* v)
		{
			VertexAttribs1dvNVNative(index, count, v);
		}

		public static void VertexAttribs1dvNV(uint index, int count, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribs1dvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs1fvNVNative(uint index, int count, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[518])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[518])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs1fvNV(uint index, int count, float* v)
		{
			VertexAttribs1fvNVNative(index, count, v);
		}

		public static void VertexAttribs1fvNV(uint index, int count, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttribs1fvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs1hvNVNative(uint index, int n, Half* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, Half*, void>)funcTable[519])(index, n, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[519])(index, n, (nint)v);
			#endif
		}

		public static void VertexAttribs1hvNV(uint index, int n, Half* v)
		{
			VertexAttribs1hvNVNative(index, n, v);
		}

		public static void VertexAttribs1hvNV(uint index, int n, ref Half v)
		{
			fixed (Half* pv0 = &v)
			{
				VertexAttribs1hvNVNative(index, n, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs1svNVNative(uint index, int count, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, short*, void>)funcTable[520])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[520])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs1svNV(uint index, int count, short* v)
		{
			VertexAttribs1svNVNative(index, count, v);
		}

		public static void VertexAttribs1svNV(uint index, int count, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttribs1svNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs2dvNVNative(uint index, int count, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double*, void>)funcTable[521])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[521])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs2dvNV(uint index, int count, double* v)
		{
			VertexAttribs2dvNVNative(index, count, v);
		}

		public static void VertexAttribs2dvNV(uint index, int count, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribs2dvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs2fvNVNative(uint index, int count, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[522])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[522])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs2fvNV(uint index, int count, float* v)
		{
			VertexAttribs2fvNVNative(index, count, v);
		}

		public static void VertexAttribs2fvNV(uint index, int count, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttribs2fvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs2hvNVNative(uint index, int n, Half* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, Half*, void>)funcTable[523])(index, n, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[523])(index, n, (nint)v);
			#endif
		}

		public static void VertexAttribs2hvNV(uint index, int n, Half* v)
		{
			VertexAttribs2hvNVNative(index, n, v);
		}

		public static void VertexAttribs2hvNV(uint index, int n, ref Half v)
		{
			fixed (Half* pv0 = &v)
			{
				VertexAttribs2hvNVNative(index, n, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs2svNVNative(uint index, int count, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, short*, void>)funcTable[524])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[524])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs2svNV(uint index, int count, short* v)
		{
			VertexAttribs2svNVNative(index, count, v);
		}

		public static void VertexAttribs2svNV(uint index, int count, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttribs2svNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs3dvNVNative(uint index, int count, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double*, void>)funcTable[525])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[525])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs3dvNV(uint index, int count, double* v)
		{
			VertexAttribs3dvNVNative(index, count, v);
		}

		public static void VertexAttribs3dvNV(uint index, int count, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribs3dvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs3fvNVNative(uint index, int count, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[526])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[526])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs3fvNV(uint index, int count, float* v)
		{
			VertexAttribs3fvNVNative(index, count, v);
		}

		public static void VertexAttribs3fvNV(uint index, int count, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttribs3fvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs3hvNVNative(uint index, int n, Half* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, Half*, void>)funcTable[527])(index, n, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[527])(index, n, (nint)v);
			#endif
		}

		public static void VertexAttribs3hvNV(uint index, int n, Half* v)
		{
			VertexAttribs3hvNVNative(index, n, v);
		}

		public static void VertexAttribs3hvNV(uint index, int n, ref Half v)
		{
			fixed (Half* pv0 = &v)
			{
				VertexAttribs3hvNVNative(index, n, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs3svNVNative(uint index, int count, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, short*, void>)funcTable[528])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[528])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs3svNV(uint index, int count, short* v)
		{
			VertexAttribs3svNVNative(index, count, v);
		}

		public static void VertexAttribs3svNV(uint index, int count, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttribs3svNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs4dvNVNative(uint index, int count, double* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, double*, void>)funcTable[529])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[529])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs4dvNV(uint index, int count, double* v)
		{
			VertexAttribs4dvNVNative(index, count, v);
		}

		public static void VertexAttribs4dvNV(uint index, int count, ref double v)
		{
			fixed (double* pv0 = &v)
			{
				VertexAttribs4dvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs4fvNVNative(uint index, int count, float* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, float*, void>)funcTable[530])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[530])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs4fvNV(uint index, int count, float* v)
		{
			VertexAttribs4fvNVNative(index, count, v);
		}

		public static void VertexAttribs4fvNV(uint index, int count, ref float v)
		{
			fixed (float* pv0 = &v)
			{
				VertexAttribs4fvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs4hvNVNative(uint index, int n, Half* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, Half*, void>)funcTable[531])(index, n, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[531])(index, n, (nint)v);
			#endif
		}

		public static void VertexAttribs4hvNV(uint index, int n, Half* v)
		{
			VertexAttribs4hvNVNative(index, n, v);
		}

		public static void VertexAttribs4hvNV(uint index, int n, ref Half v)
		{
			fixed (Half* pv0 = &v)
			{
				VertexAttribs4hvNVNative(index, n, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs4svNVNative(uint index, int count, short* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, short*, void>)funcTable[532])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[532])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs4svNV(uint index, int count, short* v)
		{
			VertexAttribs4svNVNative(index, count, v);
		}

		public static void VertexAttribs4svNV(uint index, int count, ref short v)
		{
			fixed (short* pv0 = &v)
			{
				VertexAttribs4svNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexAttribs4ubvNVNative(uint index, int count, byte* v)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, byte*, void>)funcTable[533])(index, count, v);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, void>)funcTable[533])(index, count, (nint)v);
			#endif
		}

		public static void VertexAttribs4ubvNV(uint index, int count, byte* v)
		{
			VertexAttribs4ubvNVNative(index, count, v);
		}

		public static void VertexAttribs4ubvNV(uint index, int count, string v)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (v != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(v);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(v, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			VertexAttribs4ubvNVNative(index, count, pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
		}

		public static void VertexAttribs4ubvNV(uint index, int count, ReadOnlySpan<byte> v)
		{
			fixed (byte* pv0 = v)
			{
				VertexAttribs4ubvNVNative(index, count, pv0);
			}
		}

		public static void VertexAttribs4ubvNV(uint index, int count, ref byte v)
		{
			fixed (byte* pv0 = &v)
			{
				VertexAttribs4ubvNVNative(index, count, pv0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexFormatNVNative(int size, GLVertexPointerType type, int stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, GLVertexPointerType, int, void>)funcTable[534])(size, type, stride);
			#else
			((delegate* unmanaged[Cdecl]<int, GLVertexPointerType, int, void>)funcTable[534])(size, type, stride);
			#endif
		}

		public static void VertexFormatNV(int size, GLVertexPointerType type, int stride)
		{
			VertexFormatNVNative(size, type, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexWeighthNVNative(Half weight)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Half, void>)funcTable[535])(weight);
			#else
			((delegate* unmanaged[Cdecl]<Half, void>)funcTable[535])(weight);
			#endif
		}

		public static void VertexWeighthNV(Half weight)
		{
			VertexWeighthNVNative(weight);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VertexWeighthvNVNative(Half* weight)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<Half*, void>)funcTable[536])(weight);
			#else
			((delegate* unmanaged[Cdecl]<nint, void>)funcTable[536])((nint)weight);
			#endif
		}

		public static void VertexWeighthvNV(Half* weight)
		{
			VertexWeighthvNVNative(weight);
		}

		public static void VertexWeighthvNV(ref Half weight)
		{
			fixed (Half* pweight0 = &weight)
			{
				VertexWeighthvNVNative(pweight0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static GLEnum VideoCaptureNVNative(uint videoCaptureSlot, uint* sequenceNum, ulong* captureTime)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, uint*, ulong*, GLEnum>)funcTable[537])(videoCaptureSlot, sequenceNum, captureTime);
			#else
			return (GLEnum)((delegate* unmanaged[Cdecl]<uint, nint, nint, GLEnum>)funcTable[537])(videoCaptureSlot, (nint)sequenceNum, (nint)captureTime);
			#endif
		}

		public static GLEnum VideoCaptureNV(uint videoCaptureSlot, uint* sequenceNum, ulong* captureTime)
		{
			GLEnum ret = VideoCaptureNVNative(videoCaptureSlot, sequenceNum, captureTime);
			return ret;
		}

		public static GLEnum VideoCaptureNV(uint videoCaptureSlot, ref uint sequenceNum, ulong* captureTime)
		{
			fixed (uint* psequenceNum0 = &sequenceNum)
			{
				GLEnum ret = VideoCaptureNVNative(videoCaptureSlot, psequenceNum0, captureTime);
				return ret;
			}
		}

		public static GLEnum VideoCaptureNV(uint videoCaptureSlot, uint* sequenceNum, ref ulong captureTime)
		{
			fixed (ulong* pcaptureTime0 = &captureTime)
			{
				GLEnum ret = VideoCaptureNVNative(videoCaptureSlot, sequenceNum, pcaptureTime0);
				return ret;
			}
		}

		public static GLEnum VideoCaptureNV(uint videoCaptureSlot, ref uint sequenceNum, ref ulong captureTime)
		{
			fixed (uint* psequenceNum0 = &sequenceNum)
			{
				fixed (ulong* pcaptureTime1 = &captureTime)
				{
					GLEnum ret = VideoCaptureNVNative(videoCaptureSlot, psequenceNum0, pcaptureTime1);
					return ret;
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VideoCaptureStreamParameterdvNVNative(uint videoCaptureSlot, uint stream, GLEnum pname, double* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, GLEnum, double*, void>)funcTable[538])(videoCaptureSlot, stream, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, GLEnum, nint, void>)funcTable[538])(videoCaptureSlot, stream, pname, (nint)@params);
			#endif
		}

		public static void VideoCaptureStreamParameterdvNV(uint videoCaptureSlot, uint stream, GLEnum pname, double* @params)
		{
			VideoCaptureStreamParameterdvNVNative(videoCaptureSlot, stream, pname, @params);
		}

		public static void VideoCaptureStreamParameterdvNV(uint videoCaptureSlot, uint stream, GLEnum pname, ref double @params)
		{
			fixed (double* pparams0 = &@params)
			{
				VideoCaptureStreamParameterdvNVNative(videoCaptureSlot, stream, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VideoCaptureStreamParameterfvNVNative(uint videoCaptureSlot, uint stream, GLEnum pname, float* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, GLEnum, float*, void>)funcTable[539])(videoCaptureSlot, stream, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, GLEnum, nint, void>)funcTable[539])(videoCaptureSlot, stream, pname, (nint)@params);
			#endif
		}

		public static void VideoCaptureStreamParameterfvNV(uint videoCaptureSlot, uint stream, GLEnum pname, float* @params)
		{
			VideoCaptureStreamParameterfvNVNative(videoCaptureSlot, stream, pname, @params);
		}

		public static void VideoCaptureStreamParameterfvNV(uint videoCaptureSlot, uint stream, GLEnum pname, ref float @params)
		{
			fixed (float* pparams0 = &@params)
			{
				VideoCaptureStreamParameterfvNVNative(videoCaptureSlot, stream, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void VideoCaptureStreamParameterivNVNative(uint videoCaptureSlot, uint stream, GLEnum pname, int* @params)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, GLEnum, int*, void>)funcTable[540])(videoCaptureSlot, stream, pname, @params);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, GLEnum, nint, void>)funcTable[540])(videoCaptureSlot, stream, pname, (nint)@params);
			#endif
		}

		public static void VideoCaptureStreamParameterivNV(uint videoCaptureSlot, uint stream, GLEnum pname, int* @params)
		{
			VideoCaptureStreamParameterivNVNative(videoCaptureSlot, stream, pname, @params);
		}

		public static void VideoCaptureStreamParameterivNV(uint videoCaptureSlot, uint stream, GLEnum pname, ref int @params)
		{
			fixed (int* pparams0 = &@params)
			{
				VideoCaptureStreamParameterivNVNative(videoCaptureSlot, stream, pname, pparams0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ViewportPositionWScaleNVNative(uint index, float xcoeff, float ycoeff)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[541])(index, xcoeff, ycoeff);
			#else
			((delegate* unmanaged[Cdecl]<uint, float, float, void>)funcTable[541])(index, xcoeff, ycoeff);
			#endif
		}

		public static void ViewportPositionWScaleNV(uint index, float xcoeff, float ycoeff)
		{
			ViewportPositionWScaleNVNative(index, xcoeff, ycoeff);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ViewportSwizzleNVNative(uint index, GLEnum swizzlex, GLEnum swizzley, GLEnum swizzlez, GLEnum swizzlew)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, GLEnum, GLEnum, GLEnum, void>)funcTable[542])(index, swizzlex, swizzley, swizzlez, swizzlew);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, GLEnum, GLEnum, GLEnum, void>)funcTable[542])(index, swizzlex, swizzley, swizzlez, swizzlew);
			#endif
		}

		public static void ViewportSwizzleNV(uint index, GLEnum swizzlex, GLEnum swizzley, GLEnum swizzlez, GLEnum swizzlew)
		{
			ViewportSwizzleNVNative(index, swizzlex, swizzley, swizzlez, swizzlew);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WaitSemaphoreui64NVXNative(uint waitGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint*, ulong*, void>)funcTable[543])(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, void>)funcTable[543])(waitGpu, fenceObjectCount, (nint)semaphoreArray, (nint)fenceValueArray);
			#endif
		}

		public static void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, uint* semaphoreArray, ulong* fenceValueArray)
		{
			WaitSemaphoreui64NVXNative(waitGpu, fenceObjectCount, semaphoreArray, fenceValueArray);
		}

		public static void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, ref uint semaphoreArray, ulong* fenceValueArray)
		{
			fixed (uint* psemaphoreArray0 = &semaphoreArray)
			{
				WaitSemaphoreui64NVXNative(waitGpu, fenceObjectCount, psemaphoreArray0, fenceValueArray);
			}
		}

		public static void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, uint* semaphoreArray, ref ulong fenceValueArray)
		{
			fixed (ulong* pfenceValueArray0 = &fenceValueArray)
			{
				WaitSemaphoreui64NVXNative(waitGpu, fenceObjectCount, semaphoreArray, pfenceValueArray0);
			}
		}

		public static void WaitSemaphoreui64NVX(uint waitGpu, int fenceObjectCount, ref uint semaphoreArray, ref ulong fenceValueArray)
		{
			fixed (uint* psemaphoreArray0 = &semaphoreArray)
			{
				fixed (ulong* pfenceValueArray1 = &fenceValueArray)
				{
					WaitSemaphoreui64NVXNative(waitGpu, fenceObjectCount, psemaphoreArray0, pfenceValueArray1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WeightPathsNVNative(uint resultPath, int numPaths, uint* paths, float* weights)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, int, uint*, float*, void>)funcTable[544])(resultPath, numPaths, paths, weights);
			#else
			((delegate* unmanaged[Cdecl]<uint, int, nint, nint, void>)funcTable[544])(resultPath, numPaths, (nint)paths, (nint)weights);
			#endif
		}

		public static void WeightPathsNV(uint resultPath, int numPaths, uint* paths, float* weights)
		{
			WeightPathsNVNative(resultPath, numPaths, paths, weights);
		}

		public static void WeightPathsNV(uint resultPath, int numPaths, ref uint paths, float* weights)
		{
			fixed (uint* ppaths0 = &paths)
			{
				WeightPathsNVNative(resultPath, numPaths, ppaths0, weights);
			}
		}

		public static void WeightPathsNV(uint resultPath, int numPaths, uint* paths, ref float weights)
		{
			fixed (float* pweights0 = &weights)
			{
				WeightPathsNVNative(resultPath, numPaths, paths, pweights0);
			}
		}

		public static void WeightPathsNV(uint resultPath, int numPaths, ref uint paths, ref float weights)
		{
			fixed (uint* ppaths0 = &paths)
			{
				fixed (float* pweights1 = &weights)
				{
					WeightPathsNVNative(resultPath, numPaths, ppaths0, pweights1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawVkImageNVNative(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, uint, float, float, float, float, float, float, float, float, float, void>)funcTable[545])(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
			#else
			((delegate* unmanaged[Cdecl]<ulong, uint, float, float, float, float, float, float, float, float, float, void>)funcTable[545])(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
			#endif
		}

		public static void DrawVkImageNV(ulong vkImage, uint sampler, float x0, float y0, float x1, float y1, float z, float s0, float t0, float s1, float t1)
		{
			DrawVkImageNVNative(vkImage, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static GLVulkanProcNV GetVkProcAddrNVNative(byte* name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<byte*, GLVulkanProcNV>)funcTable[546])(name);
			#else
			return (GLVulkanProcNV)((delegate* unmanaged[Cdecl]<nint, GLVulkanProcNV>)funcTable[546])((nint)name);
			#endif
		}

		public static GLVulkanProcNV GetVkProcAddrNV(byte* name)
		{
			GLVulkanProcNV ret = GetVkProcAddrNVNative(name);
			return ret;
		}

		public static GLVulkanProcNV GetVkProcAddrNV(string name)
		{
			byte* pStr0 = null;
			int pStrSize0 = 0;
			if (name != null)
			{
				pStrSize0 = Utils.GetByteCountUTF8(name);
				if (pStrSize0 >= Utils.MaxStackallocSize)
				{
					pStr0 = Utils.Alloc<byte>(pStrSize0 + 1);
				}
				else
				{
					byte* pStrStack0 = stackalloc byte[pStrSize0 + 1];
					pStr0 = pStrStack0;
				}
				int pStrOffset0 = Utils.EncodeStringUTF8(name, pStr0, pStrSize0);
				pStr0[pStrOffset0] = 0;
			}
			GLVulkanProcNV ret = GetVkProcAddrNVNative(pStr0);
			if (pStrSize0 >= Utils.MaxStackallocSize)
			{
				Utils.Free(pStr0);
			}
			return ret;
		}

		public static GLVulkanProcNV GetVkProcAddrNV(ReadOnlySpan<byte> name)
		{
			fixed (byte* pname0 = name)
			{
				GLVulkanProcNV ret = GetVkProcAddrNVNative(pname0);
				return ret;
			}
		}

		public static GLVulkanProcNV GetVkProcAddrNV(ref byte name)
		{
			fixed (byte* pname0 = &name)
			{
				GLVulkanProcNV ret = GetVkProcAddrNVNative(pname0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void WaitVkSemaphoreNVNative(ulong vkSemaphore)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[547])(vkSemaphore);
			#else
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[547])(vkSemaphore);
			#endif
		}

		public static void WaitVkSemaphoreNV(ulong vkSemaphore)
		{
			WaitVkSemaphoreNVNative(vkSemaphore);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SignalVkSemaphoreNVNative(ulong vkSemaphore)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[548])(vkSemaphore);
			#else
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[548])(vkSemaphore);
			#endif
		}

		public static void SignalVkSemaphoreNV(ulong vkSemaphore)
		{
			SignalVkSemaphoreNVNative(vkSemaphore);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SignalVkFenceNVNative(ulong vkFence)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[549])(vkFence);
			#else
			((delegate* unmanaged[Cdecl]<ulong, void>)funcTable[549])(vkFence);
			#endif
		}

		public static void SignalVkFenceNV(ulong vkFence)
		{
			SignalVkFenceNVNative(vkFence);
		}

	}
}
