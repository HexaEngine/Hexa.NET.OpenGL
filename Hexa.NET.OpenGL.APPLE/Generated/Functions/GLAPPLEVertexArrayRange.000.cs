// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.APPLE
{
	public unsafe partial class GLAPPLEVertexArrayRange
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void FlushVertexArrayRangeAPPLENative(int length, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void*, void>)funcTable[0])(length, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[0])(length, (nint)pointer);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_APPLE_vertex_array_range</remarks>
		public void FlushVertexArrayRangeAPPLE(int length, void* pointer)
		{
			FlushVertexArrayRangeAPPLENative(length, pointer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_APPLE_vertex_array_range</remarks>
		public void FlushVertexArrayRangeAPPLE(int length, nint pointer)
		{
			FlushVertexArrayRangeAPPLENative(length, (void*)pointer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_APPLE_vertex_array_range</remarks>
		public void FlushVertexArrayRangeAPPLE<TPointer>(int length, Span<TPointer> pointer) where TPointer : unmanaged
		{
			fixed (TPointer* ppointer0 = pointer)
			{
				FlushVertexArrayRangeAPPLENative(length, ppointer0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void VertexArrayParameteriAPPLENative(GLVertexArrayPNameAPPLE pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLVertexArrayPNameAPPLE, int, void>)funcTable[1])(pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLVertexArrayPNameAPPLE, int, void>)funcTable[1])(pname, param);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_APPLE_vertex_array_range</remarks>
		public void VertexArrayParameteriAPPLE(GLVertexArrayPNameAPPLE pname, int param)
		{
			VertexArrayParameteriAPPLENative(pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void VertexArrayRangeAPPLENative(int length, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, void*, void>)funcTable[2])(length, pointer);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[2])(length, (nint)pointer);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_APPLE_vertex_array_range</remarks>
		public void VertexArrayRangeAPPLE(int length, void* pointer)
		{
			VertexArrayRangeAPPLENative(length, pointer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_APPLE_vertex_array_range</remarks>
		public void VertexArrayRangeAPPLE(int length, nint pointer)
		{
			VertexArrayRangeAPPLENative(length, (void*)pointer);
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_APPLE_vertex_array_range</remarks>
		public void VertexArrayRangeAPPLE<TPointer>(int length, Span<TPointer> pointer) where TPointer : unmanaged
		{
			fixed (TPointer* ppointer0 = pointer)
			{
				VertexArrayRangeAPPLENative(length, ppointer0);
			}
		}

	}
}
