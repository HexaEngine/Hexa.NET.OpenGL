// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.APPLE
{
	public static unsafe partial class GLAPPLEVertexProgramEvaluators
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DisableVertexAttribAPPLENative(uint index, GLEnum pname)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, void>)funcTable[0])(index, pname);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, void>)funcTable[0])(index, pname);
			#endif
		}

		public static void DisableVertexAttribAPPLE(uint index, GLEnum pname)
		{
			DisableVertexAttribAPPLENative(index, pname);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void EnableVertexAttribAPPLENative(uint index, GLEnum pname)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, GLEnum, void>)funcTable[1])(index, pname);
			#else
			((delegate* unmanaged[Cdecl]<uint, GLEnum, void>)funcTable[1])(index, pname);
			#endif
		}

		public static void EnableVertexAttribAPPLE(uint index, GLEnum pname)
		{
			EnableVertexAttribAPPLENative(index, pname);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsVertexAttribEnabledAPPLENative(uint index, GLEnum pname)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, GLEnum, byte>)funcTable[2])(index, pname);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, GLEnum, byte>)funcTable[2])(index, pname);
			#endif
		}

		public static bool IsVertexAttribEnabledAPPLE(uint index, GLEnum pname)
		{
			byte ret = IsVertexAttribEnabledAPPLENative(index, pname);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MapVertexAttrib1dAPPLENative(uint index, uint size, double u1, double u2, int stride, int order, double* points)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, double, double, int, int, double*, void>)funcTable[3])(index, size, u1, u2, stride, order, points);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, double, double, int, int, nint, void>)funcTable[3])(index, size, u1, u2, stride, order, (nint)points);
			#endif
		}

		public static void MapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, double* points)
		{
			MapVertexAttrib1dAPPLENative(index, size, u1, u2, stride, order, points);
		}

		public static void MapVertexAttrib1dAPPLE(uint index, uint size, double u1, double u2, int stride, int order, ref double points)
		{
			fixed (double* ppoints0 = &points)
			{
				MapVertexAttrib1dAPPLENative(index, size, u1, u2, stride, order, ppoints0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MapVertexAttrib1fAPPLENative(uint index, uint size, float u1, float u2, int stride, int order, float* points)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float, float, int, int, float*, void>)funcTable[4])(index, size, u1, u2, stride, order, points);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, float, float, int, int, nint, void>)funcTable[4])(index, size, u1, u2, stride, order, (nint)points);
			#endif
		}

		public static void MapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, float* points)
		{
			MapVertexAttrib1fAPPLENative(index, size, u1, u2, stride, order, points);
		}

		public static void MapVertexAttrib1fAPPLE(uint index, uint size, float u1, float u2, int stride, int order, ref float points)
		{
			fixed (float* ppoints0 = &points)
			{
				MapVertexAttrib1fAPPLENative(index, size, u1, u2, stride, order, ppoints0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MapVertexAttrib2dAPPLENative(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, double, double, int, int, double, double, int, int, double*, void>)funcTable[5])(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, double, double, int, int, double, double, int, int, nint, void>)funcTable[5])(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, (nint)points);
			#endif
		}

		public static void MapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double* points)
		{
			MapVertexAttrib2dAPPLENative(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
		}

		public static void MapVertexAttrib2dAPPLE(uint index, uint size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, ref double points)
		{
			fixed (double* ppoints0 = &points)
			{
				MapVertexAttrib2dAPPLENative(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ppoints0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MapVertexAttrib2fAPPLENative(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, uint, float, float, int, int, float, float, int, int, float*, void>)funcTable[6])(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
			#else
			((delegate* unmanaged[Cdecl]<uint, uint, float, float, int, int, float, float, int, int, nint, void>)funcTable[6])(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, (nint)points);
			#endif
		}

		public static void MapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float* points)
		{
			MapVertexAttrib2fAPPLENative(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
		}

		public static void MapVertexAttrib2fAPPLE(uint index, uint size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, ref float points)
		{
			fixed (float* ppoints0 = &points)
			{
				MapVertexAttrib2fAPPLENative(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, ppoints0);
			}
		}

	}
}
