// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.APPLE
{
	public static unsafe partial class GLAPPLEFence
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DeleteFencesAPPLENative(int n, uint* fences)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[0])(n, fences);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[0])(n, (nint)fences);
			#endif
		}

		public static void DeleteFencesAPPLE(int n, uint* fences)
		{
			DeleteFencesAPPLENative(n, fences);
		}

		public static void DeleteFencesAPPLE(int n, ref uint fences)
		{
			fixed (uint* pfences0 = &fences)
			{
				DeleteFencesAPPLENative(n, pfences0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FinishFenceAPPLENative(uint fence)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1])(fence);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[1])(fence);
			#endif
		}

		public static void FinishFenceAPPLE(uint fence)
		{
			FinishFenceAPPLENative(fence);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FinishObjectAPPLENative(GLObjectTypeAPPLE @object, int name)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLObjectTypeAPPLE, int, void>)funcTable[2])(@object, name);
			#else
			((delegate* unmanaged[Cdecl]<GLObjectTypeAPPLE, int, void>)funcTable[2])(@object, name);
			#endif
		}

		public static void FinishObjectAPPLE(GLObjectTypeAPPLE @object, int name)
		{
			FinishObjectAPPLENative(@object, name);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void GenFencesAPPLENative(int n, uint* fences)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<int, uint*, void>)funcTable[3])(n, fences);
			#else
			((delegate* unmanaged[Cdecl]<int, nint, void>)funcTable[3])(n, (nint)fences);
			#endif
		}

		public static void GenFencesAPPLE(int n, uint* fences)
		{
			GenFencesAPPLENative(n, fences);
		}

		public static void GenFencesAPPLE(int n, ref uint fences)
		{
			fixed (uint* pfences0 = &fences)
			{
				GenFencesAPPLENative(n, pfences0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte IsFenceAPPLENative(uint fence)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[4])(fence);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[4])(fence);
			#endif
		}

		public static bool IsFenceAPPLE(uint fence)
		{
			byte ret = IsFenceAPPLENative(fence);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void SetFenceAPPLENative(uint fence)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[5])(fence);
			#else
			((delegate* unmanaged[Cdecl]<uint, void>)funcTable[5])(fence);
			#endif
		}

		public static void SetFenceAPPLE(uint fence)
		{
			SetFenceAPPLENative(fence);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte TestFenceAPPLENative(uint fence)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[6])(fence);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<uint, byte>)funcTable[6])(fence);
			#endif
		}

		public static bool TestFenceAPPLE(uint fence)
		{
			byte ret = TestFenceAPPLENative(fence);
			return ret != 0;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static byte TestObjectAPPLENative(GLObjectTypeAPPLE @object, uint name)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<GLObjectTypeAPPLE, uint, byte>)funcTable[7])(@object, name);
			#else
			return (byte)((delegate* unmanaged[Cdecl]<GLObjectTypeAPPLE, uint, byte>)funcTable[7])(@object, name);
			#endif
		}

		public static bool TestObjectAPPLE(GLObjectTypeAPPLE @object, uint name)
		{
			byte ret = TestObjectAPPLENative(@object, name);
			return ret != 0;
		}

	}
}
