// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.APPLE
{
	public static unsafe partial class GLAPPLEElementArray
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawElementArrayAPPLENative(GLPrimitiveType mode, int first, int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int, int, void>)funcTable[0])(mode, first, count);
			#else
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int, int, void>)funcTable[0])(mode, first, count);
			#endif
		}

		public static void DrawElementArrayAPPLE(GLPrimitiveType mode, int first, int count)
		{
			DrawElementArrayAPPLENative(mode, first, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void DrawRangeElementArrayAPPLENative(GLPrimitiveType mode, uint start, uint end, int first, int count)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, uint, uint, int, int, void>)funcTable[1])(mode, start, end, first, count);
			#else
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, uint, uint, int, int, void>)funcTable[1])(mode, start, end, first, count);
			#endif
		}

		public static void DrawRangeElementArrayAPPLE(GLPrimitiveType mode, uint start, uint end, int first, int count)
		{
			DrawRangeElementArrayAPPLENative(mode, start, end, first, count);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void ElementPointerAPPLENative(GLElementPointerTypeATI type, void* pointer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLElementPointerTypeATI, void*, void>)funcTable[2])(type, pointer);
			#else
			((delegate* unmanaged[Cdecl]<GLElementPointerTypeATI, nint, void>)funcTable[2])(type, (nint)pointer);
			#endif
		}

		public static void ElementPointerAPPLE(GLElementPointerTypeATI type, void* pointer)
		{
			ElementPointerAPPLENative(type, pointer);
		}

		public static void ElementPointerAPPLE(GLElementPointerTypeATI type, nint pointer)
		{
			ElementPointerAPPLENative(type, (void*)pointer);
		}

		public static void ElementPointerAPPLE<TPointer>(GLElementPointerTypeATI type, Span<TPointer> pointer) where TPointer : unmanaged
		{
			fixed (TPointer* ppointer0 = pointer)
			{
				ElementPointerAPPLENative(type, ppointer0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiDrawElementArrayAPPLENative(GLPrimitiveType mode, int* first, int* count, int primcount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, int*, int*, int, void>)funcTable[3])(mode, first, count, primcount);
			#else
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, nint, nint, int, void>)funcTable[3])(mode, (nint)first, (nint)count, primcount);
			#endif
		}

		public static void MultiDrawElementArrayAPPLE(GLPrimitiveType mode, int* first, int* count, int primcount)
		{
			MultiDrawElementArrayAPPLENative(mode, first, count, primcount);
		}

		public static void MultiDrawElementArrayAPPLE(GLPrimitiveType mode, Span<int> first, int* count, int primcount)
		{
			fixed (int* pfirst0 = first)
			{
				MultiDrawElementArrayAPPLENative(mode, pfirst0, count, primcount);
			}
		}

		public static void MultiDrawElementArrayAPPLE(GLPrimitiveType mode, ref int first, int* count, int primcount)
		{
			fixed (int* pfirst0 = &first)
			{
				MultiDrawElementArrayAPPLENative(mode, pfirst0, count, primcount);
			}
		}

		public static void MultiDrawElementArrayAPPLE(GLPrimitiveType mode, int* first, Span<int> count, int primcount)
		{
			fixed (int* pcount0 = count)
			{
				MultiDrawElementArrayAPPLENative(mode, first, pcount0, primcount);
			}
		}

		public static void MultiDrawElementArrayAPPLE(GLPrimitiveType mode, int* first, ref int count, int primcount)
		{
			fixed (int* pcount0 = &count)
			{
				MultiDrawElementArrayAPPLENative(mode, first, pcount0, primcount);
			}
		}

		public static void MultiDrawElementArrayAPPLE(GLPrimitiveType mode, Span<int> first, Span<int> count, int primcount)
		{
			fixed (int* pfirst0 = first)
			{
				fixed (int* pcount1 = count)
				{
					MultiDrawElementArrayAPPLENative(mode, pfirst0, pcount1, primcount);
				}
			}
		}

		public static void MultiDrawElementArrayAPPLE(GLPrimitiveType mode, ref int first, ref int count, int primcount)
		{
			fixed (int* pfirst0 = &first)
			{
				fixed (int* pcount1 = &count)
				{
					MultiDrawElementArrayAPPLENative(mode, pfirst0, pcount1, primcount);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void MultiDrawRangeElementArrayAPPLENative(GLPrimitiveType mode, uint start, uint end, int* first, int* count, int primcount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, uint, uint, int*, int*, int, void>)funcTable[4])(mode, start, end, first, count, primcount);
			#else
			((delegate* unmanaged[Cdecl]<GLPrimitiveType, uint, uint, nint, nint, int, void>)funcTable[4])(mode, start, end, (nint)first, (nint)count, primcount);
			#endif
		}

		public static void MultiDrawRangeElementArrayAPPLE(GLPrimitiveType mode, uint start, uint end, int* first, int* count, int primcount)
		{
			MultiDrawRangeElementArrayAPPLENative(mode, start, end, first, count, primcount);
		}

		public static void MultiDrawRangeElementArrayAPPLE(GLPrimitiveType mode, uint start, uint end, Span<int> first, int* count, int primcount)
		{
			fixed (int* pfirst0 = first)
			{
				MultiDrawRangeElementArrayAPPLENative(mode, start, end, pfirst0, count, primcount);
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GLPrimitiveType mode, uint start, uint end, ref int first, int* count, int primcount)
		{
			fixed (int* pfirst0 = &first)
			{
				MultiDrawRangeElementArrayAPPLENative(mode, start, end, pfirst0, count, primcount);
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GLPrimitiveType mode, uint start, uint end, int* first, Span<int> count, int primcount)
		{
			fixed (int* pcount0 = count)
			{
				MultiDrawRangeElementArrayAPPLENative(mode, start, end, first, pcount0, primcount);
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GLPrimitiveType mode, uint start, uint end, int* first, ref int count, int primcount)
		{
			fixed (int* pcount0 = &count)
			{
				MultiDrawRangeElementArrayAPPLENative(mode, start, end, first, pcount0, primcount);
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GLPrimitiveType mode, uint start, uint end, Span<int> first, Span<int> count, int primcount)
		{
			fixed (int* pfirst0 = first)
			{
				fixed (int* pcount1 = count)
				{
					MultiDrawRangeElementArrayAPPLENative(mode, start, end, pfirst0, pcount1, primcount);
				}
			}
		}

		public static void MultiDrawRangeElementArrayAPPLE(GLPrimitiveType mode, uint start, uint end, ref int first, ref int count, int primcount)
		{
			fixed (int* pfirst0 = &first)
			{
				fixed (int* pcount1 = &count)
				{
					MultiDrawRangeElementArrayAPPLENative(mode, start, end, pfirst0, pcount1, primcount);
				}
			}
		}

	}
}
