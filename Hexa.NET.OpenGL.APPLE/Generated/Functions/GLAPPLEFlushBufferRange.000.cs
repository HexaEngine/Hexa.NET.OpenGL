// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.OpenGL.APPLE
{
	public static unsafe partial class GLAPPLEFlushBufferRange
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void BufferParameteriAPPLENative(GLEnum target, GLEnum pname, int param)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLEnum, GLEnum, int, void>)funcTable[0])(target, pname, param);
			#else
			((delegate* unmanaged[Cdecl]<GLEnum, GLEnum, int, void>)funcTable[0])(target, pname, param);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_APPLE_flush_buffer_range</remarks>
		public static void BufferParameteriAPPLE(GLEnum target, GLEnum pname, int param)
		{
			BufferParameteriAPPLENative(target, pname, param);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal static void FlushMappedBufferRangeAPPLENative(GLBufferTargetARB target, nint offset, nint size)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<GLBufferTargetARB, nint, nint, void>)funcTable[1])(target, offset, size);
			#else
			((delegate* unmanaged[Cdecl]<GLBufferTargetARB, nint, nint, void>)funcTable[1])(target, offset, size);
			#endif
		}

		/// <summary>
		/// To be documented.
		/// </summary>
		/// <remarks>Used by Extensions:<br/>GL_APPLE_flush_buffer_range</remarks>
		public static void FlushMappedBufferRangeAPPLE(GLBufferTargetARB target, nint offset, nint size)
		{
			FlushMappedBufferRangeAPPLENative(target, offset, size);
		}

	}
}
